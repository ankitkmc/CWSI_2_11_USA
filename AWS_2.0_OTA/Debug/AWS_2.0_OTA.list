
AWS_2.0_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  08017dc0  08017dc0  00027dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e68  08018e68  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08018e68  08018e68  00028e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e70  08018e70  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018e70  08018e70  00028e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08018e78  08018e78  00028e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08018e80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff4  20000080  08018f00  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001074  08018f00  00031074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e1e3  00000000  00000000  000300f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f11  00000000  00000000  0005e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002218  00000000  00000000  000621e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a4d  00000000  00000000  00064400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b0c  00000000  00000000  00065e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020604  00000000  00000000  0008f959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109b61  00000000  00000000  000aff5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b24c  00000000  00000000  001b9ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001c4d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017da4 	.word	0x08017da4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08017da4 	.word	0x08017da4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b98e 	b.w	8000ef0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f824 	bl	8000c28 <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2ulz>:
 8000bec:	b5d0      	push	{r4, r6, r7, lr}
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__aeabi_d2ulz+0x34>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4606      	mov	r6, r0
 8000bf4:	460f      	mov	r7, r1
 8000bf6:	f7ff fcff 	bl	80005f8 <__aeabi_dmul>
 8000bfa:	f7ff ffbf 	bl	8000b7c <__aeabi_d2uiz>
 8000bfe:	4604      	mov	r4, r0
 8000c00:	f7ff fc80 	bl	8000504 <__aeabi_ui2d>
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <__aeabi_d2ulz+0x38>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	f7ff fcf6 	bl	80005f8 <__aeabi_dmul>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4630      	mov	r0, r6
 8000c12:	4639      	mov	r1, r7
 8000c14:	f7ff fb38 	bl	8000288 <__aeabi_dsub>
 8000c18:	f7ff ffb0 	bl	8000b7c <__aeabi_d2uiz>
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c20:	3df00000 	.word	0x3df00000
 8000c24:	41f00000 	.word	0x41f00000

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <MX_ADC1_Init+0xc0>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f6c:	f011 ff3a 	bl	8012de4 <HAL_ADC_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f76:	f00b fa29 	bl	800c3cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0xc4>)
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	237f      	movs	r3, #127	; 0x7f
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_ADC1_Init+0xbc>)
 8000f98:	f012 f866 	bl	8013068 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f00b fa13 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000009c 	.word	0x2000009c
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	04300002 	.word	0x04300002

08000fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0a2      	sub	sp, #136	; 0x88
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2260      	movs	r2, #96	; 0x60
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f016 fdff 	bl	8017be0 <memset>
  if(adcHandle->Instance==ADC1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_ADC_MspInit+0x104>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d165      	bne.n	80010b8 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000ff2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ff6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f014 f86d 	bl	80150dc <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001008:	f00b f9e0 	bl	800c3cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 8001012:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_ADC_MspInit+0x108>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SOLAR_IN_Pin|LUX_IN_Pin|WD_M_IN_Pin;
 8001054:	230b      	movs	r3, #11
 8001056:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001058:	230b      	movs	r3, #11
 800105a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001064:	4619      	mov	r1, r3
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <HAL_ADC_MspInit+0x10c>)
 8001068:	f012 ff6a 	bl	8013f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BATTERY_IN_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(BATTERY_IN_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0x10c>)
 8001080:	f012 ff5e 	bl	8013f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IRRO1_IN_Pin;
 8001084:	2320      	movs	r3, #32
 8001086:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001088:	230b      	movs	r3, #11
 800108a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IRRO1_IN_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f012 ff51 	bl	8013f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IRRO2_IN_Pin;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IRRO2_IN_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f012 ff44 	bl	8013f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b8:	bf00      	nop
 80010ba:	3788      	adds	r7, #136	; 0x88
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	50040000 	.word	0x50040000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a6f      	ldr	r2, [pc, #444]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a69      	ldr	r2, [pc, #420]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a63      	ldr	r2, [pc, #396]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a5d      	ldr	r2, [pc, #372]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a57      	ldr	r2, [pc, #348]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <MX_GPIO_Init+0x1d8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RE7_Pin|DE7_Pin|RE5_Pin|DE5_Pin
 8001172:	2200      	movs	r2, #0
 8001174:	f64f 71be 	movw	r1, #65470	; 0xffbe
 8001178:	484b      	ldr	r0, [pc, #300]	; (80012a8 <MX_GPIO_Init+0x1dc>)
 800117a:	f013 f85b 	bl	8014234 <HAL_GPIO_WritePin>
                          |DE1_Pin|IRRO2_1_Pin|DE2_Pin|DE3_Pin
                          |IRRO2_2_Pin|RE2_Pin|RE3_Pin|RE6_Pin
                          |DE6_Pin|RE4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UL1_Pin|IRRO1_1_Pin|MUX0_Pin|MUX1_Pin
 800117e:	2200      	movs	r2, #0
 8001180:	f641 5106 	movw	r1, #7430	; 0x1d06
 8001184:	4849      	ldr	r0, [pc, #292]	; (80012ac <MX_GPIO_Init+0x1e0>)
 8001186:	f013 f855 	bl	8014234 <HAL_GPIO_WritePin>
                          |DE4_Pin|IRRO1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	4848      	ldr	r0, [pc, #288]	; (80012b0 <MX_GPIO_Init+0x1e4>)
 8001190:	f013 f850 	bl	8014234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RE1_Pin|NEOWAY_PWR_Pin|MUX2_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f242 0190 	movw	r1, #8336	; 0x2090
 800119a:	4846      	ldr	r0, [pc, #280]	; (80012b4 <MX_GPIO_Init+0x1e8>)
 800119c:	f013 f84a 	bl	8014234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(V3_8_GPIO_Port, V3_8_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	4843      	ldr	r0, [pc, #268]	; (80012b4 <MX_GPIO_Init+0x1e8>)
 80011a6:	f013 f845 	bl	8014234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RE7_Pin|DE7_Pin|RE5_Pin|DE5_Pin
 80011aa:	f64f 73be 	movw	r3, #65470	; 0xffbe
 80011ae:	61fb      	str	r3, [r7, #28]
                          |DE1_Pin|IRRO2_1_Pin|DE2_Pin|DE3_Pin
                          |IRRO2_2_Pin|RE2_Pin|RE3_Pin|RE6_Pin
                          |DE6_Pin|RE4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_GPIO_Init+0x1dc>)
 80011c4:	f012 febc 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = UL1_Pin|IRRO1_1_Pin|MUX0_Pin|MUX1_Pin
 80011c8:	f641 5306 	movw	r3, #7430	; 0x1d06
 80011cc:	61fb      	str	r3, [r7, #28]
                          |DE4_Pin|IRRO1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4832      	ldr	r0, [pc, #200]	; (80012ac <MX_GPIO_Init+0x1e0>)
 80011e2:	f012 fead 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UB1_Pin;
 80011e6:	2308      	movs	r3, #8
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UB1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	482f      	ldr	r0, [pc, #188]	; (80012b8 <MX_GPIO_Init+0x1ec>)
 80011fa:	f012 fea1 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_12V_Pin;
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_12V_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <MX_GPIO_Init+0x1e4>)
 8001216:	f012 fe93 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RE1_Pin|V3_8_Pin|MUX2_Pin;
 800121a:	f242 0350 	movw	r3, #8272	; 0x2050
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4820      	ldr	r0, [pc, #128]	; (80012b4 <MX_GPIO_Init+0x1e8>)
 8001234:	f012 fe84 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RG_M_INT_Pin;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RG_M_INT_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f012 fe75 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NEOWAY_PWR_Pin;
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125e:	2302      	movs	r3, #2
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NEOWAY_PWR_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <MX_GPIO_Init+0x1e8>)
 800126e:	f012 fe67 	bl	8013f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS_M_IN_Pin;
 8001272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WS_M_IN_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_GPIO_Init+0x1e0>)
 8001288:	f012 fe5a 	bl	8013f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2017      	movs	r0, #23
 8001292:	f012 fba6 	bl	80139e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001296:	2017      	movs	r0, #23
 8001298:	f012 fbbf 	bl	8013a1a <HAL_NVIC_EnableIRQ>

}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48001000 	.word	0x48001000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48001c00 	.word	0x48001c00

080012bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_IWDG_Init+0x34>)
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <MX_IWDG_Init+0x38>)
 80012c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_IWDG_Init+0x34>)
 80012c8:	2206      	movs	r2, #6
 80012ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_IWDG_Init+0x34>)
 80012ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012d2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_IWDG_Init+0x34>)
 80012d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_IWDG_Init+0x34>)
 80012de:	f012 ffe4 	bl	80142aa <HAL_IWDG_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80012e8:	f00b f870 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000100 	.word	0x20000100
 80012f4:	40003000 	.word	0x40003000

080012f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012fc:	f3bf 8f4f 	dsb	sy
}
 8001300:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <__NVIC_SystemReset+0x24>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800130a:	4904      	ldr	r1, [pc, #16]	; (800131c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_SystemReset+0x28>)
 800130e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001310:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001312:	f3bf 8f4f 	dsb	sy
}
 8001316:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <__NVIC_SystemReset+0x20>
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0004 	.word	0x05fa0004

08001324 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e006      	b.n	8001348 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f016 fc24 	bl	8017b8c <memcmp>
 8001344:	4603      	mov	r3, r0
 8001346:	bf00      	nop
      }
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7fe ff89 	bl	8000270 <strlen>
 800135e:	4603      	mov	r3, r0
      }
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	0fdb      	lsrs	r3, r3, #31
 8001376:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <_ZNSt7__cxx119to_stringEi+0x1c>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	425b      	negs	r3, r3
 8001382:	e000      	b.n	8001386 <_ZNSt7__cxx119to_stringEi+0x1e>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8001388:	210a      	movs	r1, #10
 800138a:	6938      	ldr	r0, [r7, #16]
 800138c:	f00b f823 	bl	800c3d6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8001390:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8001392:	7dfa      	ldrb	r2, [r7, #23]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	18d4      	adds	r4, r2, r3
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f015 fd55 	bl	8016e4c <_ZNSaIcEC1Ev>
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	222d      	movs	r2, #45	; 0x2d
 80013a8:	4621      	mov	r1, r4
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f015 fe80 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f015 fd4b 	bl	8016e50 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f015 ff0e 	bl	80171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013c4:	4603      	mov	r3, r0
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00b f842 	bl	800c454 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80013d0:	bf00      	nop
  }
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <_ZNSt7__cxx119to_stringEy>:
    return __str;
  }

  inline string
  to_string(unsigned long long __val)
  {
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b087      	sub	sp, #28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	e9c7 2300 	strd	r2, r3, [r7]
    string __str(__detail::__to_chars_len(__val), '\0');
 80013e6:	220a      	movs	r2, #10
 80013e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ec:	f00b f888 	bl	800c500 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
 80013f0:	4604      	mov	r4, r0
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4618      	mov	r0, r3
 80013f8:	f015 fd28 	bl	8016e4c <_ZNSaIcEC1Ev>
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	4621      	mov	r1, r4
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f015 fe53 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4618      	mov	r0, r3
 8001410:	f015 fd1e 	bl	8016e50 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 8001414:	2100      	movs	r1, #0
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f015 fee2 	bl	80171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800141c:	4604      	mov	r4, r0
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f015 fea6 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001424:	4601      	mov	r1, r0
 8001426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800142a:	4620      	mov	r0, r4
 800142c:	f00b f8ca 	bl	800c5c4 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
    return __str;
 8001430:	bf00      	nop
  }
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}

0800143a <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	2301      	movs	r3, #1
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_Z7d_t_h_sB5cxx11m>:
 */

#ifndef INC_DOUBLE_TO_STRING_H_
#define INC_DOUBLE_TO_STRING_H_

string d_t_h_s(uint32_t decimal) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b098      	sub	sp, #96	; 0x60
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	const string hex_digits = "0123456789ABCDEF";
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f015 fcf4 	bl	8016e4c <_ZNSaIcEC1Ev>
 8001464:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	492c      	ldr	r1, [pc, #176]	; (8001520 <_Z7d_t_h_sB5cxx11m+0xd0>)
 800146e:	4618      	mov	r0, r3
 8001470:	f016 f9a8 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4618      	mov	r0, r3
 800147a:	f015 fce9 	bl	8016e50 <_ZNSaIcED1Ev>
	string hex;
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f015 fe08 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	uint32_t decimal_2 = decimal;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (decimal == 0) {
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d125      	bne.n	80014da <_Z7d_t_h_sB5cxx11m+0x8a>
		hex = "0";
 800148e:	4925      	ldr	r1, [pc, #148]	; (8001524 <_Z7d_t_h_sB5cxx11m+0xd4>)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f015 ffe6 	bl	8017462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	while (decimal > 0) {
 8001496:	e020      	b.n	80014da <_Z7d_t_h_sB5cxx11m+0x8a>
		int digit = decimal % 16;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	65bb      	str	r3, [r7, #88]	; 0x58
		hex = hex_digits[digit] + hex;
 80014a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f015 fe96 	bl	80171da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014ae:	4603      	mov	r3, r0
 80014b0:	7819      	ldrb	r1, [r3, #0]
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00b f8f7 	bl	800c6ac <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f015 fe22 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f015 fe11 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		decimal /= 16;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	603b      	str	r3, [r7, #0]
	while (decimal > 0) {
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1db      	bne.n	8001498 <_Z7d_t_h_sB5cxx11m+0x48>
	}
	if (decimal_2 < 0xF) {
 80014e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e2:	2b0e      	cmp	r3, #14
 80014e4:	d811      	bhi.n	800150a <_Z7d_t_h_sB5cxx11m+0xba>
		hex = "0" + hex;
 80014e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	490d      	ldr	r1, [pc, #52]	; (8001524 <_Z7d_t_h_sB5cxx11m+0xd4>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00b f91a 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80014f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f015 fe07 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001504:	4618      	mov	r0, r3
 8001506:	f015 fdf6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	return hex;
 800150a:	bf00      	nop
}
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4618      	mov	r0, r3
 8001512:	f015 fdf0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return hex;
 8001516:	bf00      	nop
}
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	3760      	adds	r7, #96	; 0x60
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08017dc0 	.word	0x08017dc0
 8001524:	08017dd4 	.word	0x08017dd4

08001528 <_Z5d_t_sB5cxx11dib>:

string d_t_s(double value, int precision = 0, bool add_0 = 0) {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b09a      	sub	sp, #104	; 0x68
 800152c:	af00      	add	r7, sp, #0
 800152e:	6178      	str	r0, [r7, #20]
 8001530:	ed87 0b02 	vstr	d0, [r7, #8]
 8001534:	6139      	str	r1, [r7, #16]
 8001536:	4613      	mov	r3, r2
 8001538:	71fb      	strb	r3, [r7, #7]

	string result;
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f015 fdaa 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

	// Handle negative values
	if (value < 0) {
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800154c:	f7ff fac6 	bl	8000adc <__aeabi_dcmplt>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <_Z5d_t_sB5cxx11dib+0x42>
		result += "-";
 8001556:	4942      	ldr	r1, [pc, #264]	; (8001660 <_Z5d_t_sB5cxx11dib+0x138>)
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f016 f81d 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		value = -value;
 800155e:	68bc      	ldr	r4, [r7, #8]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001566:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	// Convert integer part
	unsigned long long intPart = static_cast<unsigned long long>(value);
 800156a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156e:	f7ff fb3d 	bl	8000bec <__aeabi_d2ulz>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (add_0 && intPart < 10) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <_Z5d_t_sB5cxx11dib+0x6c>
 8001580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001584:	2a0a      	cmp	r2, #10
 8001586:	f173 0300 	sbcs.w	r3, r3, #0
 800158a:	d203      	bcs.n	8001594 <_Z5d_t_sB5cxx11dib+0x6c>
		result += "0";
 800158c:	4935      	ldr	r1, [pc, #212]	; (8001664 <_Z5d_t_sB5cxx11dib+0x13c>)
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f016 f802 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	}
	result += to_string(intPart);
 8001594:	f107 011c 	add.w	r1, r7, #28
 8001598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800159c:	4608      	mov	r0, r1
 800159e:	f7ff ff1c 	bl	80013da <_ZNSt7__cxx119to_stringEy>
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f015 ffcb 	bl	8017544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4618      	mov	r0, r3
 80015b4:	f015 fd9f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Convert decimal part
	if (precision > 0) {
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd4a      	ble.n	8001654 <_Z5d_t_sB5cxx11dib+0x12c>
		result += ".";
 80015be:	492a      	ldr	r1, [pc, #168]	; (8001668 <_Z5d_t_sB5cxx11dib+0x140>)
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f015 ffe9 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		double decimalPart = value - intPart;
 80015c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015ca:	f7fe ffdf 	bl	800058c <__aeabi_ul2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d6:	f7fe fe57 	bl	8000288 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		for (int i = 0; i < precision; ++i) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015e6:	e031      	b.n	800164c <_Z5d_t_sB5cxx11dib+0x124>
			decimalPart *= 10;
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <_Z5d_t_sB5cxx11dib+0x144>)
 80015ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015f2:	f7ff f801 	bl	80005f8 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			int digit = static_cast<int>(decimalPart);
 80015fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001602:	f7ff fa93 	bl	8000b2c <__aeabi_d2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
			result += to_string(digit);
 800160a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fea9 	bl	8001368 <_ZNSt7__cxx119to_stringEi>
 8001616:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161a:	4619      	mov	r1, r3
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f015 ff91 	bl	8017544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001626:	4618      	mov	r0, r3
 8001628:	f015 fd65 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			decimalPart -= digit;
 800162c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800162e:	f7fe ff79 	bl	8000524 <__aeabi_i2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800163a:	f7fe fe25 	bl	8000288 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		for (int i = 0; i < precision; ++i) {
 8001646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001648:	3301      	adds	r3, #1
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800164c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbc9      	blt.n	80015e8 <_Z5d_t_sB5cxx11dib+0xc0>
		}
	}
	return result;
 8001654:	bf00      	nop
}
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	3768      	adds	r7, #104	; 0x68
 800165a:	46bd      	mov	sp, r7
 800165c:	bdb0      	pop	{r4, r5, r7, pc}
 800165e:	bf00      	nop
 8001660:	08017dd8 	.word	0x08017dd8
 8001664:	08017dd4 	.word	0x08017dd4
 8001668:	08017ddc 	.word	0x08017ddc
 800166c:	40240000 	.word	0x40240000

08001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

double s_t_d(const std::string &str) {
 8001670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001674:	b08e      	sub	sp, #56	; 0x38
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	double result = 0.0;
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double factor = 1.0;
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a8>)
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	bool hasDecimal = false;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int decimalPlaces = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
	bool isNegative = false;
 800169a:	2300      	movs	r3, #0
 800169c:	77fb      	strb	r3, [r7, #31]
	bool hasLeadingZeros = true;
 800169e:	2301      	movs	r3, #1
 80016a0:	77bb      	strb	r3, [r7, #30]

	// Handle negative sign
	if (!str.empty() && str[0] == '-') {
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f015 fd94 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f083 0301 	eor.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 80016b4:	2100      	movs	r1, #0
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f015 fd8f 	bl	80171da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80016bc:	4603      	mov	r3, r0
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b2d      	cmp	r3, #45	; 0x2d
 80016c2:	d101      	bne.n	80016c8 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
		isNegative = true;
 80016ce:	2301      	movs	r3, #1
 80016d0:	77fb      	strb	r3, [r7, #31]
	}

	for (char c : str) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	f015 fd44 	bl	8017164 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80016dc:	4603      	mov	r3, r0
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	69b8      	ldr	r0, [r7, #24]
 80016e2:	f015 fd41 	bl	8017168 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e06d      	b.n	80017c8 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00b f881 	bl	800c7f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	75fb      	strb	r3, [r7, #23]
		if (c == '-') {
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b2d      	cmp	r3, #45	; 0x2d
 8001700:	d05a      	beq.n	80017b8 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>
			continue;  // Skip the negative sign if present
		} else
			if (c == '.') {
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b2e      	cmp	r3, #46	; 0x2e
 8001706:	d103      	bne.n	8001710 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
				hasDecimal = true;
 8001708:	2301      	movs	r3, #1
 800170a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800170e:	e056      	b.n	80017be <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14e>
			} else
				if (c >= '0' && c <= '9') {
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b2f      	cmp	r3, #47	; 0x2f
 8001714:	d94b      	bls.n	80017ae <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b39      	cmp	r3, #57	; 0x39
 800171a:	d848      	bhi.n	80017ae <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
					if (hasDecimal) {
 800171c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001720:	2b00      	cmp	r3, #0
 8001722:	d021      	beq.n	8001768 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>
						++decimalPlaces;
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	3301      	adds	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
						factor /= 10.0;
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>)
 8001730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001734:	f7ff f88a 	bl	800084c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
						result += (c - '0') * factor;
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	3b30      	subs	r3, #48	; 0x30
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800174e:	f7fe ff53 	bl	80005f8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800175a:	f7fe fd97 	bl	800028c <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001766:	e019      	b.n	800179c <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12c>
					} else {
						result = result * 10.0 + (c - '0');
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>)
 800176e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001772:	f7fe ff41 	bl	80005f8 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4690      	mov	r8, r2
 800177c:	4699      	mov	r9, r3
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3b30      	subs	r3, #48	; 0x30
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fece 	bl	8000524 <__aeabi_i2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4640      	mov	r0, r8
 800178e:	4649      	mov	r1, r9
 8001790:	f7fe fd7c 	bl	800028c <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
					}
					if (hasLeadingZeros && c != '0') {
 800179c:	7fbb      	ldrb	r3, [r7, #30]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	2b30      	cmp	r3, #48	; 0x30
 80017a6:	d009      	beq.n	80017bc <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
						hasLeadingZeros = false;
 80017a8:	2300      	movs	r3, #0
 80017aa:	77bb      	strb	r3, [r7, #30]
					if (hasLeadingZeros && c != '0') {
 80017ac:	e006      	b.n	80017bc <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
					}
				} else {
					// Invalid character, handle error as needed
					return 0.0;
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e025      	b.n	8001804 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x194>
			continue;  // Skip the negative sign if present
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14e>
					if (hasLeadingZeros && c != '0') {
 80017bc:	bf00      	nop
	for (char c : str) {
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00b f808 	bl	800c7d8 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80017c8:	f107 020c 	add.w	r2, r7, #12
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a ffe8 	bl	800c7a8 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d186      	bne.n	80016ec <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>
				}
	}

	if (hasLeadingZeros) {
 80017de:	7fbb      	ldrb	r3, [r7, #30]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17e>
		return 0.0;  // Input string contains only leading zeros, consider it invalid
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e00a      	b.n	8001804 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x194>
	}

	if (isNegative) {
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x190>
		result = -result;
 80017f4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017fc:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	}

	return result;
 8001800:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8001804:	ec43 2b17 	vmov	d7, r2, r3
 8001808:	eeb0 0a47 	vmov.f32	s0, s14
 800180c:	eef0 0a67 	vmov.f32	s1, s15
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001818:	3ff00000 	.word	0x3ff00000
 800181c:	40240000 	.word	0x40240000

08001820 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>:
 */

#ifndef INC_M_USART_H_
#define INC_M_USART_H_

HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, string &pData, uint32_t Timeout) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	uint16_t *pdata16bits;
	uint16_t uhMask;
	uint32_t tickstart;
	UNUSED(pdata16bits);
	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001832:	2b20      	cmp	r3, #32
 8001834:	bf0c      	ite	eq
 8001836:	2301      	moveq	r3, #1
 8001838:	2300      	movne	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8100 	beq.w	8001a42 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x222>
//		if (&pData == NULL) {
//			return HAL_ERROR;
//		}

		__HAL_LOCK(huart);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x30>
 800184c:	2302      	movs	r3, #2
 800184e:	e0f9      	b.n	8001a44 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x224>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2222      	movs	r2, #34	; 0x22
 8001864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	661a      	str	r2, [r3, #96]	; 0x60

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 800186e:	f011 f8d9 	bl	8012a24 <HAL_GetTick>
 8001872:	6238      	str	r0, [r7, #32]

		huart->RxXferSize = UINT16_MAX - 1;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800187a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		huart->RxXferCount = UINT16_MAX - 1;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001884:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

		/* Computation of UART mask to apply to RDR register */
		UART_MASK_COMPUTATION(huart);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001890:	d10e      	bne.n	80018b0 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x90>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x86>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80018a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018a4:	e02d      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018ae:	e028      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xb4>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xaa>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	22ff      	movs	r2, #255	; 0xff
 80018c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018c8:	e01b      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	227f      	movs	r2, #127	; 0x7f
 80018ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018d2:	e016      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018dc:	d10d      	bne.n	80018fa <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xda>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xd0>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	227f      	movs	r2, #127	; 0x7f
 80018ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018ee:	e008      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	223f      	movs	r2, #63	; 0x3f
 80018f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018f8:	e003      	b.n	8001902 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe2>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		uhMask = huart->Mask;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001908:	83fb      	strh	r3, [r7, #30]

		/* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE)) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001912:	d10a      	bne.n	800192a <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x10a>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d106      	bne.n	800192a <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x10a>
			pdata8bits = NULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
//			pdata16bits = (uint16_t*) pData->c_str();
			pdata16bits = (uint16_t*) pData.c_str();
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f015 fe3d 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001926:	61b8      	str	r0, [r7, #24]
 8001928:	e005      	b.n	8001936 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x116>
		} else {
			pdata8bits = (uint8_t*) pData.c_str();
 800192a:	68b8      	ldr	r0, [r7, #8]
 800192c:	f015 fe38 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24
//			pdata8bits = (uint8_t*) pData->c_str();
			pdata16bits = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
		}

		__HAL_UNLOCK(huart);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		/* Initialize output number of received elements */
//		uint16_t times_idle = 3;
		/* as long as data have to be received */
		while (huart->RxXferCount > 0U) {
 800193e:	e06f      	b.n	8001a20 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x200>
			/* Check if IDLE flag is set */
			if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b10      	cmp	r3, #16
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d014      	beq.n	8001982 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x162>
				/* Clear IDLE flag in ISR */
				__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	621a      	str	r2, [r3, #32]

				/* If Set, but no data ever received, clear flag without exiting loop */
				/* If Set, and data has already been received, this means Idle Event is valid : End reception */
				if (pData.size() > 0U) {
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f015 fc05 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x162>
					huart->RxState = HAL_UART_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//					times_idle--;
//					if (times_idle == 0) {
					return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e060      	b.n	8001a44 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x224>
//					}
				}
			}

			/* Check if RXNE flag is set */
			if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)) {
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b20      	cmp	r3, #32
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d028      	beq.n	80019ec <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1cc>
				if (pdata8bits == NULL) {
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10e      	bne.n	80019be <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x19e>
					char ch = (huart->Instance->RDR & uhMask);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8bfb      	ldrh	r3, [r7, #30]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4013      	ands	r3, r2
 80019b0:	75bb      	strb	r3, [r7, #22]
//					pData.push_back(ch);

					pData += ch;
 80019b2:	7dbb      	ldrb	r3, [r7, #22]
 80019b4:	4619      	mov	r1, r3
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f015 fc46 	bl	8017248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
 80019bc:	e00d      	b.n	80019da <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1ba>
				} else {
					char ch = (huart->Instance->RDR & (uint8_t) uhMask);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	8bfb      	ldrh	r3, [r7, #30]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	75fb      	strb	r3, [r7, #23]
					pData += ch;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	4619      	mov	r1, r3
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f015 fc37 	bl	8017248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
//					pData.push_back(ch);
				}
				huart->RxXferCount--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			}

			/* Check for the Timeout */
			if (Timeout != HAL_MAX_DELAY) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f2:	d015      	beq.n	8001a20 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x200>
				if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) {
 80019f4:	f011 f816 	bl	8012a24 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d302      	bcc.n	8001a0a <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1ea>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1ee>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1f0>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x200>
					huart->RxState = HAL_UART_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

					return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e011      	b.n	8001a44 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x224>
		while (huart->RxXferCount > 0U) {
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d184      	bne.n	8001940 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x120>
				}
			}
		}

		/* At end of Rx process, restore huart->RxState to Ready */
		huart->RxState = HAL_UART_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x224>
	} else {
		return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
	}
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringC1EPKc>:

class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;

  ZeroTerminatedRamString(const char* str) : _str(str) {}
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString6isNullEv>:

  bool isNull() const {
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
    return !_str;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
  }
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>:

  size_t size() const {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    return _str ? ::strlen(_str) : 0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv+0x1e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fbe5 	bl	8000270 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	e000      	b.n	8001aac <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv+0x20>
 8001aaa:	2300      	movs	r3, #0
  }
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>:

  char operator[](size_t i) const {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(_str != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return _str[i];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
  }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN11ArduinoJson7V6211HB6detail19StaticStringAdapterC1EPKc>:
  }
};

class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ffb2 	bl	8001a4c <_ZN11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringC1EPKc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterIPKcvE5adaptES4_>:

template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;

  static AdaptedString adapt(const char* p) {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ffe7 	bl	8001ad4 <_ZN11ArduinoJson7V6211HB6detail19StaticStringAdapterC1EPKc>
 8001b06:	68fb      	ldr	r3, [r7, #12]
  }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN11ArduinoJson7V6211HB6detail14SizedRamStringC1EPKcj>:

class SizedRamString {
 public:
  static const size_t typeSortKey = 2;

  SizedRamString(const char* str, size_t sz) : _str(str), _size(sz) {}
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString6isNullEv>:

  bool isNull() const {
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
    return !_str;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
  }
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>:

  size_t size() const {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    return _size;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
  }
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>:

  char operator[](size_t i) const {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(_str != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return _str[i];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
  }
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString13storagePolicyEv>:

  const char* data() const {
    return _str;
  }

  StringStoragePolicy::Copy storagePolicy() const {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Copy();
 8001b98:	bf00      	nop
  }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_ZN11ArduinoJson7V6211HB10JsonStringC1Ev>:
// https://arduinojson.org/v6/api/jsonstring/
class JsonString {
 public:
  enum Ownership { Copied, Linked };

  JsonString() : _data(0), _size(0), _ownership(Linked) {}
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	721a      	strb	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcNS1_9OwnershipE>:

  JsonString(const char* data, Ownership ownership = Linked)
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71fb      	strb	r3, [r7, #7]
      : _data(data), _size(data ? ::strlen(data) : 0), _ownership(ownership) {}
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcNS1_9OwnershipE+0x24>
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f7fe fb41 	bl	8000270 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e000      	b.n	8001bf4 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcNS1_9OwnershipE+0x26>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	6053      	str	r3, [r2, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	721a      	strb	r2, [r3, #8]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>:

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	70fb      	strb	r3, [r7, #3]
      : _data(data), _size(sz), _ownership(ownership) {}
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	721a      	strb	r2, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
    return _data;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
  }
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_ZNK11ArduinoJson7V6211HB10JsonString8isLinkedEv>:
    return !_data;
  }

  // Returns true if the string is stored by address.
  // Returns false if the string is stored by copy.
  bool isLinked() const {
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
    return _ownership == Linked;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a1b      	ldrb	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
  }
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_ZNK11ArduinoJson7V6211HB10JsonString4sizeEv>:

  // Returns length of the string.
  size_t size() const {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    return _size;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
  }
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_ZNK11ArduinoJson7V6211HB10JsonStringcvbEv>:

  // Returns true if the string is non-null
  explicit operator bool() const {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    return _data != 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
  }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZN11ArduinoJson7V6211HB6detail17JsonStringAdapterC1ERKNS0_10JsonStringE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class JsonStringAdapter : public SizedRamString {
 public:
  JsonStringAdapter(const JsonString& s)
 8001caa:	b5b0      	push	{r4, r5, r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
      : SizedRamString(s.c_str(), s.size()), _linked(s.isLinked()) {}
 8001cb4:	687c      	ldr	r4, [r7, #4]
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7ff ffbd 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f7ff ffd6 	bl	8001c70 <_ZNK11ArduinoJson7V6211HB10JsonString4sizeEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff ff20 	bl	8001b10 <_ZN11ArduinoJson7V6211HB6detail14SizedRamStringC1EPKcj>
 8001cd0:	6838      	ldr	r0, [r7, #0]
 8001cd2:	f7ff ffbc 	bl	8001c4e <_ZNK11ArduinoJson7V6211HB10JsonString8isLinkedEv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	721a      	strb	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}

08001ce8 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:

template <>
struct StringAdapter<JsonString> {
  typedef JsonStringAdapter AdaptedString;

  static AdaptedString adapt(const JsonString& s) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
    return AdaptedString(s);
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffd8 	bl	8001caa <_ZN11ArduinoJson7V6211HB6detail17JsonStringAdapterC1ERKNS0_10JsonStringE>
  }
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>:
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);

  bool copyFrom(const CollectionData& src, MemoryPool* pool);

  VariantSlot* head() const {
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
    return _head;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
  }
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8001d22:	687b      	ldr	r3, [r7, #4]
  }
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>:

  const VariantData* data() const {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&_content);
 8001d38:	687b      	ldr	r3, [r7, #4]
  }
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>:

  VariantSlot* next() {
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv+0x20>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	e000      	b.n	8001d68 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv+0x22>
 8001d66:	2300      	movs	r3, #0
  }
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>:

  const VariantSlot* next() const {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffe2 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 8001d82:	4603      	mov	r3, r0
  }
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZN11ArduinoJson7V6211HB6detail11VariantSlot7setNextEPS2_>:

  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }

  void setNext(VariantSlot* slot) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    _next = VariantSlotDiff(slot ? slot - this : 0);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot7setNextEPS2_+0x1c>
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	111b      	asrs	r3, r3, #4
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	e000      	b.n	8001daa <_ZN11ArduinoJson7V6211HB6detail11VariantSlot7setNextEPS2_+0x1e>
 8001da8:	2200      	movs	r2, #0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	815a      	strh	r2, [r3, #10]
  }
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_ZN11ArduinoJson7V6211HB6detail11VariantSlot14setNextNotNullEPS2_>:

  void setNextNotNull(VariantSlot* slot) {
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    _next = VariantSlotDiff(slot - this);
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	111b      	asrs	r3, r3, #4
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	815a      	strh	r2, [r3, #10]
  }
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_ZN11ArduinoJson7V6211HB6detail11VariantSlot6setKeyENS0_10JsonStringE>:

  void setKey(JsonString k) {
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	4638      	mov	r0, r7
 8001de8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 8001dec:	463b      	mov	r3, r7
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff2d 	bl	8001c4e <_ZNK11ArduinoJson7V6211HB10JsonString8isLinkedEv>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      _flags &= VALUE_MASK;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	7a1b      	ldrb	r3, [r3, #8]
 8001dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	721a      	strb	r2, [r3, #8]
 8001e08:	e006      	b.n	8001e18 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      _flags |= OWNED_KEY_BIT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	7a1b      	ldrb	r3, [r3, #8]
 8001e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	721a      	strb	r2, [r3, #8]
    _key = k.c_str();
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff0b 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	60da      	str	r2, [r3, #12]
  }
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>:

  const char* key() const {
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
    return _key;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
  }
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot7ownsKeyEv>:

  bool ownsKey() const {
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
    return (_flags & OWNED_KEY_BIT) != 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7a1b      	ldrb	r3, [r3, #8]
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	09db      	lsrs	r3, r3, #7
 8001e58:	b2db      	uxtb	r3, r3
  }
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot5clearEv>:

  void clear() {
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
    _next = 0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  }
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	601a      	str	r2, [r3, #0]
        _left(buf),
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj+0x26>
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	e000      	b.n	8001eb4 <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj+0x28>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0),
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj+0x3a>
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	e000      	b.n	8001ec8 <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj+0x3c>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	60d3      	str	r3, [r2, #12]
        _overflowed(false) {
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10overflowedEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  bool overflowed() const {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    return _overflowed;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7c1b      	ldrb	r3, [r3, #16]
  }
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool12allocVariantEv>:

  VariantSlot* allocVariant() {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f00a fd2b 	bl	800c95c <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 8001f06:	4603      	mov	r3, r0
  }
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool11getFreeZoneEPPcPj>:
      newCopy[n] = 0;  // force null-terminator
    }
    return newCopy;
  }

  void getFreeZone(char** zoneStart, size_t* zoneSize) const {
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    *zoneStart = _left;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	601a      	str	r2, [r3, #0]
    *zoneSize = size_t(_right - _left);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
  }
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool22saveStringFromFreeZoneEj>:

  const char* saveStringFromFreeZone(size_t len) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
#if ARDUINOJSON_ENABLE_STRING_DEDUPLICATION
    const char* dup = findString(adaptString(_left, len));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00a fd0e 	bl	800c976 <_ZN11ArduinoJson7V6211HB6detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f00a fd19 	bl	800c998 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>
 8001f66:	6178      	str	r0, [r7, #20]
    if (dup)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool22saveStringFromFreeZoneEj+0x32>
      return dup;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	e013      	b.n	8001f9a <_ZN11ArduinoJson7V6211HB6detail10MemoryPool22saveStringFromFreeZoneEj+0x5a>
#endif

    const char* str = _left;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]
    _left += len;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	605a      	str	r2, [r3, #4]
    *_left++ = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6051      	str	r1, [r2, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
    checkInvariants();
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f83d 	bl	8002012 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool15checkInvariantsEv>
    return str;
 8001f98:	693b      	ldr	r3, [r7, #16]
  }
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool16markAsOverflowedEv>:

  void markAsOverflowed() {
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
    _overflowed = true;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	741a      	strb	r2, [r3, #16]
  }
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_ZN11ArduinoJson7V6211HB6detail10MemoryPool5clearEv>:

  void clear() {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	605a      	str	r2, [r3, #4]
    _right = _end;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
    _overflowed = false;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	741a      	strb	r2, [r3, #16]
  }
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
  }
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool15checkInvariantsEv>:
    _right += offset;
    _end += offset;
  }

 private:
  void checkInvariants() {
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool11allocStringEj>:
    }
    return 0;
  }
#endif

  char* allocString(size_t n) {
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
    if (!canAlloc(n)) {
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffd7 	bl	8001fe6 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool8canAllocEj>
 8002038:	4603      	mov	r3, r0
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <_ZN11ArduinoJson7V6211HB6detail10MemoryPool11allocStringEj+0x28>
      _overflowed = true;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	741a      	strb	r2, [r3, #16]
      return 0;
 800204a:	2300      	movs	r3, #0
 800204c:	e00c      	b.n	8002068 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool11allocStringEj+0x42>
    }
    char* s = _left;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	60fb      	str	r3, [r7, #12]
    _left += n;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffd6 	bl	8002012 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool15checkInvariantsEv>
    return s;
 8002066:	68fb      	ldr	r3, [r7, #12]
  }
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffb2 	bl	8001fe6 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool8canAllocEj>
 8002082:	4603      	mov	r3, r0
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightEj+0x28>
      _overflowed = true;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	741a      	strb	r2, [r3, #16]
      return 0;
 8002094:	2300      	movs	r3, #0
 8002096:	e008      	b.n	80020aa <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightEj+0x3a>
    }
    _right -= bytes;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	425b      	negs	r3, r3
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
    return _right;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
  }
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_ZN11ArduinoJson7V6211HB6detail11VariantDataC1Ev>:
class VariantData {
  VariantContent _content;  // must be first to allow cast from array to variant
  uint8_t _flags;

 public:
  VariantData() : _flags(VALUE_IS_NULL) {}
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	721a      	strb	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_ZN11ArduinoJson7V6211HB6detail11VariantData8asObjectEv>:

  const CollectionData* asCollection() const {
    return isCollection() ? &_content.asCollection : 0;
  }

  CollectionData* asObject() {
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f829 	bl	800212e <_ZNK11ArduinoJson7V6211HB6detail11VariantData8isObjectEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8asObjectEv+0x18>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	e000      	b.n	80020e8 <_ZN11ArduinoJson7V6211HB6detail11VariantData8asObjectEv+0x1a>
 80020e6:	2300      	movs	r3, #0
  }
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asObjectEv>:

  const CollectionData* asObject() const {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe8 	bl	80020ce <_ZN11ArduinoJson7V6211HB6detail11VariantData8asObjectEv>
 80020fe:	4603      	mov	r3, r0
  }
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZNK11ArduinoJson7V6211HB6detail11VariantData7isFloatEv>:
      default:
        return false;
    }
  }

  bool isFloat() const {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    return (_flags & NUMBER_BIT) != 0;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7a1b      	ldrb	r3, [r3, #8]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
  }
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_ZNK11ArduinoJson7V6211HB6detail11VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7a1b      	ldrb	r3, [r3, #8]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
  }
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6isNullEv>:

  bool isNull() const {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f894 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
  }
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZNK11ArduinoJson7V6211HB6detail11VariantData10isEnclosedEv>:

  bool isEnclosed() const {
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
    return !isFloat();
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffc2 	bl	8002108 <_ZNK11ArduinoJson7V6211HB6detail11VariantData7isFloatEv>
 8002184:	4603      	mov	r3, r0
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
  }
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN11ArduinoJson7V6211HB6detail11VariantData10setBooleanEb>:
  void remove(TAdaptedString key) {
    if (isObject())
      _content.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 80021a0:	2106      	movs	r1, #6
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f880 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asBoolean = value;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	701a      	strb	r2, [r3, #0]
  }
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8setFloatEd>:

  void setFloat(JsonFloat value) {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 80021c2:	210c      	movs	r1, #12
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f86f 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asFloat = value;
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d0:	e9c1 2300 	strd	r2, r3, [r1]
  }
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_ZN11ArduinoJson7V6211HB6detail11VariantData7setNullEv>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    _content.asSignedInteger = value;
  }

  void setNull() {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f85e 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
  }
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN11ArduinoJson7V6211HB6detail11VariantData9setStringENS0_10JsonStringE>:

  void setString(JsonString s) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4638      	mov	r0, r7
 80021fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 8002202:	463b      	mov	r3, r7
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd22 	bl	8001c4e <_ZNK11ArduinoJson7V6211HB10JsonString8isLinkedEv>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <_ZN11ArduinoJson7V6211HB6detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 8002210:	2104      	movs	r1, #4
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f848 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
 8002218:	e003      	b.n	8002222 <_ZN11ArduinoJson7V6211HB6detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 800221a:	2105      	movs	r1, #5
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f843 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asString.data = s.c_str();
 8002222:	463b      	mov	r3, r7
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fd06 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]
    _content.asString.size = s.size();
 8002230:	463b      	mov	r3, r7
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fd1c 	bl	8001c70 <_ZNK11ArduinoJson7V6211HB10JsonString4sizeEv>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	605a      	str	r2, [r3, #4]
  }
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN11ArduinoJson7V6211HB6detail11VariantData7toArrayEv>:

  CollectionData& toArray() {
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f829 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asCollection.clear();
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa86 	bl	800276a <_ZN11ArduinoJson7V6211HB6detail14CollectionData5clearEv>
    return _content.asCollection;
 800225e:	687b      	ldr	r3, [r7, #4]
  }
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZN11ArduinoJson7V6211HB6detail11VariantData8toObjectEv>:

  CollectionData& toObject() {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8002270:	2120      	movs	r1, #32
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f818 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asCollection.clear();
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa75 	bl	800276a <_ZN11ArduinoJson7V6211HB6detail14CollectionData5clearEv>
    return _content.asCollection;
 8002280:	687b      	ldr	r3, [r7, #4]
  }
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>:
      _content.asString.data += stringDistance;
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a1b      	ldrb	r3, [r3, #8]
 8002296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800229a:	b2db      	uxtb	r3, r3
  }
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>:

    return storeString(pool, value, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
    _flags &= OWNED_KEY_BIT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7a1b      	ldrb	r3, [r3, #8]
 80022b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7a1a      	ldrb	r2, [r3, #8]
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	721a      	strb	r2, [r3, #8]
  }
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1Ev>:
                         public detail::VariantOperators<JsonVariantConst> {
  friend class detail::VariantAttorney;

 public:
  // Creates an unbound reference.
  JsonVariantConst() : _data(0) {}
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>:

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data) : _data(data) {}
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>:
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
    return _data;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
  }
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_ZN11ArduinoJson7V6211HB11JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : _data(0), _pool(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
      : _data(data), _pool(pool) {}
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
#include "../Variant/VariantData.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : _instance(instance) {}
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_ZN11ArduinoJson7V6211HB6detail8slotSizeEPKNS1_11VariantSlotE>:
  if (!var)
    return false;
  return storeString(pool, key, SlotKeySetter(var));
}

inline size_t slotSize(const VariantSlot* var) {
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  size_t n = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  while (var) {
 800237e:	e006      	b.n	800238e <_ZN11ArduinoJson7V6211HB6detail8slotSizeEPKNS1_11VariantSlotE+0x1c>
    n++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
    var = var->next();
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fcf4 	bl	8001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 800238c:	6078      	str	r0, [r7, #4]
  while (var) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f5      	bne.n	8002380 <_ZN11ArduinoJson7V6211HB6detail8slotSizeEPKNS1_11VariantSlotE+0xe>
  }
  return n;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_ZN11ArduinoJson7V6211HB6detail8slotDataEPNS1_11VariantSlotE>:

inline VariantData* slotData(VariantSlot* slot) {
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1Ev>:

class JsonArrayConstIterator {
  friend class JsonArray;

 public:
  JsonArrayConstIterator() : _slot(0) {}
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1EPKNS0_6detail11VariantSlotE>:
  explicit JsonArrayConstIterator(const detail::VariantSlot* slot)
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
      : _slot(slot) {}
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratordeEv>:

  JsonVariantConst operator*() const {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(_slot->data());
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fc98 	bl	8001d30 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 8002400:	4602      	mov	r2, r0
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff75 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800240e:	68fb      	ldr	r3, [r7, #12]
  }
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratoreqERKS1_>:
  VariantConstPtr operator->() {
    return VariantConstPtr(_slot->data());
  }

  bool operator==(const JsonArrayConstIterator& other) const {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    return _slot == other._slot;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
  }
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorppEv>:

  bool operator!=(const JsonArrayConstIterator& other) const {
    return _slot != other._slot;
  }

  JsonArrayConstIterator& operator++() {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fc91 	bl	8001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
    return *this;
 8002458:	687b      	ldr	r3, [r7, #4]
  }
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_ZN11ArduinoJson7V6211HB13JsonPairConstC1EPKNS0_6detail11VariantSlotE>:

// A read-only key-value pair.
// https://arduinojson.org/v6/api/jsonobjectconst/begin_end/
class JsonPairConst {
 public:
  JsonPairConst(const detail::VariantSlot* slot) {
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fb99 	bl	8001ba6 <_ZN11ArduinoJson7V6211HB10JsonStringC1Ev>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	330c      	adds	r3, #12
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff2f 	bl	80022dc <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1Ev>
    if (slot) {
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d028      	beq.n	80024d6 <_ZN11ArduinoJson7V6211HB13JsonPairConstC1EPKNS0_6detail11VariantSlotE+0x74>
      _key = JsonString(slot->key(), slot->ownsKey() ? JsonString::Copied
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f7ff fcd2 	bl	8001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>
 800248a:	4604      	mov	r4, r0
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f7ff fcda 	bl	8001e46 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot7ownsKeyEv>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <_ZN11ArduinoJson7V6211HB13JsonPairConstC1EPKNS0_6detail11VariantSlotE+0x3a>
 8002498:	2200      	movs	r2, #0
 800249a:	e000      	b.n	800249e <_ZN11ArduinoJson7V6211HB13JsonPairConstC1EPKNS0_6detail11VariantSlotE+0x3c>
 800249c:	2201      	movs	r2, #1
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	4621      	mov	r1, r4
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fb92 	bl	8001bce <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcNS1_9OwnershipE>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	cb03      	ldmia	r3!, {r0, r1}
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	6051      	str	r1, [r2, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	7213      	strb	r3, [r2, #8]
                                                     : JsonString::Linked);
      _value = JsonVariantConst(slot->data());
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f7ff fc37 	bl	8001d30 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff14 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	60da      	str	r2, [r3, #12]
    }
  }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <_ZNK11ArduinoJson7V6211HB13JsonPairConst3keyEv>:

  // Returns the key.
  JsonString key() const {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    return _key;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_ZNK11ArduinoJson7V6211HB13JsonPairConst5valueEv>:

  // Returns the value.
  JsonVariantConst value() const {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
    return _value;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
  }
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_ZN11ArduinoJson7V6211HB16JsonPairConstPtrC1EPKNS0_6detail11VariantSlotE>:
  detail::VariantSlot* _slot;
};

class JsonPairConstPtr {
 public:
  JsonPairConstPtr(const detail::VariantSlot* slot) : _pair(slot) {}
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff9b 	bl	8002462 <_ZN11ArduinoJson7V6211HB13JsonPairConstC1EPKNS0_6detail11VariantSlotE>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNK11ArduinoJson7V6211HB16JsonPairConstPtrptEv>:

  const JsonPairConst* operator->() const {
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
    return &_pair;
 800253e:	687b      	ldr	r3, [r7, #4]
  }
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorC1Ev>:

class JsonObjectConstIterator {
  friend class JsonObject;

 public:
  JsonObjectConstIterator() : _slot(0) {}
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorC1EPKNS0_6detail11VariantSlotE>:

  explicit JsonObjectConstIterator(const detail::VariantSlot* slot)
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      : _slot(slot) {}
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorptEv>:

  JsonPairConst operator*() const {
    return JsonPairConst(_slot);
  }
  JsonPairConstPtr operator->() {
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
    return JsonPairConstPtr(_slot);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffbe 	bl	8002518 <_ZN11ArduinoJson7V6211HB16JsonPairConstPtrC1EPKNS0_6detail11VariantSlotE>
  }
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_ZNK11ArduinoJson7V6211HB23JsonObjectConstIteratorneERKS1_>:

  bool operator==(const JsonObjectConstIterator& other) const {
    return _slot == other._slot;
  }

  bool operator!=(const JsonObjectConstIterator& other) const {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
  }
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorppEv>:

  JsonObjectConstIterator& operator++() {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fbcb 	bl	8001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 80025de:	4602      	mov	r2, r0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
    return *this;
 80025e4:	687b      	ldr	r3, [r7, #4]
  }
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_ZN11ArduinoJson7V6211HB15JsonObjectConstC1EPKNS0_6detail14CollectionDataE>:

  // Creates an unbound reference.
  JsonObjectConst() : _data(0) {}

  // INTERNAL USE ONLY
  JsonObjectConst(const detail::CollectionData* data) : _data(data) {}
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_ZN11ArduinoJson7V6211HB12JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v6/api/jsondocument/clear/
  void clear() {
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fcd0 	bl	8001fbc <_ZN11ArduinoJson7V6211HB6detail10MemoryPool5clearEv>
    _data.setNull();
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3318      	adds	r3, #24
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fddb 	bl	80021dc <_ZN11ArduinoJson7V6211HB6detail11VariantData7setNullEv>
  }
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_ZN11ArduinoJson7V6211HB12JsonDocumentC1EPcj>:
 protected:
  JsonDocument() : _pool(0, 0) {}

  JsonDocument(detail::MemoryPool pool) : _pool(pool) {}

  JsonDocument(char* buf, size_t capa) : _pool(buf, capa) {}
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fc23 	bl	8001e8c <_ZN11ArduinoJson7V6211HB6detail10MemoryPoolC1EPcj>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3318      	adds	r3, #24
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fd31 	bl	80020b2 <_ZN11ArduinoJson7V6211HB6detail11VariantDataC1Ev>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_ZN11ArduinoJson7V6211HB12JsonDocumentD1Ev>:

  ~JsonDocument() {}
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_ZNK11ArduinoJson7V6211HB12JsonDocument10getVariantEv>:

  JsonVariant getVariant() {
    return JsonVariant(&_pool, &_data);
  }

  JsonVariantConst getVariant() const {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&_data);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0218 	add.w	r2, r3, #24
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fe37 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800268a:	68fb      	ldr	r3, [r7, #12]
  }
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN11ArduinoJson7V6211HB12JsonDocument7getPoolEv>:

  detail::MemoryPool _pool;
  detail::VariantData _data;

 protected:
  detail::MemoryPool* getPool() {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    return &_pool;
 800269c:	687b      	ldr	r3, [r7, #4]
  }
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
    return &_data;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3318      	adds	r3, #24
  }
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_ZNK11ArduinoJson7V6211HB12JsonDocument7getDataEv>:

  const detail::VariantData* getData() const {
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
    return &_data;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3318      	adds	r3, #24
  }
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_ZN11ArduinoJson7V6211HB12JsonDocument15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() {
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
    return &_data;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3318      	adds	r3, #24
  }
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
#include "../Strings/StringAdapters.hpp"
#include "../Variant/VariantData.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 80026fc:	6838      	ldr	r0, [r7, #0]
 80026fe:	f7ff fbfb 	bl	8001ef8 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool12allocVariantEv>
 8002702:	60f8      	str	r0, [r7, #12]
  if (!slot)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 800270a:	2300      	movs	r3, #0
 800270c:	e017      	b.n	800273e <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>

  if (_tail) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(_tail));  // Can't alter a linked array/object
    _tail->setNextNotNull(slot);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fb4c 	bl	8001dba <_ZN11ArduinoJson7V6211HB6detail11VariantSlot14setNextNotNullEPS2_>
    _tail = slot;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	e005      	b.n	8002736 <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff fb95 	bl	8001e66 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot5clearEv>
  return slot;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZN11ArduinoJson7V6211HB6detail14CollectionData10addElementEPNS1_10MemoryPoolE>:

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffcd 	bl	80026f2 <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fe1f 	bl	800239e <_ZN11ArduinoJson7V6211HB6detail8slotDataEPNS1_11VariantSlotE>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN11ArduinoJson7V6211HB6detail14CollectionData5clearEv>:
    return 0;
  }
  return slot->data();
}

inline void CollectionData::clear() {
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  _head = 0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	605a      	str	r2, [r3, #4]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
  if (!_head)
    return 0;
  return _head->next(index);
}

inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  VariantSlot* current = _head;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  while (current) {
 800279a:	e00b      	b.n	80027b4 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
    VariantSlot* next = current->next();
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fad2 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 80027a2:	60b8      	str	r0, [r7, #8]
    if (next == target)
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d101      	bne.n	80027b0 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x26>
      return current;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	e005      	b.n	80027bc <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60fb      	str	r3, [r7, #12]
  while (current) {
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x12>
  }
  return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    index--;
  }
  return slotData(slot);
}

inline void CollectionData::removeSlot(VariantSlot* slot) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  if (!slot)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01a      	beq.n	800280a <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffd7 	bl	800278a <_ZNK11ArduinoJson7V6211HB6detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 80027dc:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f7ff fab1 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 80027e4:	60b8      	str	r0, [r7, #8]
  if (prev)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff facc 	bl	8001d8c <_ZN11ArduinoJson7V6211HB6detail11VariantSlot7setNextEPS2_>
 80027f4:	e002      	b.n	80027fc <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    _head = next;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	601a      	str	r2, [r3, #0]
  if (!next)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    _tail = prev;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	e000      	b.n	800280c <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 800280a:	bf00      	nop
}
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4sizeEv>:
      total += strlen(s->key()) + 1;
  }
  return total;
}

inline size_t CollectionData::size() const {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  return slotSize(_head);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fda7 	bl	8002372 <_ZN11ArduinoJson7V6211HB6detail8slotSizeEPKNS1_11VariantSlotE>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8002838:	2001      	movs	r0, #1
 800283a:	f000 f835 	bl	80028a8 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb>
 800283e:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8002840:	e002      	b.n	8002848 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3302      	adds	r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence10escapeCharEc+0x2e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	79fa      	ldrb	r2, [r7, #7]
 8002858:	429a      	cmp	r2, r3
 800285a:	d1f2      	bne.n	8002842 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	781b      	ldrb	r3, [r3, #0]
  }
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc>:

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8002872:	2000      	movs	r0, #0
 8002874:	f000 f818 	bl	80028a8 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb>
 8002878:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8002882:	2300      	movs	r3, #0
 8002884:	e00c      	b.n	80028a0 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	79fa      	ldrb	r2, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d103      	bne.n	8002898 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3301      	adds	r3, #1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	e003      	b.n	80028a0 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3302      	adds	r3, #2
 800289c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800289e:	e7ec      	b.n	800287a <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool excludeSolidus) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb+0x14>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e000      	b.n	80028be <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb+0x16>
 80028bc:	2300      	movs	r3, #0
 80028be:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence11escapeTableEb+0x28>)
 80028c0:	4413      	add	r3, r2
  }
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	08017dec 	.word	0x08017dec

080028d4 <_ZN11ArduinoJson7V6211HB9ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
struct Converter<JsonString> : private detail::VariantAttorney {
  static void toJson(JsonString src, JsonVariant dst) {
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  }

  template <typename TClient>
  FORCE_INLINE static typename ResultOfGetData<TClient>::type getData(
      TClient& client) {
    return client.getData();
 80028de:	463b      	mov	r3, r7
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd18 	bl	8002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>
 80028e6:	4603      	mov	r3, r0
 80028e8:	bf00      	nop
    auto data = getData(src);
 80028ea:	60fb      	str	r3, [r7, #12]
    return data ? data->asString() : 0;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <_ZN11ArduinoJson7V6211HB9ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fd16 	bl	8003328 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv>
 80028fc:	e004      	b.n	8002908 <_ZN11ArduinoJson7V6211HB9ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80028fe:	2201      	movs	r2, #1
 8002900:	2100      	movs	r1, #0
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff f963 	bl	8001bce <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcNS1_9OwnershipE>
  }
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN11ArduinoJson7V6211HB15convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ffd7 	bl	80028d4 <_ZN11ArduinoJson7V6211HB9ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 8002926:	bf00      	nop
  JsonString str = src.as<JsonString>();
  if (str)
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff f9ab 	bl	8001c88 <_ZNK11ArduinoJson7V6211HB10JsonStringcvbEv>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d011      	beq.n	800295c <_ZN11ArduinoJson7V6211HB15convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>
    dst.assign(str.c_str(), str.size());
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f97a 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 8002942:	4604      	mov	r4, r0
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f991 	bl	8001c70 <_ZNK11ArduinoJson7V6211HB10JsonString4sizeEv>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4621      	mov	r1, r4
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f014 fd6b 	bl	8017430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 800295a:	e003      	b.n	8002964 <_ZN11ArduinoJson7V6211HB15convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    serializeJson(src, dst);
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f00a f889 	bl	800ca76 <_ZN11ArduinoJson7V6211HB13serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}

0800296c <_ZN11ArduinoJson7V6211HB6detail12NullComparer9visitNullEv>:
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
  }
};

struct NullComparer : ComparerBase {
  CompareResult visitNull() {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    return COMPARE_RESULT_EQUAL;
 8002974:	2301      	movs	r3, #1
  }
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparerC1ERKNS1_14CollectionDataE>:
};

struct ArrayComparer : ComparerBase {
  const CollectionData* _rhs;

  explicit ArrayComparer(const CollectionData& rhs) : _rhs(&rhs) {}
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE>:

  CompareResult visitArray(const CollectionData& lhs) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	; 0x58
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
  // Creates an unbound reference.
  FORCE_INLINE JsonArrayConst() : _data(0) {}

  // INTERNAL USE ONLY
  FORCE_INLINE JsonArrayConst(const detail::CollectionData* data)
      : _data(data) {}
 80029ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b0:	61bb      	str	r3, [r7, #24]
    if (JsonArrayConst(&lhs) == JsonArrayConst(_rhs))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	617b      	str	r3, [r7, #20]

  // Compares the content of two arrays.
  // Returns true if the two arrays are equal.
  FORCE_INLINE bool operator==(JsonArrayConst rhs) const {
    if (_data == rhs._data)
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d101      	bne.n	80029cc <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x2c>
      return true;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e098      	b.n	8002afe <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x15e>
    if (!_data || !rhs._data)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x38>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x3c>
      return false;
 80029d8:	2300      	movs	r3, #0
 80029da:	e090      	b.n	8002afe <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x15e>
 80029dc:	f107 0318 	add.w	r3, r7, #24
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54
    if (!_data)
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x58>
      return iterator();
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fce0 	bl	80023b4 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1Ev>
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	e00c      	b.n	8002a12 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x72>
    return iterator(_data->head());
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f980 	bl	8001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fce0 	bl	80023d0 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1EPKNS0_6detail11VariantSlotE>
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    iterator it1 = begin();
 8002a12:	613b      	str	r3, [r7, #16]
    if (!_data)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x88>
      return iterator();
 8002a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fcc8 	bl	80023b4 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1Ev>
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	e00b      	b.n	8002a40 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0xa0>
    return iterator(_data->head());
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f969 	bl	8001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fcc9 	bl	80023d0 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1EPKNS0_6detail11VariantSlotE>
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    iterator it2 = rhs.begin();
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	653b      	str	r3, [r7, #80]	; 0x50
    return iterator();
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fcb1 	bl	80023b4 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1Ev>
 8002a52:	6a3b      	ldr	r3, [r7, #32]

    for (;;) {
      bool end1 = it1 == end();
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
 8002a56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a5a:	f107 0310 	add.w	r3, r7, #16
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fcd9 	bl	8002418 <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratoreqERKS1_>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    return iterator();
 8002a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fc9f 	bl	80023b4 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorC1Ev>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      bool end2 = it2 == rhs.end();
 8002a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a7e:	f107 030c 	add.w	r3, r7, #12
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fcc7 	bl	8002418 <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratoreqERKS1_>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
      if (end1 && end2)
 8002a90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x104>
 8002a98:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x104>
        return true;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e02c      	b.n	8002afe <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x15e>
      if (end1 || end2)
 8002aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x114>
 8002aac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x118>
        return false;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e022      	b.n	8002afe <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x15e>
      if (*it1 != *it2)
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fc96 	bl	80023ee <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratordeEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fc8f 	bl	80023ee <_ZNK11ArduinoJson7V6211HB22JsonArrayConstIteratordeEv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f009 ff9e 	bl	800ca1a <_ZN11ArduinoJson7V6211HB6detailneINS0_16JsonVariantConstEEEbRKT_S3_>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x148>
        return false;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e00a      	b.n	8002afe <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x15e>
      ++it1;
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fca7 	bl	8002440 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorppEv>
      ++it2;
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fca2 	bl	8002440 <_ZN11ArduinoJson7V6211HB22JsonArrayConstIteratorppEv>
    }
 8002afc:	e7a1      	b.n	8002a42 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0xa2>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x166>
      return COMPARE_RESULT_EQUAL;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE+0x168>
    else
      return COMPARE_RESULT_DIFFER;
 8002b06:	2300      	movs	r3, #0
  }
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3758      	adds	r7, #88	; 0x58
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparerC1ERKNS1_14CollectionDataE>:
};

struct ObjectComparer : ComparerBase {
  const CollectionData* _rhs;

  explicit ObjectComparer(const CollectionData& rhs) : _rhs(&rhs) {}
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE>:

  CompareResult visitObject(const CollectionData& lhs) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b09e      	sub	sp, #120	; 0x78
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
    if (JsonObjectConst(&lhs) == JsonObjectConst(_rhs))
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fd55 	bl	80025ee <_ZN11ArduinoJson7V6211HB15JsonObjectConstC1EPKNS0_6detail14CollectionDataE>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	f107 0318 	add.w	r3, r7, #24
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd4d 	bl	80025ee <_ZN11ArduinoJson7V6211HB15JsonObjectConstC1EPKNS0_6detail14CollectionDataE>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	613b      	str	r3, [r7, #16]
    return JsonVariantConst(getMember(detail::adaptString(key)));
  }

  // Compares objects.
  FORCE_INLINE bool operator==(JsonObjectConst rhs) const {
    if (_data == rhs._data)
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d101      	bne.n	8002b64 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x36>
      return true;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09e      	b.n	8002ca2 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x174>

    if (!_data || !rhs._data)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x42>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x46>
      return false;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e096      	b.n	8002ca2 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x174>

    size_t count = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	677b      	str	r3, [r7, #116]	; 0x74
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	673b      	str	r3, [r7, #112]	; 0x70
    if (!_data)
 8002b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x66>
      return iterator();
 8002b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fcde 	bl	800254c <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorC1Ev>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	e00c      	b.n	8002bae <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x80>
    return iterator(_data->head());
 8002b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f8b2 	bl	8001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fcde 	bl	8002568 <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorC1EPKNS0_6detail11VariantSlotE>
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    for (iterator it = begin(); it != end(); ++it) {
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e051      	b.n	8002c56 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x128>
      if (it->value() != rhs[it->key()])
 8002bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fce2 	bl	8002586 <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorptEv>
 8002bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fcb5 	bl	8002536 <_ZNK11ArduinoJson7V6211HB16JsonPairConstPtrptEv>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fc96 	bl	8002500 <_ZNK11ArduinoJson7V6211HB13JsonPairConst5valueEv>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bdc:	f107 020c 	add.w	r2, r7, #12
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fccf 	bl	8002586 <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorptEv>
 8002be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fca2 	bl	8002536 <_ZNK11ArduinoJson7V6211HB16JsonPairConstPtrptEv>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fc70 	bl	80024e0 <_ZNK11ArduinoJson7V6211HB13JsonPairConst3keyEv>
    return JsonVariantConst(getMember(detail::adaptString(key)));
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f009 ff18 	bl	800ca40 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
 8002c10:	f107 0010 	add.w	r0, r7, #16
 8002c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1a:	f00a fbc2 	bl	800d3a2 <_ZNK11ArduinoJson7V6211HB15JsonObjectConst9getMemberINS0_6detail17JsonStringAdapterEEEPKNS3_11VariantDataET_>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f107 0320 	add.w	r3, r7, #32
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fb66 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	461a      	mov	r2, r3
      if (it->value() != rhs[it->key()])
 8002c30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 feef 	bl	800ca1a <_ZN11ArduinoJson7V6211HB6detailneINS0_16JsonVariantConstEEEbRKT_S3_>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x118>
        return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e02d      	b.n	8002ca2 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x174>
      count++;
 8002c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c48:	3301      	adds	r3, #1
 8002c4a:	677b      	str	r3, [r7, #116]	; 0x74
    for (iterator it = begin(); it != end(); ++it) {
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fcbb 	bl	80025cc <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorppEv>
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    return iterator();
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc73 	bl	800254c <_ZN11ArduinoJson7V6211HB23JsonObjectConstIteratorC1Ev>
 8002c66:	69fb      	ldr	r3, [r7, #28]
    for (iterator it = begin(); it != end(); ++it) {
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fc95 	bl	80025a4 <_ZNK11ArduinoJson7V6211HB23JsonObjectConstIteratorneERKS1_>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d198      	bne.n	8002bb2 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x84>
    return _data ? _data->size() : 0;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x164>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fdc2 	bl	8002812 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4sizeEv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	e001      	b.n	8002c96 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x168>
 8002c92:	2300      	movs	r3, #0
 8002c94:	bf00      	nop
    }
    return count == rhs.size();
 8002c96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x17c>
      return COMPARE_RESULT_EQUAL;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE+0x17e>
    else
      return COMPARE_RESULT_DIFFER;
 8002caa:	2300      	movs	r3, #0
  }
 8002cac:	4618      	mov	r0, r3
 8002cae:	3778      	adds	r7, #120	; 0x78
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN11ArduinoJson7V6211HB6detail11RawComparerC1EPKcj>:

struct RawComparer : ComparerBase {
  const char* _rhsData;
  size_t _rhsSize;

  explicit RawComparer(const char* rhsData, size_t rhsSize)
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
      : _rhsData(rhsData), _rhsSize(rhsSize) {}
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj>:

  CompareResult visitRawJson(const char* lhsData, size_t lhsSize) {
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
    size_t size = _rhsSize < lhsSize ? _rhsSize : lhsSize;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x1c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	e000      	b.n	8002cf8 <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x1e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	617b      	str	r3, [r7, #20]
    int n = memcmp(lhsData, _rhsData, size);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4619      	mov	r1, r3
 8002d02:	68b8      	ldr	r0, [r7, #8]
 8002d04:	f014 ff42 	bl	8017b8c <memcmp>
 8002d08:	6138      	str	r0, [r7, #16]
    if (n < 0)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da01      	bge.n	8002d14 <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x3a>
      return COMPARE_RESULT_LESS;
 8002d10:	2304      	movs	r3, #4
 8002d12:	e005      	b.n	8002d20 <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x46>
    else if (n > 0)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	dd01      	ble.n	8002d1e <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x44>
      return COMPARE_RESULT_GREATER;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e000      	b.n	8002d20 <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj+0x46>
    else
      return COMPARE_RESULT_EQUAL;
 8002d1e:	2301      	movs	r3, #1
  }
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_ZN11ArduinoJson7V6211HB6detail15VariantComparerC1EPKNS1_11VariantDataE>:
};

struct VariantComparer : ComparerBase {
  const VariantData* rhs;

  explicit VariantComparer(const VariantData* value) : rhs(value) {}
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitArrayERKNS1_14CollectionDataE>:

  CompareResult visitArray(const CollectionData& lhs) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
    ArrayComparer comparer(lhs);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fe13 	bl	8002982 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparerC1ERKNS1_14CollectionDataE>
    return accept(comparer);
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f009 fe95 	bl	800ca92 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_>
 8002d68:	4603      	mov	r3, r0
  }
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitObjectERKNS1_14CollectionDataE>:

  CompareResult visitObject(const CollectionData& lhs) {
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
    ObjectComparer comparer(lhs);
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fec4 	bl	8002b10 <_ZN11ArduinoJson7V6211HB6detail14ObjectComparerC1ERKNS1_14CollectionDataE>
    return accept(comparer);
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f009 fe9b 	bl	800caca <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_>
 8002d94:	4603      	mov	r3, r0
  }
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitFloatEd>:

  CompareResult visitFloat(JsonFloat lhs) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	ed87 0b00 	vstr	d0, [r7]
    Comparer<JsonFloat> comparer(lhs);
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	ed97 0b00 	vldr	d0, [r7]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f009 fea5 	bl	800cb02 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvEC1Ed>
    return accept(comparer);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f009 feb1 	bl	800cb26 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_>
 8002dc4:	4603      	mov	r3, r0
  }
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitStringEPKcj>:

  CompareResult visitString(const char* lhs, size_t) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
    Comparer<const char*> comparer(lhs);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f009 febc 	bl	800cb5e <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvEC1ES4_>
    return accept(comparer);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f009 fec5 	bl	800cb7c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_>
 8002df2:	4603      	mov	r3, r0
  }
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitRawJsonEPKcj>:

  CompareResult visitRawJson(const char* lhsData, size_t lhsSize) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
    RawComparer comparer(lhsData, lhsSize);
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff4f 	bl	8002cb4 <_ZN11ArduinoJson7V6211HB6detail11RawComparerC1EPKcj>
    return accept(comparer);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f009 fec9 	bl	800cbb4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_>
 8002e22:	4603      	mov	r3, r0
  }
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer18visitSignedIntegerEx>:

  CompareResult visitSignedInteger(JsonInteger lhs) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	e9c7 2300 	strd	r2, r3, [r7]
    Comparer<JsonInteger> comparer(lhs);
 8002e38:	f107 0110 	add.w	r1, r7, #16
 8002e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e40:	4608      	mov	r0, r1
 8002e42:	f009 fed3 	bl	800cbec <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvEC1Ex>
    return accept(comparer);
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f009 fedf 	bl	800cc10 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_>
 8002e52:	4603      	mov	r3, r0
  }
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer20visitUnsignedIntegerEy>:

  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	e9c7 2300 	strd	r2, r3, [r7]
    Comparer<JsonUInt> comparer(lhs);
 8002e68:	f107 0110 	add.w	r1, r7, #16
 8002e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e70:	4608      	mov	r0, r1
 8002e72:	f009 fee9 	bl	800cc48 <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvEC1Ey>
    return accept(comparer);
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f009 fef5 	bl	800cc6c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_>
 8002e82:	4603      	mov	r3, r0
  }
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitBooleanEb>:

  CompareResult visitBoolean(bool lhs) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
    Comparer<bool> comparer(lhs);
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f009 feff 	bl	800cca4 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvEC1Eb>
    return accept(comparer);
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f009 ff09 	bl	800ccc4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_>
 8002eb2:	4603      	mov	r3, r0
  }
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer9visitNullEv>:

  CompareResult visitNull() {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    NullComparer comparer;
    return accept(comparer);
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f009 ff16 	bl	800ccfc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_>
 8002ed0:	4603      	mov	r3, r0
  }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>:
#include "../Namespace.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ee8:	d904      	bls.n	8002ef4 <_ZN11ArduinoJson7V6211HB6detail7isdigitEc+0x1a>
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b39      	cmp	r3, #57	; 0x39
 8002eee:	d801      	bhi.n	8002ef4 <_ZN11ArduinoJson7V6211HB6detail7isdigitEc+0x1a>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <_ZN11ArduinoJson7V6211HB6detail7isdigitEc+0x1c>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	0000      	movs	r0, r0
 8002f04:	0000      	movs	r0, r0
	...

08002f08 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

inline bool parseNumber(const char* s, VariantData& result) {
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	ed2d 8b02 	vpush	{d8}
 8002f10:	b0a6      	sub	sp, #152	; 0x98
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6578      	str	r0, [r7, #84]	; 0x54
 8002f16:	6539      	str	r1, [r7, #80]	; 0x50
  typedef choose_largest<traits::mantissa_type, JsonUInt>::type mantissa_t;
  typedef traits::exponent_type exponent_t;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  switch (*s) {
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b2b      	cmp	r3, #43	; 0x2b
 8002f24:	d008      	beq.n	8002f38 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x30>
 8002f26:	2b2d      	cmp	r3, #45	; 0x2d
 8002f28:	d10a      	bne.n	8002f40 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '-':
      is_negative = true;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      s++;
 8002f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f32:	3301      	adds	r3, #1
 8002f34:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 8002f36:	e003      	b.n	8002f40 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '+':
      s++;
 8002f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 8002f3e:	bf00      	nop
    result.setFloat(is_negative ? -traits::inf() : traits::inf());
    return true;
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8002f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ffc8 	bl	8002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f5c:	d001      	beq.n	8002f62 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x5c>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x64>
    return false;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e1d5      	b.n	8003318 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  mantissa_t mantissa = 0;
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  exponent_t exponent_offset = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8002f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  while (isdigit(*s)) {
 8002f8a:	e054      	b.n	8003036 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3b30      	subs	r3, #48	; 0x30
 8002f92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (mantissa > maxUint / 10)
 8002f96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f9a:	f112 3f66 	cmn.w	r2, #1717986918	; 0x66666666
 8002f9e:	49ba      	ldr	r1, [pc, #744]	; (8003288 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x380>)
 8002fa0:	418b      	sbcs	r3, r1
 8002fa2:	d251      	bcs.n	8003048 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x140>
      break;
    mantissa *= 10;
 8002fa4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002fa8:	4622      	mov	r2, r4
 8002faa:	462b      	mov	r3, r5
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0099      	lsls	r1, r3, #2
 8002fb6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002fba:	0090      	lsls	r0, r2, #2
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	eb12 0804 	adds.w	r8, r2, r4
 8002fc4:	eb43 0905 	adc.w	r9, r3, r5
 8002fc8:	eb18 0308 	adds.w	r3, r8, r8
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	eb49 0309 	adc.w	r3, r9, r9
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002fd8:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    if (mantissa > maxUint - digit)
 8002fdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe4:	647a      	str	r2, [r7, #68]	; 0x44
 8002fe6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002fea:	460b      	mov	r3, r1
 8002fec:	43db      	mvns	r3, r3
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ffa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002ffe:	4621      	mov	r1, r4
 8003000:	4291      	cmp	r1, r2
 8003002:	4629      	mov	r1, r5
 8003004:	eb71 0303 	sbcs.w	r3, r1, r3
 8003008:	d320      	bcc.n	800304c <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x144>
      break;
    mantissa += digit;
 800300a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800300e:	2200      	movs	r2, #0
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
 8003012:	637a      	str	r2, [r7, #52]	; 0x34
 8003014:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003018:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800301c:	4621      	mov	r1, r4
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6139      	str	r1, [r7, #16]
 8003022:	4629      	mov	r1, r5
 8003024:	414b      	adcs	r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800302c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    s++;
 8003030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003032:	3301      	adds	r3, #1
 8003034:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 8003036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff4d 	bl	8002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1a2      	bne.n	8002f8c <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x84>
 8003046:	e002      	b.n	800304e <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 800304c:	bf00      	nop
  }

  if (*s == '\0') {
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d138      	bne.n	80030c8 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
    if (is_negative) {
 8003056:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01a      	beq.n	8003094 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x18c>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003066:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 800306a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800306e:	2a01      	cmp	r2, #1
 8003070:	f173 4300 	sbcs.w	r3, r3, #2147483648	; 0x80000000
 8003074:	d228      	bcs.n	80030c8 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
        result.setInteger(JsonInteger(~mantissa + 1));
 8003076:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800307a:	2100      	movs	r1, #0
 800307c:	4250      	negs	r0, r2
 800307e:	62b8      	str	r0, [r7, #40]	; 0x28
 8003080:	eb61 0303 	sbc.w	r3, r1, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800308c:	f009 fe52 	bl	800cd34 <_ZN11ArduinoJson7V6211HB6detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
        return true;
 8003090:	2301      	movs	r3, #1
 8003092:	e141      	b.n	8003318 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
      }
    } else {
      result.setInteger(JsonUInt(mantissa));
 8003094:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003098:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800309a:	f009 fe5e 	bl	800cd5a <_ZN11ArduinoJson7V6211HB6detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>
      return true;
 800309e:	2301      	movs	r3, #1
 80030a0:	e13a      	b.n	8003318 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 80030a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80030a6:	f04f 020a 	mov.w	r2, #10
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f7fd fd85 	bl	8000bbc <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    exponent_offset++;
 80030ba:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  while (mantissa > traits::mantissa_max) {
 80030c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80030cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d0:	d2e7      	bcs.n	80030a2 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80030d2:	e009      	b.n	80030e8 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x1e0>
    exponent_offset++;
 80030d4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    s++;
 80030e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e4:	3301      	adds	r3, #1
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 80030e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fef4 	bl	8002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ed      	bne.n	80030d4 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x1cc>
  }

  if (*s == '.') {
 80030f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b2e      	cmp	r3, #46	; 0x2e
 80030fe:	d14c      	bne.n	800319a <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x292>
    s++;
 8003100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003102:	3301      	adds	r3, #1
 8003104:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 8003106:	e040      	b.n	800318a <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 8003108:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800310c:	f1b2 3f99 	cmp.w	r2, #2576980377	; 0x99999999
 8003110:	495e      	ldr	r1, [pc, #376]	; (800328c <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x384>)
 8003112:	418b      	sbcs	r3, r1
 8003114:	d236      	bcs.n	8003184 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003116:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	f04f 0000 	mov.w	r0, #0
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800312c:	0090      	lsls	r0, r2, #2
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	eb12 0a04 	adds.w	sl, r2, r4
 8003136:	eb43 0b05 	adc.w	fp, r3, r5
 800313a:	eb1a 030a 	adds.w	r3, sl, sl
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	eb4b 030b 	adc.w	r3, fp, fp
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800314a:	4652      	mov	r2, sl
 800314c:	465b      	mov	r3, fp
 800314e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003150:	7809      	ldrb	r1, [r1, #0]
 8003152:	3930      	subs	r1, #48	; 0x30
 8003154:	b2c9      	uxtb	r1, r1
 8003156:	b2c9      	uxtb	r1, r1
 8003158:	2000      	movs	r0, #0
 800315a:	6239      	str	r1, [r7, #32]
 800315c:	6278      	str	r0, [r7, #36]	; 0x24
 800315e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003162:	4621      	mov	r1, r4
 8003164:	1851      	adds	r1, r2, r1
 8003166:	6039      	str	r1, [r7, #0]
 8003168:	4629      	mov	r1, r5
 800316a:	414b      	adcs	r3, r1
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003172:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        exponent_offset--;
 8003176:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      }
      s++;
 8003184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003186:	3301      	adds	r3, #1
 8003188:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fea3 	bl	8002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1b6      	bne.n	8003108 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x200>
    }
  }

  int exponent = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (*s == 'e' || *s == 'E') {
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b65      	cmp	r3, #101	; 0x65
 80031a6:	d004      	beq.n	80031b2 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x2aa>
 80031a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b45      	cmp	r3, #69	; 0x45
 80031ae:	f040 8083 	bne.w	80032b8 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
    s++;
 80031b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b4:	3301      	adds	r3, #1
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
    bool negative_exponent = false;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (*s == '-') {
 80031be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b2d      	cmp	r3, #45	; 0x2d
 80031c4:	d106      	bne.n	80031d4 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x2cc>
      negative_exponent = true;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      s++;
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	3301      	adds	r3, #1
 80031d0:	657b      	str	r3, [r7, #84]	; 0x54
 80031d2:	e060      	b.n	8003296 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
    } else if (*s == '+') {
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b2b      	cmp	r3, #43	; 0x2b
 80031da:	d15c      	bne.n	8003296 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      s++;
 80031dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031de:	3301      	adds	r3, #1
 80031e0:	657b      	str	r3, [r7, #84]	; 0x54
    }

    while (isdigit(*s)) {
 80031e2:	e058      	b.n	8003296 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      exponent = exponent * 10 + (*s - '0');
 80031e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	461a      	mov	r2, r3
 80031f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	3b30      	subs	r3, #48	; 0x30
 80031f8:	4413      	add	r3, r2
 80031fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 80031fe:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	4413      	add	r3, r2
 8003208:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800320c:	dd40      	ble.n	8003290 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x388>
        if (negative_exponent)
 800320e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003212:	2b00      	cmp	r3, #0
 8003214:	d010      	beq.n	8003238 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x330>
          result.setFloat(is_negative ? -0.0f : 0.0f);
 8003216:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x31c>
 800321e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003278 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x370>
 8003222:	e001      	b.n	8003228 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x320>
 8003224:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003280 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x378>
 8003228:	eeb0 0a47 	vmov.f32	s0, s14
 800322c:	eef0 0a67 	vmov.f32	s1, s15
 8003230:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003232:	f7fe ffc0 	bl	80021b6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8setFloatEd>
 8003236:	e01b      	b.n	8003270 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x368>
        else
          result.setFloat(is_negative ? -traits::inf() : traits::inf());
 8003238:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x34e>
 8003240:	f009 fd9e 	bl	800cd80 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE3infEv>
 8003244:	ec53 2b10 	vmov	r2, r3, d0
 8003248:	ee08 2a10 	vmov	s16, r2
 800324c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003250:	ee08 3a90 	vmov	s17, r3
 8003254:	e005      	b.n	8003262 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x35a>
 8003256:	f009 fd93 	bl	800cd80 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE3infEv>
 800325a:	eeb0 8a40 	vmov.f32	s16, s0
 800325e:	eef0 8a60 	vmov.f32	s17, s1
 8003262:	eeb0 0a48 	vmov.f32	s0, s16
 8003266:	eef0 0a68 	vmov.f32	s1, s17
 800326a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800326c:	f7fe ffa3 	bl	80021b6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8setFloatEd>
        return true;
 8003270:	2301      	movs	r3, #1
 8003272:	e051      	b.n	8003318 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
 8003274:	f3af 8000 	nop.w
 8003278:	00000000 	.word	0x00000000
 800327c:	80000000 	.word	0x80000000
	...
 8003288:	19999999 	.word	0x19999999
 800328c:	00019999 	.word	0x00019999
      }
      s++;
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	3301      	adds	r3, #1
 8003294:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 8003296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fe1d 	bl	8002eda <_ZN11ArduinoJson7V6211HB6detail7isdigitEc>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d19e      	bne.n	80031e4 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x2dc>
    }
    if (negative_exponent)
 80032a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
      exponent = -exponent;
 80032ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032b2:	425b      	negs	r3, r3
 80032b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  }
  exponent += exponent_offset;
 80032b8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80032bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032c0:	4413      	add	r3, r2
 80032c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x3ca>
    return false;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e022      	b.n	8003318 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  JsonFloat final_result =
      make_float(static_cast<JsonFloat>(mantissa), exponent);
 80032d2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80032d6:	f7fd f959 	bl	800058c <__aeabi_ul2d>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80032e2:	ec43 2b10 	vmov	d0, r2, r3
 80032e6:	f009 fd5d 	bl	800cda4 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_>
 80032ea:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

  result.setFloat(is_negative ? -final_result : final_result);
 80032ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x3fc>
 80032f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003302:	e003      	b.n	800330c <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE+0x404>
 8003304:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003308:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 800330c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003310:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003312:	f7fe ff50 	bl	80021b6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8setFloatEd>
  return true;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	3798      	adds	r7, #152	; 0x98
 800331c:	46bd      	mov	sp, r7
 800331e:	ecbd 8b02 	vpop	{d8}
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop

08003328 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline JsonString VariantData::asString() const {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  switch (type()) {
 8003332:	6838      	ldr	r0, [r7, #0]
 8003334:	f7fe ffa9 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 8003338:	4603      	mov	r3, r0
 800333a:	2b04      	cmp	r3, #4
 800333c:	d002      	beq.n	8003344 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv+0x1c>
 800333e:	2b05      	cmp	r3, #5
 8003340:	d009      	beq.n	8003356 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv+0x2e>
 8003342:	e011      	b.n	8003368 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv+0x40>
    case VALUE_IS_LINKED_STRING:
      return JsonString(_content.asString.data, _content.asString.size,
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
                        JsonString::Linked);
 800334c:	2301      	movs	r3, #1
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe fc5a 	bl	8001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>
 8003354:	e00b      	b.n	800336e <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv+0x46>
    case VALUE_IS_OWNED_STRING:
      return JsonString(_content.asString.data, _content.asString.size,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
                        JsonString::Copied);
 800335e:	2300      	movs	r3, #0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe fc51 	bl	8001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>
 8003366:	e002      	b.n	800336e <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asStringEv+0x46>
    default:
      return JsonString();
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fe fc1c 	bl	8001ba6 <_ZN11ArduinoJson7V6211HB10JsonStringC1Ev>
  }
}
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZN11ArduinoJson7V6211HB20DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	70fb      	strb	r3, [r7, #3]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    return true;
 800339e:	2301      	movs	r3, #1
  }
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    return true;
 80033b4:	2301      	movs	r3, #1
  }
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
    return true;
 80033ca:	2301      	movs	r3, #1
  }
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    return true;
 80033e0:	2301      	movs	r3, #1
  }
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_ZN11ArduinoJson7V6211HB21DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : _value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	220a      	movs	r2, #10
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZN11ArduinoJson7V6211HB21DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : _value(n) {}
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	70fb      	strb	r3, [r7, #3]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_value > 0);
    return NestingLimit(static_cast<uint8_t>(_value - 1));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ffe2 	bl	800340a <_ZN11ArduinoJson7V6211HB21DeserializationOption12NestingLimitC1Eh>
 8003446:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    return _value == 0;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
  }
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_ZN11ArduinoJson7V6211HB6detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800347a:	793b      	ldrb	r3, [r7, #4]
 800347c:	737b      	strb	r3, [r7, #13]
 800347e:	2300      	movs	r3, #0
 8003480:	7b3a      	ldrb	r2, [r7, #12]
 8003482:	f362 0307 	bfi	r3, r2, #0, #8
 8003486:	7b7a      	ldrb	r2, [r7, #13]
 8003488:	f362 230f 	bfi	r3, r2, #8, #8
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_ZN11ArduinoJson7V6211HB6detail12StringCopierC1EPNS1_10MemoryPoolE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringCopier {
 public:
  StringCopier(MemoryPool* pool) : _pool(pool) {}
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_ZN11ArduinoJson7V6211HB6detail12StringCopier11startStringEv>:

  void startString() {
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
    _pool->getFreeZone(&_ptr, &_capacity);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	1d19      	adds	r1, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	330c      	adds	r3, #12
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7fe fd20 	bl	8001f10 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool11getFreeZoneEPPcPj>
    _size = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
    if (_capacity == 0)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <_ZN11ArduinoJson7V6211HB6detail12StringCopier11startStringEv+0x32>
      _pool->markAsOverflowed();
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fd5d 	bl	8001fa2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool16markAsOverflowedEv>
  }
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_ZN11ArduinoJson7V6211HB6detail12StringCopier4saveEv>:

  JsonString save() {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(_ptr);
    ARDUINOJSON_ASSERT(_size < _capacity);  // needs room for the terminator
    return JsonString(_pool->saveStringFromFreeZone(_size), _size,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
                      JsonString::Copied);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f7fe fd1b 	bl	8001f40 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool22saveStringFromFreeZoneEj>
 800350a:	4601      	mov	r1, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	2300      	movs	r3, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fb78 	bl	8001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>
  }
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)
      append(*s++);
  }

  void append(char c) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
    if (_size + 1 < _capacity)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	429a      	cmp	r2, r3
 8003538:	d20a      	bcs.n	8003550 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc+0x30>
      _ptr[_size++] = c;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	1c58      	adds	r0, r3, #1
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	6088      	str	r0, [r1, #8]
 8003548:	4413      	add	r3, r2
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	701a      	strb	r2, [r3, #0]
    else
      _pool->markAsOverflowed();
  }
 800354e:	e004      	b.n	800355a <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc+0x3a>
      _pool->markAsOverflowed();
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fd24 	bl	8001fa2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool16markAsOverflowedEv>
  }
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZNK11ArduinoJson7V6211HB6detail12StringCopier7isValidEv>:

  bool isValid() const {
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    return !_pool->overflowed();
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fcb6 	bl	8001ee0 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10overflowedEv>
 8003574:	4603      	mov	r3, r0
 8003576:	f083 0301 	eor.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
  }
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_ZNK11ArduinoJson7V6211HB6detail12StringCopier3strEv>:

  size_t size() const {
    return _size;
  }

  JsonString str() const {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(_ptr);
    ARDUINOJSON_ASSERT(_size < _capacity);
    _ptr[_size] = 0;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4413      	add	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
    return JsonString(_ptr, _size, JsonString::Copied);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	2300      	movs	r3, #0
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fb2e 	bl	8001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>
  }
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZN11ArduinoJson7V6211HB6detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80035c4:	d305      	bcc.n	80035d2 <_ZN11ArduinoJson7V6211HB6detail5Utf1615isHighSurrogateEt+0x1e>
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80035cc:	d201      	bcs.n	80035d2 <_ZN11ArduinoJson7V6211HB6detail5Utf1615isHighSurrogateEt+0x1e>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <_ZN11ArduinoJson7V6211HB6detail5Utf1615isHighSurrogateEt+0x20>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_ZN11ArduinoJson7V6211HB6detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80035f0:	d305      	bcc.n	80035fe <_ZN11ArduinoJson7V6211HB6detail5Utf1614isLowSurrogateEt+0x1e>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80035f8:	d201      	bcs.n	80035fe <_ZN11ArduinoJson7V6211HB6detail5Utf1614isLowSurrogateEt+0x1e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <_ZN11ArduinoJson7V6211HB6detail5Utf1614isLowSurrogateEt+0x20>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_ZN11ArduinoJson7V6211HB6detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : _highSurrogate(0), _codepoint(0) {}
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ffb9 	bl	80035b4 <_ZN11ArduinoJson7V6211HB6detail5Utf1615isHighSurrogateEt>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt+0x2a>
      _highSurrogate = codeunit & 0x3FF;
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	801a      	strh	r2, [r3, #0]
      return false;
 8003654:	2300      	movs	r3, #0
 8003656:	e018      	b.n	800368a <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ffc0 	bl	80035e0 <_ZN11ArduinoJson7V6211HB6detail5Utf1614isLowSurrogateEt>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt+0x54>
      _codepoint =
          uint32_t(0x10000 + ((_highSurrogate << 10) | (codeunit & 0x3FF)));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	029a      	lsls	r2, r3, #10
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003672:	4313      	orrs	r3, r2
 8003674:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003678:	461a      	mov	r2, r3
      _codepoint =
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	605a      	str	r2, [r3, #4]
      return true;
 800367e:	2301      	movs	r3, #1
 8003680:	e003      	b.n	800368a <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt+0x5c>
    }

    _codepoint = codeunit;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]
    return true;
 8003688:	2301      	movs	r3, #1
  }
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNK11ArduinoJson7V6211HB6detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
    return _codepoint;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
  }
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <_Z5delaym>:
#define us_ms 1000
#define us 1
#define ms_s 1000
#define s_hr 3600

void delay(volatile uint32_t del) {
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	del = (del / 10) * (HAL_RCC_GetSysClockFreq() / 1000000UL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <_Z5delaym+0x48>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	08dc      	lsrs	r4, r3, #3
 80036be:	f011 fbeb 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <_Z5delaym+0x4c>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	fb04 f303 	mul.w	r3, r4, r3
 80036d0:	607b      	str	r3, [r7, #4]
	while (del) {
 80036d2:	e002      	b.n	80036da <_Z5delaym+0x2e>
		del--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
	while (del) {
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f4      	bne.n	80036d4 <_Z5delaym+0x28>
	}
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}
 80036f4:	cccccccd 	.word	0xcccccccd
 80036f8:	431bde83 	.word	0x431bde83

080036fc <_Z15refresh_counterv>:

volatile uint32_t reset_counter = UINT32_MAX;
const uint32_t refresh_value = 300;  // 500 = 1 second

inline void refresh_counter() {
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	watchdog_cont = $CONTINUE;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <_Z15refresh_counterv+0x14>)
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20000002 	.word	0x20000002

08003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
		 *@details To expand variables_pointer -dynamic array size by one and passing value as VARIABLES* Setting.
		 *@param [in] variables_pointer To add a new pointer pointing to VARIABLES object in variables_pointer object(defined in main function) by passing it's value by reference to VARIABLES Function.
		 *@param [in] VAR_NAME a string to assign this VARIABLES object variable name.
		 *@param [in] add_to_json a bool to designate if this  VARIABLES object should be added to json or not.
		 */
		VARIABLES(DynamicArray<VARIABLES*> *variables_pointer, string VAR_NAME, bool add_to_json = 0) {
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	70fb      	strb	r3, [r7, #3]
 8003722:	68fc      	ldr	r4, [r7, #12]
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4618      	mov	r0, r3
 800372a:	f013 fb8f 	bl	8016e4c <_ZNSaIcEC1Ev>
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	461a      	mov	r2, r3
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x90>)
 8003736:	4620      	mov	r0, r4
 8003738:	f014 f844 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4618      	mov	r0, r3
 8003742:	f013 fb85 	bl	8016e50 <_ZNSaIcED1Ev>
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x94>)
 800374e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x98>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x98>)
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x98>)
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f883 2020 	strb.w	r2, [r3, #32]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3324      	adds	r3, #36	; 0x24
 8003774:	4618      	mov	r0, r3
 8003776:	f009 fb5b 	bl	800ce30 <_ZN12DynamicArrayI9ParameterEC1Ev>
			if (variables_pointer != NULL) {
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x74>
				variables_pointer->push_back(this);
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	68b8      	ldr	r0, [r7, #8]
 8003784:	f009 fb99 	bl	800ceba <_ZN12DynamicArrayIP9VARIABLESE9push_backES1_>
			}
			this->VAR_NAME = VAR_NAME;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f013 fcb8 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			this->add_to_json = add_to_json;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	08017e00 	.word	0x08017e00
 80037a8:	3ff00000 	.word	0x3ff00000
 80037ac:	20000140 	.word	0x20000140

080037b0 <_ZN9ParameterC1Ev>:
struct Parameter {
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3308      	adds	r3, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f013 fc69 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0420 	add.w	r4, r3, #32
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	4618      	mov	r0, r3
 80037ce:	f013 fb3d 	bl	8016e4c <_ZNSaIcEC1Ev>
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	461a      	mov	r2, r3
 80037d8:	4906      	ldr	r1, [pc, #24]	; (80037f4 <_ZN9ParameterC1Ev+0x44>)
 80037da:	4620      	mov	r0, r4
 80037dc:	f013 fff2 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4618      	mov	r0, r3
 80037e6:	f013 fb33 	bl	8016e50 <_ZNSaIcED1Ev>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	08017e00 	.word	0x08017e00

080037f8 <_ZNK9VARIABLES9GET_indexEv>:
		}
		/**
		 * @brief To get index no of this VARIABLES object.
		 * @return index no corresponding to this VARIABLES object.
		 */
		int GET_index() const {
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
			return index;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
		}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>:
		/**
		 * @brief To get variables no of this VARIABLES object.
		 * @return a constant string designating variable name corresponding to this VARIABLES object.
		 */
		const string& GET_VAR_NAME() const {
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
			return VAR_NAME;
 800381a:	687b      	ldr	r3, [r7, #4]
		}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>:
		}
		/**
		 * @brief To get this VARIABLEs object's connected value.
		 * @return VAR_VALUE_CONN a double value.
		 */
		double GET_VAR_VALUE_CONN() const {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
			return VAR_VALUE_CONN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003836:	ec43 2b17 	vmov	d7, r2, r3
		}
 800383a:	eeb0 0a47 	vmov.f32	s0, s14
 800383e:	eef0 0a67 	vmov.f32	s1, s15
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <_ZN9VARIABLES18SET_VAR_VALUE_CONNEd>:
		/**
		 * @brief To set this VARIABLEs object's connected value.
		 * @param [in] VAR_VALUE_CONN a double value to set value of this VARIABLES object's VAR_VALUE_CONN.
		 */
		void SET_VAR_VALUE_CONN(double VAR_VALUE_CONN = 0) {
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	ed87 0b00 	vstr	d0, [r7]
			this->VAR_VALUE_CONN = VAR_VALUE_CONN;
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800385e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>:
		struct PWRPIN {
				GPIO_TypeDef *PWRPIN_GPIOx;
				uint16_t PWRPIN_GPIO_PINx;
		};

		PWR_PIN(GPIO_TypeDef *PWRPIN_GPI_Ox, uint16_t PWRPIN_GPIO_PI_Nx) {
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
			SET_PWRPIN(PWRPIN_GPI_Ox, PWRPIN_GPIO_PI_Nx);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	461a      	mov	r2, r3
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f805 	bl	8003892 <_ZN7PWR_PIN10SET_PWRPINEP12GPIO_TypeDeft>
		}
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_ZN7PWR_PIN10SET_PWRPINEP12GPIO_TypeDeft>:

		PWRPIN pwrpin;

		void SET_PWRPIN(GPIO_TypeDef *PWRPIN_GPI_Ox, uint16_t PWRPIN_GPIO_PI_Nx) {
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
			pwrpin.PWRPIN_GPIO_PINx = PWRPIN_GPIO_PI_Nx;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	809a      	strh	r2, [r3, #4]
			pwrpin.PWRPIN_GPIOx = PWRPIN_GPI_Ox;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	601a      	str	r2, [r3, #0]
		}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_ZN7PWR_PIN3SETEbm>:
		void Toggle(uint32_t del = 0) {
			HAL_GPIO_TogglePin(pwrpin.PWRPIN_GPIOx, pwrpin.PWRPIN_GPIO_PINx);
			delay(del);
//		HAL_Delay(del);
		}
		void SET(bool state = 0, uint32_t del = 1) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	460b      	mov	r3, r1
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	72fb      	strb	r3, [r7, #11]
			HAL_GPIO_WritePin(pwrpin.PWRPIN_GPIOx, pwrpin.PWRPIN_GPIO_PINx, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8899      	ldrh	r1, [r3, #4]
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <_ZN7PWR_PIN3SETEbm+0x20>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <_ZN7PWR_PIN3SETEbm+0x22>
 80038d8:	2300      	movs	r3, #0
 80038da:	461a      	mov	r2, r3
 80038dc:	f010 fcaa 	bl	8014234 <HAL_GPIO_WritePin>
			delay(del);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fee3 	bl	80036ac <_Z5delaym>
		}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZN7PWR_PIN5PULSEEbmm>:
		void PULSE(bool high_or_low, uint32_t del = 0, uint32_t del2 = 0) {
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	460b      	mov	r3, r1
 80038fc:	72fb      	strb	r3, [r7, #11]
			SET(high_or_low, del);
 80038fe:	7afb      	ldrb	r3, [r7, #11]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ffd7 	bl	80038b8 <_ZN7PWR_PIN3SETEbm>
			SET(!high_or_low, del2);
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	f083 0301 	eor.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff ffce 	bl	80038b8 <_ZN7PWR_PIN3SETEbm>
		}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_ZN3MUXC1EP7PWR_PINS1_S1_>:

class MUX {
	PWR_PIN *s0, *s1, *s2;
public:

	MUX(PWR_PIN *MUX0, PWR_PIN *MUX1, PWR_PIN *MUX2) {
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
		s0 = MUX0;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	601a      	str	r2, [r3, #0]
		s1 = MUX1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]
		s2 = MUX2;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	609a      	str	r2, [r3, #8]

	}
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <_Z14set_both_printb>:
#else
volatile bool uart_print = 0;  //!< A bool value representing if Printing is to be done or not as per input password.
volatile bool ble_print = 0;  //!< A bool value representing if Printing is to be done or not as per input password.
#endif

void set_both_print(bool print_temp) {
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	uart_print = print_temp;
 800395e:	4a06      	ldr	r2, [pc, #24]	; (8003978 <_Z14set_both_printb+0x24>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	7013      	strb	r3, [r2, #0]
	ble_print = print_temp;
 8003964:	4a05      	ldr	r2, [pc, #20]	; (800397c <_Z14set_both_printb+0x28>)
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	7013      	strb	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000170 	.word	0x20000170
 800397c:	20000171 	.word	0x20000171

08003980 <_Z14set_uart_printb>:

void set_uart_print(bool print_temp) {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	uart_print = print_temp;
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <_Z14set_uart_printb+0x1c>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	7013      	strb	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000170 	.word	0x20000170

080039a0 <_Z13is_uart_printv>:
bool is_uart_print() {
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
	return uart_print;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <_Z13is_uart_printv+0x14>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	20000170 	.word	0x20000170

080039b8 <_Z13set_ble_printb>:

void set_ble_print(bool print_temp) {
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	ble_print = print_temp;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <_Z13set_ble_printb+0x1c>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	7013      	strb	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000171 	.word	0x20000171

080039d8 <_Z12is_ble_printv>:
bool is_ble_print() {
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	return ble_print;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <_Z12is_ble_printv+0x14>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20000171 	.word	0x20000171

080039f0 <_Z14save_ble_printb>:

DynamicArray<bool> ble_print_arr, uart_print_arr;

void save_ble_print(bool set_now = 0) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
	ble_print_arr.push_back(is_ble_print());
 80039fa:	f7ff ffed 	bl	80039d8 <_Z12is_ble_printv>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4619      	mov	r1, r3
 8003a02:	4805      	ldr	r0, [pc, #20]	; (8003a18 <_Z14save_ble_printb+0x28>)
 8003a04:	f009 faaa 	bl	800cf5c <_ZN12DynamicArrayIbE9push_backEb>
	set_ble_print(set_now);
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ffd4 	bl	80039b8 <_Z13set_ble_printb>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000174 	.word	0x20000174

08003a1c <_Z17restore_ble_printv>:
void restore_ble_print() {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	set_ble_print(ble_print_arr.pop_back());
 8003a20:	4804      	ldr	r0, [pc, #16]	; (8003a34 <_Z17restore_ble_printv+0x18>)
 8003a22:	f009 fab0 	bl	800cf86 <_ZN12DynamicArrayIbE8pop_backEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ffc5 	bl	80039b8 <_Z13set_ble_printb>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000174 	.word	0x20000174

08003a38 <_Z15save_uart_printb>:

void save_uart_print(bool set_now = 0) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	uart_print_arr.push_back(is_uart_print());
 8003a42:	f7ff ffad 	bl	80039a0 <_Z13is_uart_printv>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4805      	ldr	r0, [pc, #20]	; (8003a60 <_Z15save_uart_printb+0x28>)
 8003a4c:	f009 fa86 	bl	800cf5c <_ZN12DynamicArrayIbE9push_backEb>
	set_uart_print(set_now);
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff94 	bl	8003980 <_Z14set_uart_printb>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2000017c 	.word	0x2000017c

08003a64 <_Z18restore_uart_printv>:
void restore_uart_print() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	set_uart_print(uart_print_arr.pop_back());
 8003a68:	4804      	ldr	r0, [pc, #16]	; (8003a7c <_Z18restore_uart_printv+0x18>)
 8003a6a:	f009 fa8c 	bl	800cf86 <_ZN12DynamicArrayIbE8pop_backEv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff85 	bl	8003980 <_Z14set_uart_printb>
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000017c 	.word	0x2000017c

08003a80 <_Z12is_any_printv>:

bool is_any_print() {
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
	return uart_print || ble_print;
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_Z12is_any_printv+0x28>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <_Z12is_any_printv+0x18>
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <_Z12is_any_printv+0x2c>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <_Z12is_any_printv+0x1c>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <_Z12is_any_printv+0x1e>
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000170 	.word	0x20000170
 8003aac:	20000171 	.word	0x20000171

08003ab0 <_Z15save_both_printb>:
void save_both_print(bool set_now = 0) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
	save_ble_print(set_now);
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff97 	bl	80039f0 <_Z14save_ble_printb>
	save_uart_print(set_now);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ffb7 	bl	8003a38 <_Z15save_uart_printb>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_Z18restore_both_printv>:
void restore_both_print() {
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0
	restore_ble_print();
 8003ad6:	f7ff ffa1 	bl	8003a1c <_Z17restore_ble_printv>
	restore_uart_print();
 8003ada:	f7ff ffc3 	bl	8003a64 <_Z18restore_uart_printv>
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_ZN12UART_PRINTERC1EP20__UART_HandleTypeDefNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

		UART_HandleTypeDef *uptr;  //!< A Pointer pointing to UART_HandleTypeDef object.
		string Pass;  //!< A string value representing intended password
	public:

		UART_PRINTER(UART_HandleTypeDef *uptr_i, string Pass_i) {
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f013 face 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

			uptr = uptr_i;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	601a      	str	r2, [r3, #0]
			Pass = Pass_i;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3304      	adds	r3, #4
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f013 fafc 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		}
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_ZN12UART_PRINTER4ReadB5cxx11Em>:
		}
		/**
		 * @fn 	string Read()
		 * @brief To take input string from user through UART protocol
		 */
		string Read(uint32_t timeout) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
			//To ask user to enter value to be changed
			string read_string;
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f013 fab7 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			if (is_uart_print()) {
 8003b26:	f7ff ff3b 	bl	80039a0 <_Z13is_uart_printv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00f      	beq.n	8003b50 <_ZN12UART_PRINTER4ReadB5cxx11Em+0x3c>
				HAL_UART_Init(uptr);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f012 fc2f 	bl	8016398 <HAL_UART_Init>
				HAL_UARTEx_ReceiveToIdle(uptr, read_string, { timeout });
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fe6c 	bl	8001820 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
			}
			while (read_string.back() == '\n' || read_string.back() == '\r') {
 8003b48:	e002      	b.n	8003b50 <_ZN12UART_PRINTER4ReadB5cxx11Em+0x3c>
				read_string.pop_back();
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f013 fba0 	bl	8017290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
			while (read_string.back() == '\n' || read_string.back() == '\r') {
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f013 fb55 	bl	8017200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b0a      	cmp	r3, #10
 8003b5c:	d006      	beq.n	8003b6c <_ZN12UART_PRINTER4ReadB5cxx11Em+0x58>
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f013 fb4e 	bl	8017200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8003b64:	4603      	mov	r3, r0
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b0d      	cmp	r3, #13
 8003b6a:	d101      	bne.n	8003b70 <_ZN12UART_PRINTER4ReadB5cxx11Em+0x5c>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <_ZN12UART_PRINTER4ReadB5cxx11Em+0x5e>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e9      	bne.n	8003b4a <_ZN12UART_PRINTER4ReadB5cxx11Em+0x36>
			}
			return read_string;
 8003b76:	bf00      	nop
		}
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
		}
		/**
		 * @fn 	void Print(string out = NULL)
		 * @brief To Print Data into serial monitor with input as a string value.
		 */
		void Print(string out = NULL) {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
//			PrintForce(d_t_s(is_uart_print(), 0));
			if (is_uart_print()) {
 8003b8a:	f7ff ff09 	bl	80039a0 <_Z13is_uart_printv>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>
				HAL_UART_Init(uptr);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f012 fbfd 	bl	8016398 <HAL_UART_Init>
				HAL_UART_Transmit(uptr, (uint8_t*) out.c_str(), out.size(), UINT32_MAX);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681c      	ldr	r4, [r3, #0]
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f013 fcfc 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003ba8:	4605      	mov	r5, r0
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f013 fae0 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f012 fc3a 	bl	8016434 <HAL_UART_Transmit>

			}
		}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}

08003bc8 <_ZN12UART_PRINTER8get_passB5cxx11Ev>:
				}
				Print("\n\r");
			}
		}

		string get_pass() {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
			return Pass;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f013 fdbf 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
		}
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef>:

		/**
		 * a constructor for NEOWAY class object with input parameters
		 * @param [in] NEOUART A pointer pointing to UART_HanfleTypeDef object.
		 */
		NEOWAY(UART_HandleTypeDef *NEOUART) :
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b08b      	sub	sp, #44	; 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
				V_3_8(V3_8_GPIO_Port, V3_8_Pin), NW_PWR(NEOWAY_PWR_GPIO_Port, NEOWAY_PWR_Pin) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1d1c      	adds	r4, r3, #4
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f013 f926 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	461a      	mov	r2, r3
 8003c06:	4959      	ldr	r1, [pc, #356]	; (8003d6c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x184>)
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f013 fddb 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4618      	mov	r0, r3
 8003c14:	f013 f91c 	bl	8016e50 <_ZNSaIcED1Ev>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f103 041c 	add.w	r4, r3, #28
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	4618      	mov	r0, r3
 8003c24:	f013 f912 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	494f      	ldr	r1, [pc, #316]	; (8003d6c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x184>)
 8003c30:	4620      	mov	r0, r4
 8003c32:	f013 fdc7 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f013 f908 	bl	8016e50 <_ZNSaIcED1Ev>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003c46:	f107 0310 	add.w	r3, r7, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f013 f8fe 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003c50:	f107 0310 	add.w	r3, r7, #16
 8003c54:	461a      	mov	r2, r3
 8003c56:	4945      	ldr	r1, [pc, #276]	; (8003d6c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x184>)
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f013 fdb3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c5e:	f107 0310 	add.w	r3, r7, #16
 8003c62:	4618      	mov	r0, r3
 8003c64:	f013 f8f4 	bl	8016e50 <_ZNSaIcED1Ev>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4618      	mov	r0, r3
 8003c74:	f013 f8ea 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	493b      	ldr	r1, [pc, #236]	; (8003d6c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x184>)
 8003c80:	4620      	mov	r0, r4
 8003c82:	f013 fd9f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f013 f8e0 	bl	8016e50 <_ZNSaIcED1Ev>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8003c96:	f107 0318 	add.w	r3, r7, #24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f013 f8d6 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003ca0:	f107 0318 	add.w	r3, r7, #24
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4931      	ldr	r1, [pc, #196]	; (8003d6c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x184>)
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f013 fd8b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003cae:	f107 0318 	add.w	r3, r7, #24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f013 f8cc 	bl	8016e50 <_ZNSaIcED1Ev>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	33e4      	adds	r3, #228	; 0xe4
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	4928      	ldr	r1, [pc, #160]	; (8003d70 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x188>)
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fdcc 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	33ec      	adds	r3, #236	; 0xec
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	4924      	ldr	r1, [pc, #144]	; (8003d70 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x188>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fdc5 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8003cea:	f107 031c 	add.w	r3, r7, #28
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f013 f8ac 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003cf4:	f107 031c 	add.w	r3, r7, #28
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	491e      	ldr	r1, [pc, #120]	; (8003d74 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x18c>)
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f013 fd61 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d02:	f107 031c 	add.w	r3, r7, #28
 8003d06:	4618      	mov	r0, r3
 8003d08:	f013 f8a2 	bl	8016e50 <_ZNSaIcED1Ev>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8003d12:	f107 0320 	add.w	r3, r7, #32
 8003d16:	4618      	mov	r0, r3
 8003d18:	f013 f898 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003d1c:	f107 0320 	add.w	r3, r7, #32
 8003d20:	461a      	mov	r2, r3
 8003d22:	4915      	ldr	r1, [pc, #84]	; (8003d78 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x190>)
 8003d24:	4620      	mov	r0, r4
 8003d26:	f013 fd4d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d2a:	f107 0320 	add.w	r3, r7, #32
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f013 f88e 	bl	8016e50 <_ZNSaIcED1Ev>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8003d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f013 f884 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d48:	461a      	mov	r2, r3
 8003d4a:	490c      	ldr	r1, [pc, #48]	; (8003d7c <_ZN6NEOWAYC1EP20__UART_HandleTypeDef+0x194>)
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f013 fd39 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f013 f87a 	bl	8016e50 <_ZNSaIcED1Ev>
			this->NEOUART = NEOUART;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	601a      	str	r2, [r3, #0]
#if defined(DMAUART)
			START_DMA();
			PAUSE_DMA();
#endif
		}
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	372c      	adds	r7, #44	; 0x2c
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd90      	pop	{r4, r7, pc}
 8003d6c:	08017e00 	.word	0x08017e00
 8003d70:	48000800 	.word	0x48000800
 8003d74:	08017e04 	.word	0x08017e04
 8003d78:	08017e0c 	.word	0x08017e0c
 8003d7c:	08017e14 	.word	0x08017e14

08003d80 <_ZN6NEOWAY5STARTEv>:

		/**
		 * @fn Vvoid RESTART()
		 * @brief GPIO_Pins are rewritten as per pwr_pin structure made by us with different hal delays then during PWR_setup time.
		 */
		void START() {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
			V_3_8.PULSE(0, 2 * us_s, 1 * us_s);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <_ZN6NEOWAY5STARTEv+0x30>)
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <_ZN6NEOWAY5STARTEv+0x34>)
 8003d92:	2100      	movs	r1, #0
 8003d94:	f7ff fdab 	bl	80038ee <_ZN7PWR_PIN5PULSEEbmm>
			NW_PWR.PULSE(1, 3 * us_s, 2 * us_s);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <_ZN6NEOWAY5STARTEv+0x34>)
 8003da0:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <_ZN6NEOWAY5STARTEv+0x38>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	f7ff fda3 	bl	80038ee <_ZN7PWR_PIN5PULSEEbmm>

		}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	000f4240 	.word	0x000f4240
 8003db4:	001e8480 	.word	0x001e8480
 8003db8:	002dc6c0 	.word	0x002dc6c0

08003dbc <_ZN6NEOWAY12GET_BLE_RESPB5cxx11Ev>:
			NW_PWR.PULSE(1, 3 * us_s, 2 * us_s);

		}


		string GET_BLE_RESP() {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
			string resp_ret = ble_resp;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	334c      	adds	r3, #76	; 0x4c
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f013 fcc5 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
			ble_resp.clear();
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	334c      	adds	r3, #76	; 0x4c
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f013 f9f5 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
			return resp_ret;
 8003ddc:	bf00      	nop
		}
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_ZNKSt16initializer_listImE4sizeEv>:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv>:
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>:
		 * @param [in] timeout initially initialized to 0.
		 * @param [in] try_count Designates no of times send/receive process have to be initiated if not done last time correctly .Initialized to 1.
		 * @param [in]  ex_resp Initialized as list of 3 items: "OK"," "," "
		 * @return A string designating NEOWAY response.
		 */
		string SEND_RECIEVE(string command, initializer_list<uint32_t> timeout = { 0 }, uint16_t try_count = 1, initializer_list<string> ex_resp = { "OK", "", "" }) {
 8003e18:	b082      	sub	sp, #8
 8003e1a:	b5b0      	push	{r4, r5, r7, lr}
 8003e1c:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 8003e26:	f5a4 7425 	sub.w	r4, r4, #660	; 0x294
 8003e2a:	6020      	str	r0, [r4, #0]
 8003e2c:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 8003e30:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
 8003e34:	6001      	str	r1, [r0, #0]
 8003e36:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8003e3a:	f5a1 7127 	sub.w	r1, r1, #668	; 0x29c
 8003e3e:	600a      	str	r2, [r1, #0]
 8003e40:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4

			if (neo_control == $CONTINUE) {
 8003e44:	4bb5      	ldr	r3, [pc, #724]	; (800411c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x304>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 83bc 	beq.w	80045d2 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x7ba>
				refresh_counter();
 8003e5a:	f7ff fc4f 	bl	80036fc <_Z15refresh_counterv>
				string accu_response(5000, ' ');  // accumulated response
 8003e5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e62:	4618      	mov	r0, r3
 8003e64:	f012 fff2 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003e68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e6c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e70:	2220      	movs	r2, #32
 8003e72:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e76:	f013 f91b 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8003e7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f012 ffe6 	bl	8016e50 <_ZNSaIcED1Ev>
				string response(5000, ' ');
 8003e84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f012 ffdf 	bl	8016e4c <_ZNSaIcEC1Ev>
 8003e8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003e96:	2220      	movs	r2, #32
 8003e98:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e9c:	f013 f908 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8003ea0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f012 ffd3 	bl	8016e50 <_ZNSaIcED1Ev>
				string ble_temp;
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f013 f8f0 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
				accu_response.clear();
 8003eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f013 f984 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
//				string response;
//				debug.Print("\r\nstring size : " + d_t_s(response.max_size()) + "\r\n");
				command.push_back(0x0D);
 8003ebe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ec2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8003ec6:	210d      	movs	r1, #13
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f013 f99e 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
				command.push_back(0x0A);
 8003ece:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ed2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8003ed6:	210a      	movs	r1, #10
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	f013 f996 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>

				while (try_count--) {
 8003ede:	e351      	b.n	8004584 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x76c>
					debug.Print("\r\n---->\r\n" + command + "\r\n---------- " + d_t_s(try_count) + "\r\n");
 8003ee0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ee4:	f5a3 70fa 	sub.w	r0, r3, #500	; 0x1f4
 8003ee8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003eec:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	498b      	ldr	r1, [pc, #556]	; (8004120 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x308>)
 8003ef4:	f008 fc18 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003ef8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003efc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003f00:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003f04:	4a87      	ldr	r2, [pc, #540]	; (8004124 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x30c>)
 8003f06:	4618      	mov	r0, r3
 8003f08:	f009 f857 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f0c:	f8b7 32bc 	ldrh.w	r3, [r7, #700]	; 0x2bc
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc faf7 	bl	8000504 <__aeabi_ui2d>
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	ec45 4b10 	vmov	d0, r4, r5
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fd fafc 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8003f30:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f34:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003f38:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003f3c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8003f40:	4618      	mov	r0, r3
 8003f42:	f008 fc78 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8003f46:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f4a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003f4e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003f52:	4a75      	ldr	r2, [pc, #468]	; (8004128 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x310>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f009 f830 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4872      	ldr	r0, [pc, #456]	; (800412c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x314>)
 8003f62:	f7ff fe0d 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003f66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f013 f8c3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f74:	4618      	mov	r0, r3
 8003f76:	f013 f8be 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f013 f8b9 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f013 f8b4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f92:	4618      	mov	r0, r3
 8003f94:	f013 f8af 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					BLE_SEND("\r\n-->\r\n" + command + "\r\n---------- " + d_t_s(try_count) + "\r\n");
 8003f98:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f9c:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8003fa0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fa4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4961      	ldr	r1, [pc, #388]	; (8004130 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x318>)
 8003fac:	f008 fbbc 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003fb0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fb4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fb8:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8003fbc:	4a59      	ldr	r2, [pc, #356]	; (8004124 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x30c>)
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f008 fffb 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003fc4:	f8b7 32bc 	ldrh.w	r3, [r7, #700]	; 0x2bc
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fa9b 	bl	8000504 <__aeabi_ui2d>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fd6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	ec45 4b10 	vmov	d0, r4, r5
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd faa0 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8003fe8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ff0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003ff4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 fc1c 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8003ffe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004002:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004006:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800400a:	4a47      	ldr	r2, [pc, #284]	; (8004128 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x310>)
 800400c:	4618      	mov	r0, r3
 800400e:	f008 ffd4 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8004012:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8004016:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800401a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800401e:	4611      	mov	r1, r2
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f001 fb17 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004026:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800402a:	4618      	mov	r0, r3
 800402c:	f013 f863 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004030:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004034:	4618      	mov	r0, r3
 8004036:	f013 f85e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800403a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800403e:	4618      	mov	r0, r3
 8004040:	f013 f859 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004044:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004048:	4618      	mov	r0, r3
 800404a:	f013 f854 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800404e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004052:	4618      	mov	r0, r3
 8004054:	f013 f84f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//					HAL_UART_DeInit(NEOUART);
					HAL_UART_Init(NEOUART);
 8004058:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800405c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f012 f997 	bl	8016398 <HAL_UART_Init>
					HAL_UART_Transmit(NEOUART, (uint8_t*) command.c_str(), command.size(), UINT32_MAX - 1);
 800406a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800406e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681c      	ldr	r4, [r3, #0]
 8004076:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800407a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f013 fa8e 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004084:	4605      	mov	r5, r0
 8004086:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800408a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	f013 f86e 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004094:	4603      	mov	r3, r0
 8004096:	b29a      	uxth	r2, r3
 8004098:	f06f 0301 	mvn.w	r3, #1
 800409c:	4629      	mov	r1, r5
 800409e:	4620      	mov	r0, r4
 80040a0:	f012 f9c8 	bl	8016434 <HAL_UART_Transmit>
					uint32_t i = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

					for (; i < timeout.size(); i++) {
 80040aa:	e074      	b.n	8004196 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x37e>
						response.clear();
 80040ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b0:	4618      	mov	r0, r3
 80040b2:	f013 f888 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
						refresh_counter();
 80040b6:	f7ff fb21 	bl	80036fc <_Z15refresh_counterv>
						HAL_UARTEx_ReceiveToIdle(NEOUART, response, (uint32_t) *(timeout.begin() + i));
 80040ba:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040be:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681c      	ldr	r4, [r3, #0]
 80040c6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 ff8c 	bl	800cfe8 <_ZNKSt16initializer_listImE5beginEv>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e0:	4619      	mov	r1, r3
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7fd fb9c 	bl	8001820 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
						refresh_counter();
 80040e8:	f7ff fb08 	bl	80036fc <_Z15refresh_counterv>
#if defined(neo_print_resp_size)
						debug.Print("< " + d_t_s(response.size()) + " > ");
#endif

						return_check = CHECK_RESPONSE(&response, i < ex_resp.size() ? (string*) (ex_resp.begin() + i) : NULL);
 80040ec:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fe84 	bl	8003dfe <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv>
 80040f6:	4602      	mov	r2, r0
 80040f8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d219      	bcs.n	8004134 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x31c>
 8004100:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8004104:	4618      	mov	r0, r3
 8004106:	f008 ff7b 	bl	800d000 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>
 800410a:	4601      	mov	r1, r0
 800410c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	e00c      	b.n	8004136 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x31e>
 800411c:	20000000 	.word	0x20000000
 8004120:	08017e1c 	.word	0x08017e1c
 8004124:	08017e28 	.word	0x08017e28
 8004128:	08017e38 	.word	0x08017e38
 800412c:	20000184 	.word	0x20000184
 8004130:	08017e3c 	.word	0x08017e3c
 8004134:	2300      	movs	r3, #0
 8004136:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800413a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800413e:	f5a2 7026 	sub.w	r0, r2, #664	; 0x298
 8004142:	461a      	mov	r2, r3
 8004144:	6800      	ldr	r0, [r0, #0]
 8004146:	f000 fd6f 	bl	8004c28 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004152:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

						accu_response = accu_response + response;
 800415c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004160:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004164:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004168:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800416c:	4618      	mov	r0, r3
 800416e:	f008 ff53 	bl	800d018 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
 8004172:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8004176:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f012 ffc6 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004182:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004186:	4618      	mov	r0, r3
 8004188:	f012 ffb5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					for (; i < timeout.size(); i++) {
 800418c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8004190:	3301      	adds	r3, #1
 8004192:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8004196:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fe23 	bl	8003de6 <_ZNKSt16initializer_listImE4sizeEv>
 80041a0:	4602      	mov	r2, r0
 80041a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80041a6:	4293      	cmp	r3, r2
 80041a8:	bf34      	ite	cc
 80041aa:	2301      	movcc	r3, #1
 80041ac:	2300      	movcs	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f af7b 	bne.w	80040ac <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x294>
					}

					if (return_check == $EXPECTED_RESPONSE) {
 80041b6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041ba:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03e      	beq.n	8004252 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x43a>
						debug.Print("\t{=}");
 80041d4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80041d8:	4618      	mov	r0, r3
 80041da:	f012 fe37 	bl	8016e4c <_ZNSaIcEC1Ev>
 80041de:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80041e2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80041e6:	49db      	ldr	r1, [pc, #876]	; (8004554 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x73c>)
 80041e8:	4618      	mov	r0, r3
 80041ea:	f013 faeb 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80041ee:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80041f2:	4619      	mov	r1, r3
 80041f4:	48d8      	ldr	r0, [pc, #864]	; (8004558 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x740>)
 80041f6:	f7ff fcc3 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80041fa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80041fe:	4618      	mov	r0, r3
 8004200:	f012 ff79 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004204:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004208:	4618      	mov	r0, r3
 800420a:	f012 fe21 	bl	8016e50 <_ZNSaIcED1Ev>
						BLE_SEND("\t{=}");
 800420e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004212:	4618      	mov	r0, r3
 8004214:	f012 fe1a 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004218:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800421c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004220:	49cc      	ldr	r1, [pc, #816]	; (8004554 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x73c>)
 8004222:	4618      	mov	r0, r3
 8004224:	f013 face 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004228:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800422c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004230:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004234:	4611      	mov	r1, r2
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	f001 fa0c 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800423c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004240:	4618      	mov	r0, r3
 8004242:	f012 ff58 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004246:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800424a:	4618      	mov	r0, r3
 800424c:	f012 fe00 	bl	8016e50 <_ZNSaIcED1Ev>
 8004250:	e03d      	b.n	80042ce <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x4b6>
					} else {
						BLE_SEND("\t{!}");
 8004252:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8004256:	4618      	mov	r0, r3
 8004258:	f012 fdf8 	bl	8016e4c <_ZNSaIcEC1Ev>
 800425c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8004260:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004264:	49bd      	ldr	r1, [pc, #756]	; (800455c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x744>)
 8004266:	4618      	mov	r0, r3
 8004268:	f013 faac 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800426c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8004270:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004274:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004278:	4611      	mov	r1, r2
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	f001 f9ea 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004280:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004284:	4618      	mov	r0, r3
 8004286:	f012 ff36 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800428a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800428e:	4618      	mov	r0, r3
 8004290:	f012 fdde 	bl	8016e50 <_ZNSaIcED1Ev>
						debug.Print("\t{!}");
 8004294:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004298:	4618      	mov	r0, r3
 800429a:	f012 fdd7 	bl	8016e4c <_ZNSaIcEC1Ev>
 800429e:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80042a2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80042a6:	49ad      	ldr	r1, [pc, #692]	; (800455c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x744>)
 80042a8:	4618      	mov	r0, r3
 80042aa:	f013 fa8b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80042ae:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80042b2:	4619      	mov	r1, r3
 80042b4:	48a8      	ldr	r0, [pc, #672]	; (8004558 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x740>)
 80042b6:	f7ff fc63 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80042ba:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80042be:	4618      	mov	r0, r3
 80042c0:	f012 ff19 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80042c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80042c8:	4618      	mov	r0, r3
 80042ca:	f012 fdc1 	bl	8016e50 <_ZNSaIcED1Ev>
					}

					debug.Print(accu_response + "\r\n<--\r\n");
 80042ce:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80042d2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80042d6:	4aa2      	ldr	r2, [pc, #648]	; (8004560 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x748>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f008 fa99 	bl	800c810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80042de:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80042e2:	4619      	mov	r1, r3
 80042e4:	489c      	ldr	r0, [pc, #624]	; (8004558 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x740>)
 80042e6:	f7ff fc4b 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80042ea:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80042ee:	4618      	mov	r0, r3
 80042f0:	f012 ff01 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					BLE_SEND(accu_response + "\r\n<--\r\n");
 80042f4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80042f8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80042fc:	4a98      	ldr	r2, [pc, #608]	; (8004560 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x748>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f008 fa86 	bl	800c810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8004304:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8004308:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800430c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004310:	4611      	mov	r1, r2
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	f001 f99e 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004318:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800431c:	4618      	mov	r0, r3
 800431e:	f012 feea 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

					uint32_t rec_loc = accu_response.find("+AWSSUBRECV");
 8004322:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004326:	2200      	movs	r2, #0
 8004328:	498e      	ldr	r1, [pc, #568]	; (8004564 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x74c>)
 800432a:	4618      	mov	r0, r3
 800432c:	f013 f974 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004330:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
					uint32_t ble_rec_loc = accu_response.find("BLEPRECV");
 8004334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004338:	2200      	movs	r2, #0
 800433a:	498b      	ldr	r1, [pc, #556]	; (8004568 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x750>)
 800433c:	4618      	mov	r0, r3
 800433e:	f013 f96b 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004342:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294

					if (rec_loc != not_found) {
 8004346:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d040      	beq.n	80043d2 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x5ba>
						uint32_t end_loc = accu_response.find('\n', rec_loc);
 8004350:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004354:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8004358:	210a      	movs	r1, #10
 800435a:	4618      	mov	r0, r3
 800435c:	f013 f96b 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8004360:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
						sub_resp = accu_response.substr(rec_loc, end_loc - rec_loc);
 8004364:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004368:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8004372:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8004376:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8004380:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004384:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8004388:	f013 fa54 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800438c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004390:	4619      	mov	r1, r3
 8004392:	4620      	mov	r0, r4
 8004394:	f012 febb 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004398:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800439c:	4618      	mov	r0, r3
 800439e:	f012 feaa 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
						debug.Print("\r\nSUB_RESP : " + sub_resp);
 80043a2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80043a6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043b0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80043b4:	496d      	ldr	r1, [pc, #436]	; (800456c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x754>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 f9b6 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80043bc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80043c0:	4619      	mov	r1, r3
 80043c2:	4865      	ldr	r0, [pc, #404]	; (8004558 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x740>)
 80043c4:	f7ff fbdc 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80043c8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80043cc:	4618      	mov	r0, r3
 80043ce:	f012 fe92 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					}

					if (ble_rec_loc != not_found) {
 80043d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d070      	beq.n	80044be <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6a6>
						uint32_t ble_end_loc = accu_response.find('\n', ble_rec_loc);
 80043dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043e0:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80043e4:	210a      	movs	r1, #10
 80043e6:	4618      	mov	r0, r3
 80043e8:	f013 f925 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80043ec:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c

						ble_temp = accu_response.substr(ble_rec_loc, ble_end_loc);
 80043f0:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80043f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80043f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80043fc:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004400:	f013 fa18 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004404:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f012 fe7d 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004414:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004418:	4618      	mov	r0, r3
 800441a:	f012 fe6c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
						uint32_t ble_data_loc = ble_temp.find_last_of(',');
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	4618      	mov	r0, r3
 800442a:	f013 f95a 	bl	80176e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEcj>
 800442e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
						if (ble_data_loc != not_found) {
 8004432:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d040      	beq.n	80044be <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6a6>
							ble_temp = ble_temp.substr(ble_data_loc + 1);
 800443c:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	f507 7015 	add.w	r0, r7, #596	; 0x254
 8004446:	f107 0114 	add.w	r1, r7, #20
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	f013 f9f1 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004452:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f012 fe56 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004462:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8004466:	4618      	mov	r0, r3
 8004468:	f012 fe45 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
							while (ble_temp.back() == '\n' || ble_temp.back() == '\r') {
 800446c:	e004      	b.n	8004478 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x660>
								ble_temp.pop_back();
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	4618      	mov	r0, r3
 8004474:	f012 ff0c 	bl	8017290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
							while (ble_temp.back() == '\n' || ble_temp.back() == '\r') {
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	4618      	mov	r0, r3
 800447e:	f012 febf 	bl	8017200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8004482:	4603      	mov	r3, r0
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b0a      	cmp	r3, #10
 8004488:	d008      	beq.n	800449c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x684>
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4618      	mov	r0, r3
 8004490:	f012 feb6 	bl	8017200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8004494:	4603      	mov	r3, r0
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b0d      	cmp	r3, #13
 800449a:	d101      	bne.n	80044a0 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x688>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x68a>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e3      	bne.n	800446e <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x656>
							}
							ble_resp = ble_temp;
 80044a6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044aa:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	334c      	adds	r3, #76	; 0x4c
 80044b2:	f107 0214 	add.w	r2, r7, #20
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f012 fe22 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
						}

					}
					refresh_counter();
 80044be:	f7ff f91d 	bl	80036fc <_Z15refresh_counterv>
					if (return_check == $EXPECTED_RESPONSE || return_check == $ex_resp_NULL) {
 80044c2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044c6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d009      	beq.n	80044ea <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6d2>
 80044d6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044da:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d101      	bne.n	80044ee <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6d6>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6d8>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x6f8>
						neo_control = $CONTINUE;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x758>)
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]
#if defined(neo_cont_print)
						debug.Print("\r\nneo_control = CONTINUE");
#endif

						return accu_response;
 80044fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80044fe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004502:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004506:	4611      	mov	r1, r2
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f012 fdda 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800450e:	e050      	b.n	80045b2 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x79a>
					} else
						if (return_check != $NO_RESPONSE || return_check != $ERROR_RESPONSE) {
 8004510:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004514:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b05      	cmp	r3, #5
 8004522:	d109      	bne.n	8004538 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x720>
 8004524:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004528:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b06      	cmp	r3, #6
 8004536:	d001      	beq.n	800453c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x724>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x726>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x764>
							if (try_count > 1) {
 8004542:	f8b7 32bc 	ldrh.w	r3, [r7, #700]	; 0x2bc
 8004546:	2b01      	cmp	r3, #1
 8004548:	d914      	bls.n	8004574 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x75c>
								neo_control = $REPEAT;
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x758>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e018      	b.n	8004584 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x76c>
 8004552:	bf00      	nop
 8004554:	08017e44 	.word	0x08017e44
 8004558:	20000184 	.word	0x20000184
 800455c:	08017e4c 	.word	0x08017e4c
 8004560:	08017e54 	.word	0x08017e54
 8004564:	08017e5c 	.word	0x08017e5c
 8004568:	08017e68 	.word	0x08017e68
 800456c:	08017e74 	.word	0x08017e74
 8004570:	20000000 	.word	0x20000000
#if defined(neo_cont_print)
								debug.Print("\r\nneo_control = REPEAT - NO/ERROR RESPONSE");
								BLE_SEND("\r\nREPEAT - NO/ERROR RESPONSE");
#endif
							} else {
								neo_control = $BREAK;
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x838>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e003      	b.n	8004584 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x76c>
								debug.Print("\r\nneo_control = BREAK1");
								BLE_SEND("\r\nBREAK1");
#endif
							}
						} else {
							neo_control = $BREAK;
 800457c:	4b34      	ldr	r3, [pc, #208]	; (8004650 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x838>)
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
#if defined(neo_cont_print)
							debug.Print("\r\nneo_control = BREAK2");
							BLE_SEND("\r\nBREAK2");
#endif
							break;
 8004582:	e00c      	b.n	800459e <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x786>
				while (try_count--) {
 8004584:	f8b7 32bc 	ldrh.w	r3, [r7, #700]	; 0x2bc
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	f8a7 22bc 	strh.w	r2, [r7, #700]	; 0x2bc
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f aca1 	bne.w	8003ee0 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0xc8>
						}
				}
				return accu_response;
 800459e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80045a2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045a6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80045aa:	4611      	mov	r1, r2
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f012 fd88 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
			} else {
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	4618      	mov	r0, r3
 80045b8:	f012 fd9d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80045bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045c0:	4618      	mov	r0, r3
 80045c2:	f012 fd98 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80045c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045ca:	4618      	mov	r0, r3
 80045cc:	f012 fd93 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80045d0:	e028      	b.n	8004624 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x80c>
				debug.Print("\r\n\t\tSKIPPING : " + command);
 80045d2:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 80045d6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045da:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	491c      	ldr	r1, [pc, #112]	; (8004654 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x83c>)
 80045e2:	f008 f8a1 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80045e6:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80045ea:	4619      	mov	r1, r3
 80045ec:	481a      	ldr	r0, [pc, #104]	; (8004658 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x840>)
 80045ee:	f7ff fac7 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80045f2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80045f6:	4618      	mov	r0, r3
 80045f8:	f012 fd7d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				return "";
 80045fc:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004600:	4618      	mov	r0, r3
 8004602:	f012 fc23 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004606:	f507 7221 	add.w	r2, r7, #644	; 0x284
 800460a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800460e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004612:	4912      	ldr	r1, [pc, #72]	; (800465c <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E+0x844>)
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f013 f8d5 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800461a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800461e:	4618      	mov	r0, r3
 8004620:	f012 fc16 	bl	8016e50 <_ZNSaIcED1Ev>
//				POWER_ON();
			}
		}
 8004624:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004628:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800462c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004630:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800463c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800464c:	b002      	add	sp, #8
 800464e:	4770      	bx	lr
 8004650:	20000000 	.word	0x20000000
 8004654:	08017e84 	.word	0x08017e84
 8004658:	20000184 	.word	0x20000184
 800465c:	08017e00 	.word	0x08017e00

08004660 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_>:

		void SEND_RECIEVE_POINTER(string command, initializer_list<uint32_t> timeout = { 0 }, uint16_t try_count = 1, initializer_list<string> ex_resp = { "OK", "", "" }, string &accu_response = (string&) "") {
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	b0fc      	sub	sp, #496	; 0x1f0
 8004664:	af00      	add	r7, sp, #0
 8004666:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 800466a:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 800466e:	6020      	str	r0, [r4, #0]
 8004670:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8004674:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 8004678:	6001      	str	r1, [r0, #0]
 800467a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800467e:	f5a1 71f8 	sub.w	r1, r1, #496	; 0x1f0
 8004682:	e881 000c 	stmia.w	r1, {r2, r3}

			if (neo_control == $CONTINUE) {
 8004686:	4ba8      	ldr	r3, [pc, #672]	; (8004928 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2c8>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 82a0 	beq.w	8004bdc <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x57c>
				refresh_counter();
 800469c:	f7ff f82e 	bl	80036fc <_Z15refresh_counterv>
				string response(5000, ' ');
 80046a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a4:	4618      	mov	r0, r3
 80046a6:	f012 fbd1 	bl	8016e4c <_ZNSaIcEC1Ev>
 80046aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ae:	f107 0010 	add.w	r0, r7, #16
 80046b2:	2220      	movs	r2, #32
 80046b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80046b8:	f012 fcfa 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80046bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c0:	4618      	mov	r0, r3
 80046c2:	f012 fbc5 	bl	8016e50 <_ZNSaIcED1Ev>
				accu_response.clear();
 80046c6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80046ca:	f012 fd7c 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
//				string response;
//				debug.Print("\r\nstring size : " + d_t_s(response.max_size()) + "\r\n");
				command.push_back(0x0D);
 80046ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80046d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046d6:	210d      	movs	r1, #13
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f012 fd96 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
				command.push_back(0x0A);
 80046de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80046e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046e6:	210a      	movs	r1, #10
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f012 fd8e 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>

				while (try_count--) {
 80046ee:	e262      	b.n	8004bb6 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x556>
					debug.Print("\r\n---->\r\n" + command + "\r\n---------- " + d_t_s(try_count) + "\r\n");
 80046f0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80046f4:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 80046f8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80046fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	498a      	ldr	r1, [pc, #552]	; (800492c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2cc>)
 8004704:	f008 f810 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8004708:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800470c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004710:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004714:	4a86      	ldr	r2, [pc, #536]	; (8004930 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2d0>)
 8004716:	4618      	mov	r0, r3
 8004718:	f008 fc4f 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800471c:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb feef 	bl	8000504 <__aeabi_ui2d>
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800472e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	ec45 4b10 	vmov	d0, r4, r5
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc fef4 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8004740:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004744:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004748:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800474c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004750:	4618      	mov	r0, r3
 8004752:	f008 f870 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8004756:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800475a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800475e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004762:	4a74      	ldr	r2, [pc, #464]	; (8004934 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2d4>)
 8004764:	4618      	mov	r0, r3
 8004766:	f008 fc28 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800476a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800476e:	4619      	mov	r1, r3
 8004770:	4871      	ldr	r0, [pc, #452]	; (8004938 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2d8>)
 8004772:	f7ff fa05 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800477a:	4618      	mov	r0, r3
 800477c:	f012 fcbb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004784:	4618      	mov	r0, r3
 8004786:	f012 fcb6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800478a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800478e:	4618      	mov	r0, r3
 8004790:	f012 fcb1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004794:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004798:	4618      	mov	r0, r3
 800479a:	f012 fcac 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800479e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047a2:	4618      	mov	r0, r3
 80047a4:	f012 fca7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					BLE_SEND("\r\n-->\r\n" + command + "\r\n---------- " + d_t_s(try_count) + "\r\n");
 80047a8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80047ac:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80047b0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80047b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4960      	ldr	r1, [pc, #384]	; (800493c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2dc>)
 80047bc:	f007 ffb4 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80047c0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80047c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047c8:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2d0>)
 80047ce:	4618      	mov	r0, r3
 80047d0:	f008 fbf3 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80047d4:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fb fe93 	bl	8000504 <__aeabi_ui2d>
 80047de:	4604      	mov	r4, r0
 80047e0:	460d      	mov	r5, r1
 80047e2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80047e6:	2200      	movs	r2, #0
 80047e8:	2100      	movs	r1, #0
 80047ea:	ec45 4b10 	vmov	d0, r4, r5
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fe9a 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80047f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80047f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80047fc:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8004800:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8004804:	4618      	mov	r0, r3
 8004806:	f008 f816 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800480a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800480e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004812:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8004816:	4a47      	ldr	r2, [pc, #284]	; (8004934 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2d4>)
 8004818:	4618      	mov	r0, r3
 800481a:	f008 fbce 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800481e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004822:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004826:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800482a:	4611      	mov	r1, r2
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f000 ff11 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004832:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004836:	4618      	mov	r0, r3
 8004838:	f012 fc5d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800483c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004840:	4618      	mov	r0, r3
 8004842:	f012 fc58 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004846:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800484a:	4618      	mov	r0, r3
 800484c:	f012 fc53 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004850:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004854:	4618      	mov	r0, r3
 8004856:	f012 fc4e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800485a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800485e:	4618      	mov	r0, r3
 8004860:	f012 fc49 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//					HAL_UART_DeInit(NEOUART);
					HAL_UART_Init(NEOUART);
 8004864:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004868:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f011 fd91 	bl	8016398 <HAL_UART_Init>
					HAL_UART_Transmit(NEOUART, (uint8_t*) command.c_str(), command.size(), UINT32_MAX - 1);
 8004876:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800487a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004886:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f012 fe88 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004890:	4605      	mov	r5, r0
 8004892:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004896:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f012 fc68 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80048a0:	4603      	mov	r3, r0
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f06f 0301 	mvn.w	r3, #1
 80048a8:	4629      	mov	r1, r5
 80048aa:	4620      	mov	r0, r4
 80048ac:	f011 fdc2 	bl	8016434 <HAL_UART_Transmit>
					uint32_t i = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

					for (; i < timeout.size(); i++) {
 80048b6:	e071      	b.n	800499c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x33c>
						response.clear();
 80048b8:	f107 0310 	add.w	r3, r7, #16
 80048bc:	4618      	mov	r0, r3
 80048be:	f012 fc82 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
						refresh_counter();
 80048c2:	f7fe ff1b 	bl	80036fc <_Z15refresh_counterv>
						HAL_UARTEx_ReceiveToIdle(NEOUART, response, (uint32_t) *(timeout.begin() + i));
 80048c6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681c      	ldr	r4, [r3, #0]
 80048d2:	463b      	mov	r3, r7
 80048d4:	4618      	mov	r0, r3
 80048d6:	f008 fb87 	bl	800cfe8 <_ZNKSt16initializer_listImE5beginEv>
 80048da:	4602      	mov	r2, r0
 80048dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f107 0310 	add.w	r3, r7, #16
 80048ea:	4619      	mov	r1, r3
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7fc ff97 	bl	8001820 <_Z24HAL_UARTEx_ReceiveToIdleP20__UART_HandleTypeDefRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
						refresh_counter();
 80048f2:	f7fe ff03 	bl	80036fc <_Z15refresh_counterv>
#if defined(neo_print_resp_size)
						debug.Print("< " + d_t_s(response.size()) + " > ");
#endif

						return_check = CHECK_RESPONSE(&response, i < ex_resp.size() ? (string*) (ex_resp.begin() + i) : NULL);
 80048f6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fa7f 	bl	8003dfe <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv>
 8004900:	4602      	mov	r2, r0
 8004902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004906:	4293      	cmp	r3, r2
 8004908:	d21a      	bcs.n	8004940 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2e0>
 800490a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800490e:	4618      	mov	r0, r3
 8004910:	f008 fb76 	bl	800d000 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>
 8004914:	4601      	mov	r1, r0
 8004916:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800491a:	4613      	mov	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	440b      	add	r3, r1
 8004924:	e00d      	b.n	8004942 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x2e2>
 8004926:	bf00      	nop
 8004928:	20000000 	.word	0x20000000
 800492c:	08017e1c 	.word	0x08017e1c
 8004930:	08017e28 	.word	0x08017e28
 8004934:	08017e38 	.word	0x08017e38
 8004938:	20000184 	.word	0x20000184
 800493c:	08017e3c 	.word	0x08017e3c
 8004940:	2300      	movs	r3, #0
 8004942:	f107 0110 	add.w	r1, r7, #16
 8004946:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800494a:	f5a2 70f2 	sub.w	r0, r2, #484	; 0x1e4
 800494e:	461a      	mov	r2, r3
 8004950:	6800      	ldr	r0, [r0, #0]
 8004952:	f000 f969 	bl	8004c28 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800495e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

						accu_response = accu_response + response;
 8004968:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800496c:	f107 0210 	add.w	r2, r7, #16
 8004970:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8004974:	4618      	mov	r0, r3
 8004976:	f008 fb4f 	bl	800d018 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
 800497a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800497e:	4619      	mov	r1, r3
 8004980:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8004984:	f012 fbc3 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004988:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800498c:	4618      	mov	r0, r3
 800498e:	f012 fbb2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					for (; i < timeout.size(); i++) {
 8004992:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004996:	3301      	adds	r3, #1
 8004998:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800499c:	463b      	mov	r3, r7
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fa21 	bl	8003de6 <_ZNKSt16initializer_listImE4sizeEv>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bf34      	ite	cc
 80049ae:	2301      	movcc	r3, #1
 80049b0:	2300      	movcs	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f47f af7f 	bne.w	80048b8 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x258>
					}

					if (return_check == $EXPECTED_RESPONSE) {
 80049ba:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80049be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03e      	beq.n	8004a56 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x3f6>
						debug.Print("\t{=}");
 80049d8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80049dc:	4618      	mov	r0, r3
 80049de:	f012 fa35 	bl	8016e4c <_ZNSaIcEC1Ev>
 80049e2:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80049e6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80049ea:	4989      	ldr	r1, [pc, #548]	; (8004c10 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b0>)
 80049ec:	4618      	mov	r0, r3
 80049ee:	f012 fee9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80049f2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80049f6:	4619      	mov	r1, r3
 80049f8:	4886      	ldr	r0, [pc, #536]	; (8004c14 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b4>)
 80049fa:	f7ff f8c1 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80049fe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004a02:	4618      	mov	r0, r3
 8004a04:	f012 fb77 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a08:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f012 fa1f 	bl	8016e50 <_ZNSaIcED1Ev>
						BLE_SEND("\t{=}");
 8004a12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a16:	4618      	mov	r0, r3
 8004a18:	f012 fa18 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004a1c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004a20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004a24:	497a      	ldr	r1, [pc, #488]	; (8004c10 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b0>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f012 fecc 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a2c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004a30:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004a34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a38:	4611      	mov	r1, r2
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	f000 fe0a 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004a40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004a44:	4618      	mov	r0, r3
 8004a46:	f012 fb56 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a4a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f012 f9fe 	bl	8016e50 <_ZNSaIcED1Ev>
 8004a54:	e03d      	b.n	8004ad2 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x472>
					} else {
						BLE_SEND("\t{!}");
 8004a56:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f012 f9f6 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004a60:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8004a64:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004a68:	496b      	ldr	r1, [pc, #428]	; (8004c18 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b8>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f012 feaa 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a70:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8004a74:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004a78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f000 fde8 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004a84:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f012 fb34 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a8e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004a92:	4618      	mov	r0, r3
 8004a94:	f012 f9dc 	bl	8016e50 <_ZNSaIcED1Ev>
						debug.Print("\t{!}");
 8004a98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f012 f9d5 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004aa2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004aa6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004aaa:	495b      	ldr	r1, [pc, #364]	; (8004c18 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b8>)
 8004aac:	4618      	mov	r0, r3
 8004aae:	f012 fe89 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ab2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4856      	ldr	r0, [pc, #344]	; (8004c14 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b4>)
 8004aba:	f7ff f861 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004abe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f012 fb17 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ac8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f012 f9bf 	bl	8016e50 <_ZNSaIcED1Ev>
					}

					debug.Print(accu_response + "\r\n<--\r\n");
 8004ad2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004ad6:	4a51      	ldr	r2, [pc, #324]	; (8004c1c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5bc>)
 8004ad8:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8004adc:	4618      	mov	r0, r3
 8004ade:	f007 fe97 	bl	800c810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8004ae2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	484a      	ldr	r0, [pc, #296]	; (8004c14 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b4>)
 8004aea:	f7ff f849 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004aee:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f012 faff 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					BLE_SEND(accu_response + "\r\n<--\r\n");
 8004af8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8004afc:	4a47      	ldr	r2, [pc, #284]	; (8004c1c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5bc>)
 8004afe:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8004b02:	4618      	mov	r0, r3
 8004b04:	f007 fe84 	bl	800c810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8004b08:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8004b0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b14:	4611      	mov	r1, r2
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	f000 fd9c 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004b1c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8004b20:	4618      	mov	r0, r3
 8004b22:	f012 fae8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					refresh_counter();
 8004b26:	f7fe fde9 	bl	80036fc <_Z15refresh_counterv>

					if (return_check == $EXPECTED_RESPONSE || return_check == $ex_resp_NULL) {
 8004b2a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b2e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d009      	beq.n	8004b52 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x4f2>
 8004b3e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b42:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d101      	bne.n	8004b56 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x4f6>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x4f8>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x504>
						neo_control = $CONTINUE;
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5c0>)
 8004b5e:	2202      	movs	r2, #2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e028      	b.n	8004bb6 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x556>
#if defined(neo_cont_print)
						debug.Print("\r\nneo_control = CONTINUE");
#endif

					} else
						if (return_check != $NO_RESPONSE || return_check != $ERROR_RESPONSE) {
 8004b64:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d109      	bne.n	8004b8c <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x52c>
 8004b78:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d001      	beq.n	8004b90 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x530>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x532>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x54e>
							if (try_count > 1) {
 8004b96:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d903      	bls.n	8004ba6 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x546>
								neo_control = $REPEAT;
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5c0>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e007      	b.n	8004bb6 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x556>
#if defined(neo_cont_print)
								debug.Print("\r\nneo_control = REPEAT - NO/ERROR RESPONSE");
								BLE_SEND("\r\nREPEAT - NO/ERROR RESPONSE");
#endif
							} else {
								neo_control = $BREAK;
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5c0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e003      	b.n	8004bb6 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x556>
								debug.Print("\r\nneo_control = BREAK1");
								BLE_SEND("\r\nBREAK1");
#endif
							}
						} else {
							neo_control = $BREAK;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5c0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
#if defined(neo_cont_print)
							debug.Print("\r\nneo_control = BREAK2");
							BLE_SEND("\r\nBREAK2");
#endif
							break;
 8004bb4:	e00c      	b.n	8004bd0 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x570>
				while (try_count--) {
 8004bb6:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8004bba:	1e5a      	subs	r2, r3, #1
 8004bbc:	f8a7 2200 	strh.w	r2, [r7, #512]	; 0x200
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f47f ad90 	bne.w	80046f0 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x90>
						}
				}
			} else {
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f012 fa8e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				debug.Print("\r\n\t\tSKIPPING : " + command);
//				POWER_ON();
			}
		}
 8004bda:	e014      	b.n	8004c06 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5a6>
				debug.Print("\r\n\t\tSKIPPING : " + command);
 8004bdc:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8004be0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004be4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5c4>)
 8004bec:	f007 fd9c 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8004bf0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4807      	ldr	r0, [pc, #28]	; (8004c14 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_+0x5b4>)
 8004bf8:	f7fe ffc2 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004bfc:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004c00:	4618      	mov	r0, r3
 8004c02:	f012 fa78 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
 8004c06:	bf00      	nop
 8004c08:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c10:	08017e44 	.word	0x08017e44
 8004c14:	20000184 	.word	0x20000184
 8004c18:	08017e4c 	.word	0x08017e4c
 8004c1c:	08017e54 	.word	0x08017e54
 8004c20:	20000000 	.word	0x20000000
 8004c24:	08017e84 	.word	0x08017e84

08004c28 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:
		 * @detail as per ex_response and response being fed to input Possible NEOWAY_RETURN response are being returned.
		 * @param [in] response base address of Response variable which stores string data being received from NEOWAY module through NEOART.
		 * @param [in] ex_resp base address of Ex_Response list which stores expected responses.
		 * @return NEOWAY_RETURN a NEOWAY_RETURN enum designating NEOWAY Return status.
		 */
		NEOWAY_RETURN CHECK_RESPONSE(string *response, string *ex_resp) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
			if (ex_resp == NULL) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x16>
				return $EXPECTED_RESPONSE;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e063      	b.n	8004d06 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xde>
			} else
				if (response->find(ex_resp->c_str()) < not_found || *ex_resp == "") {
 8004c3e:	68bc      	ldr	r4, [r7, #8]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f012 fcad 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f012 fce3 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d106      	bne.n	8004c68 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x40>
 8004c5a:	492d      	ldr	r1, [pc, #180]	; (8004d10 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xe8>)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f008 f9ee 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x44>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x46>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d048      	beq.n	8004d04 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xdc>
					if (response->find(ex_resp->c_str()) < not_found || *ex_resp == "") {
 8004c72:	68bc      	ldr	r4, [r7, #8]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f012 fc93 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	f012 fcc9 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d106      	bne.n	8004c9c <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x74>
 8004c8e:	4920      	ldr	r1, [pc, #128]	; (8004d10 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xe8>)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f008 f9d4 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x78>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7a>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x82>
						return $EXPECTED_RESPONSE;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e02d      	b.n	8004d06 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xde>
					} else
						if (response->find("ERROR") == not_found) {
 8004caa:	2200      	movs	r2, #0
 8004cac:	4919      	ldr	r1, [pc, #100]	; (8004d14 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xec>)
 8004cae:	68b8      	ldr	r0, [r7, #8]
 8004cb0:	f012 fcb2 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01e      	beq.n	8004d04 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xdc>
							if (response->find("ERROR") == not_found) {
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4912      	ldr	r1, [pc, #72]	; (8004d14 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xec>)
 8004cca:	68b8      	ldr	r0, [r7, #8]
 8004ccc:	f012 fca4 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xbe>
								return $ERROR_RESPONSE;
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	e00f      	b.n	8004d06 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xde>
							} else
								if (response->size() == 0) {
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f012 fa42 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xd8>
									return $NO_RESPONSE;
 8004cfc:	2305      	movs	r3, #5
 8004cfe:	e002      	b.n	8004d06 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xde>
								} else {
									return $N_ERROR;
 8004d00:	2307      	movs	r3, #7
 8004d02:	e000      	b.n	8004d06 <_ZN6NEOWAY14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xde>
								}
							HAL_Delay(1);
						}
				}
			return $N_ERROR;
 8004d04:	2307      	movs	r3, #7
		}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08017e00 	.word	0x08017e00
 8004d14:	08017e94 	.word	0x08017e94

08004d18 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
		 */
		void SET_meta_pub_topic(const string &meta_pub_topic = "") {
			this->meta_pub_topic = meta_pub_topic;
		}

		void BLE_NAME(string ws_name) {
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b0c2      	sub	sp, #264	; 0x108
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
			string ble_name = "CWS_" + ws_name;
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4967      	ldr	r1, [pc, #412]	; (8004ec8 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f007 fcfc 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
			SEND_RECIEVE("AT+NWBTBLENAME?", { 2000 }, 1, { ble_name });
 8004d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d34:	4618      	mov	r0, r3
 8004d36:	f012 f889 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004d3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d42:	4962      	ldr	r1, [pc, #392]	; (8004ecc <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b4>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f012 fd3d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004d4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004d54:	657b      	str	r3, [r7, #84]	; 0x54
 8004d56:	2301      	movs	r3, #1
 8004d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d5a:	f107 0208 	add.w	r2, r7, #8
 8004d5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f012 fcf9 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004d6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d70:	2301      	movs	r3, #1
 8004d72:	667b      	str	r3, [r7, #100]	; 0x64
 8004d74:	f107 0420 	add.w	r4, r7, #32
 8004d78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d7c:	ad02      	add	r5, sp, #8
 8004d7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004d82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff f83e 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8004d9c:	f107 0320 	add.w	r3, r7, #32
 8004da0:	4618      	mov	r0, r3
 8004da2:	f012 f9a8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004da6:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004daa:	3418      	adds	r4, #24
 8004dac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004db0:	429c      	cmp	r4, r3
 8004db2:	d004      	beq.n	8004dbe <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
 8004db4:	3c18      	subs	r4, #24
 8004db6:	4620      	mov	r0, r4
 8004db8:	f012 f99d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004dbc:	e7f6      	b.n	8004dac <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 8004dbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f012 f997 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004dc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f012 f83f 	bl	8016e50 <_ZNSaIcED1Ev>
			if (neo_control != $CONTINUE) {
 8004dd2:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d067      	beq.n	8004eb6 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19e>
				neo_control = $CONTINUE;
 8004de6:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 8004de8:	2202      	movs	r2, #2
 8004dea:	701a      	strb	r2, [r3, #0]
				SEND_RECIEVE("AT+NWBTBLENAME=\"" + ble_name + "\"", { 2000 }, 1, { "OK" });
 8004dec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	4937      	ldr	r1, [pc, #220]	; (8004ed4 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f007 fc96 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8004dfc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004e00:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8004e04:	4a34      	ldr	r2, [pc, #208]	; (8004ed8 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c0>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f008 f8d7 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8004e0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e14:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f012 f810 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004e2c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8004e30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e34:	4929      	ldr	r1, [pc, #164]	; (8004edc <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c4>)
 8004e36:	4618      	mov	r0, r3
 8004e38:	f012 fcc4 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e44:	2301      	movs	r3, #1
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e4a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8004e4e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004e52:	ad02      	add	r5, sp, #8
 8004e54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e60:	2301      	movs	r3, #1
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fe ffd1 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8004e76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f012 f93b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e80:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8004e84:	3418      	adds	r4, #24
 8004e86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e8a:	429c      	cmp	r4, r3
 8004e8c:	d004      	beq.n	8004e98 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
 8004e8e:	3c18      	subs	r4, #24
 8004e90:	4620      	mov	r0, r4
 8004e92:	f012 f930 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e96:	e7f6      	b.n	8004e86 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
 8004e98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f011 ffd7 	bl	8016e50 <_ZNSaIcED1Ev>
 8004ea2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f012 f925 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004eac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f012 f920 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}
		}
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f012 f91b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ec0:	37f8      	adds	r7, #248	; 0xf8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08017e9c 	.word	0x08017e9c
 8004ecc:	08017ea4 	.word	0x08017ea4
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	08017eb4 	.word	0x08017eb4
 8004ed8:	08017ec8 	.word	0x08017ec8
 8004edc:	08017ecc 	.word	0x08017ecc

08004ee0 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

		void BLE_SETUP(string ws_name) {
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8004ee6:	af04      	add	r7, sp, #16
 8004ee8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004eec:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004ef0:	6018      	str	r0, [r3, #0]
 8004ef2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004ef6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8004efa:	6019      	str	r1, [r3, #0]
			save_ble_print(1);
 8004efc:	2001      	movs	r0, #1
 8004efe:	f7fe fd77 	bl	80039f0 <_Z14save_ble_printb>
			BLE_NAME(ws_name);
 8004f02:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004f06:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8004f0a:	f107 020c 	add.w	r2, r7, #12
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	4610      	mov	r0, r2
 8004f12:	f012 fc23 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f16:	f107 020c 	add.w	r2, r7, #12
 8004f1a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004f1e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004f22:	4611      	mov	r1, r2
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f7ff fef7 	bl	8004d18 <_ZN6NEOWAY8BLE_NAMEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f012 f8e1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			SEND_RECIEVE("AT+NWBTBLEPWR=1", { 1 * ms_s, 2 * ms_s }, 1, { "OK", "" });
 8004f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f011 ff87 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004f3e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f46:	49d4      	ldr	r1, [pc, #848]	; (8005298 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b8>)
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f012 fc3b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004f4e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004f52:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004f56:	4ad1      	ldr	r2, [pc, #836]	; (800529c <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3bc>)
 8004f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f60:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004f64:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004f68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004f72:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004f76:	2202      	movs	r2, #2
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f011 ff64 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004f84:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004f88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004f8c:	49c4      	ldr	r1, [pc, #784]	; (80052a0 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c0>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f012 fc18 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004f94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f011 ff57 	bl	8016e4c <_ZNSaIcEC1Ev>
 8004f9e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004fa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	49be      	ldr	r1, [pc, #760]	; (80052a4 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c4>)
 8004faa:	4618      	mov	r0, r3
 8004fac:	f012 fc0a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004fb0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fb4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8004fb8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fc2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fce:	f5a3 7513 	sub.w	r5, r3, #588	; 0x24c
 8004fd2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fd6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004fda:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8004fde:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8004fe2:	f5a2 741b 	sub.w	r4, r2, #620	; 0x26c
 8004fe6:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8004fea:	f5a2 7102 	sub.w	r1, r2, #520	; 0x208
 8004fee:	aa02      	add	r2, sp, #8
 8004ff0:	c903      	ldmia	r1, {r0, r1}
 8004ff2:	e882 0003 	stmia.w	r2, {r0, r1}
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	9201      	str	r2, [sp, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	9200      	str	r2, [sp, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4632      	mov	r2, r6
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	4628      	mov	r0, r5
 8005006:	f7fe ff07 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500e:	4618      	mov	r0, r3
 8005010:	f012 f871 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005014:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005018:	3430      	adds	r4, #48	; 0x30
 800501a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800501e:	429c      	cmp	r4, r3
 8005020:	d004      	beq.n	800502c <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
 8005022:	3c18      	subs	r4, #24
 8005024:	4620      	mov	r0, r4
 8005026:	f012 f866 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800502a:	e7f6      	b.n	800501a <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13a>
 800502c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005030:	4618      	mov	r0, r3
 8005032:	f011 ff0d 	bl	8016e50 <_ZNSaIcED1Ev>
 8005036:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800503a:	4618      	mov	r0, r3
 800503c:	f011 ff08 	bl	8016e50 <_ZNSaIcED1Ev>
 8005040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005044:	4618      	mov	r0, r3
 8005046:	f012 f856 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800504a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800504e:	4618      	mov	r0, r3
 8005050:	f011 fefe 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+NWBLEDISCON?", { 1 * ms_s }, 1, { "NWBLEDISCON:\r\n1" });
 8005054:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005058:	4618      	mov	r0, r3
 800505a:	f011 fef7 	bl	8016e4c <_ZNSaIcEC1Ev>
 800505e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8005062:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005066:	4990      	ldr	r1, [pc, #576]	; (80052a8 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c8>)
 8005068:	4618      	mov	r0, r3
 800506a:	f012 fbab 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800506e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005072:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005080:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005084:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800508e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005092:	2201      	movs	r2, #1
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	4618      	mov	r0, r3
 800509c:	f011 fed6 	bl	8016e4c <_ZNSaIcEC1Ev>
 80050a0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80050a4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050a8:	4980      	ldr	r1, [pc, #512]	; (80052ac <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3cc>)
 80050aa:	4618      	mov	r0, r3
 80050ac:	f012 fb8a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80050b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80050b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80050b8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80050c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80050c6:	2201      	movs	r2, #1
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80050ce:	f5a3 75e4 	sub.w	r5, r3, #456	; 0x1c8
 80050d2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80050d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80050da:	f107 06c0 	add.w	r6, r7, #192	; 0xc0
 80050de:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80050e2:	f5a2 741b 	sub.w	r4, r2, #620	; 0x26c
 80050e6:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80050ea:	f5a2 71c4 	sub.w	r1, r2, #392	; 0x188
 80050ee:	aa02      	add	r2, sp, #8
 80050f0:	c903      	ldmia	r1, {r0, r1}
 80050f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80050f6:	2201      	movs	r2, #1
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	9200      	str	r2, [sp, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4632      	mov	r2, r6
 8005102:	6821      	ldr	r1, [r4, #0]
 8005104:	4628      	mov	r0, r5
 8005106:	f7fe fe87 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800510a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800510e:	4618      	mov	r0, r3
 8005110:	f011 fff1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005114:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8005118:	3418      	adds	r4, #24
 800511a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800511e:	429c      	cmp	r4, r3
 8005120:	d004      	beq.n	800512c <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>
 8005122:	3c18      	subs	r4, #24
 8005124:	4620      	mov	r0, r4
 8005126:	f011 ffe6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800512a:	e7f6      	b.n	800511a <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23a>
 800512c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005130:	4618      	mov	r0, r3
 8005132:	f011 fe8d 	bl	8016e50 <_ZNSaIcED1Ev>
 8005136:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800513a:	4618      	mov	r0, r3
 800513c:	f011 ffdb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005140:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005144:	4618      	mov	r0, r3
 8005146:	f011 fe83 	bl	8016e50 <_ZNSaIcED1Ev>
			if (neo_control == $CONTINUE) {
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02c      	beq.n	80051b8 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d8>
				ble_init = 1;
 800515e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005162:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				delay(1 * us_s);
 800516e:	4851      	ldr	r0, [pc, #324]	; (80052b4 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d4>)
 8005170:	f7fe fa9c 	bl	80036ac <_Z5delaym>
				BLE_SEND("Connected");
 8005174:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005178:	4618      	mov	r0, r3
 800517a:	f011 fe67 	bl	8016e4c <_ZNSaIcEC1Ev>
 800517e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8005182:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005186:	494c      	ldr	r1, [pc, #304]	; (80052b8 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d8>)
 8005188:	4618      	mov	r0, r3
 800518a:	f012 fb1b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800518e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8005192:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005196:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800519a:	4611      	mov	r1, r2
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	f000 fa59 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80051a2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f011 ffa5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80051ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80051b0:	4618      	mov	r0, r3
 80051b2:	f011 fe4d 	bl	8016e50 <_ZNSaIcED1Ev>
 80051b6:	e196      	b.n	80054e6 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x606>
			} else {
				neo_control = $CONTINUE;
 80051b8:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d0>)
 80051ba:	2202      	movs	r2, #2
 80051bc:	701a      	strb	r2, [r3, #0]
				SEND_RECIEVE("", { 5 * ms_s }, 1, { "" });
 80051be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80051c2:	4618      	mov	r0, r3
 80051c4:	f011 fe42 	bl	8016e4c <_ZNSaIcEC1Ev>
 80051c8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80051cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80051d0:	4934      	ldr	r1, [pc, #208]	; (80052a4 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c4>)
 80051d2:	4618      	mov	r0, r3
 80051d4:	f012 faf6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80051d8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80051dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80051ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051ee:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80051f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051fc:	2201      	movs	r2, #1
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005204:	4618      	mov	r0, r3
 8005206:	f011 fe21 	bl	8016e4c <_ZNSaIcEC1Ev>
 800520a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800520e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005212:	4924      	ldr	r1, [pc, #144]	; (80052a4 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c4>)
 8005214:	4618      	mov	r0, r3
 8005216:	f012 fad5 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800521a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005222:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005230:	2201      	movs	r2, #1
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005238:	f5a3 75a4 	sub.w	r5, r3, #328	; 0x148
 800523c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005240:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005244:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8005248:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800524c:	f5a2 741b 	sub.w	r4, r2, #620	; 0x26c
 8005250:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8005254:	f5a2 7184 	sub.w	r1, r2, #264	; 0x108
 8005258:	aa02      	add	r2, sp, #8
 800525a:	c903      	ldmia	r1, {r0, r1}
 800525c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005260:	2201      	movs	r2, #1
 8005262:	9201      	str	r2, [sp, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4632      	mov	r2, r6
 800526c:	6821      	ldr	r1, [r4, #0]
 800526e:	4628      	mov	r0, r5
 8005270:	f7fe fdd2 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005274:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005278:	4618      	mov	r0, r3
 800527a:	f011 ff3c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800527e:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8005282:	3418      	adds	r4, #24
 8005284:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005288:	429c      	cmp	r4, r3
 800528a:	d017      	beq.n	80052bc <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3dc>
 800528c:	3c18      	subs	r4, #24
 800528e:	4620      	mov	r0, r4
 8005290:	f011 ff31 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005294:	e7f6      	b.n	8005284 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a4>
 8005296:	bf00      	nop
 8005298:	08017ed0 	.word	0x08017ed0
 800529c:	08017f1c 	.word	0x08017f1c
 80052a0:	08017ecc 	.word	0x08017ecc
 80052a4:	08017e00 	.word	0x08017e00
 80052a8:	08017ee0 	.word	0x08017ee0
 80052ac:	08017ef0 	.word	0x08017ef0
 80052b0:	20000000 	.word	0x20000000
 80052b4:	000f4240 	.word	0x000f4240
 80052b8:	08017f00 	.word	0x08017f00
 80052bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80052c0:	4618      	mov	r0, r3
 80052c2:	f011 fdc5 	bl	8016e50 <_ZNSaIcED1Ev>
 80052c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052ca:	4618      	mov	r0, r3
 80052cc:	f011 ff13 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80052d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80052d4:	4618      	mov	r0, r3
 80052d6:	f011 fdbb 	bl	8016e50 <_ZNSaIcED1Ev>
				SEND_RECIEVE("AT+NWBLEDISCON?", { 1 * ms_s }, 1, { "NWBLEDISCON:\r\n1" });
 80052da:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80052de:	4618      	mov	r0, r3
 80052e0:	f011 fdb4 	bl	8016e4c <_ZNSaIcEC1Ev>
 80052e4:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80052e8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80052ec:	4983      	ldr	r1, [pc, #524]	; (80054fc <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x61c>)
 80052ee:	4618      	mov	r0, r3
 80052f0:	f012 fa68 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80052f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80052fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005300:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005304:	2301      	movs	r3, #1
 8005306:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800530a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800530e:	4618      	mov	r0, r3
 8005310:	f011 fd9c 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005314:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8005318:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800531c:	4978      	ldr	r1, [pc, #480]	; (8005500 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x620>)
 800531e:	4618      	mov	r0, r3
 8005320:	f012 fa50 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005324:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8005328:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800532c:	2301      	movs	r3, #1
 800532e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005332:	f507 75c6 	add.w	r5, r7, #396	; 0x18c
 8005336:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800533a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800533e:	f5a3 741b 	sub.w	r4, r3, #620	; 0x26c
 8005342:	ae02      	add	r6, sp, #8
 8005344:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005348:	e893 0003 	ldmia.w	r3, {r0, r1}
 800534c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005350:	2301      	movs	r3, #1
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800535e:	6821      	ldr	r1, [r4, #0]
 8005360:	4628      	mov	r0, r5
 8005362:	f7fe fd59 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005366:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800536a:	4618      	mov	r0, r3
 800536c:	f011 fec3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005370:	f507 74ea 	add.w	r4, r7, #468	; 0x1d4
 8005374:	3418      	adds	r4, #24
 8005376:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800537a:	429c      	cmp	r4, r3
 800537c:	d004      	beq.n	8005388 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a8>
 800537e:	3c18      	subs	r4, #24
 8005380:	4620      	mov	r0, r4
 8005382:	f011 feb8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005386:	e7f6      	b.n	8005376 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x496>
 8005388:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800538c:	4618      	mov	r0, r3
 800538e:	f011 fd5f 	bl	8016e50 <_ZNSaIcED1Ev>
 8005392:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8005396:	4618      	mov	r0, r3
 8005398:	f011 fead 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800539c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80053a0:	4618      	mov	r0, r3
 80053a2:	f011 fd55 	bl	8016e50 <_ZNSaIcED1Ev>
				if (neo_control == $CONTINUE) {
 80053a6:	4b57      	ldr	r3, [pc, #348]	; (8005504 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x624>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d02c      	beq.n	8005414 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x534>
					ble_init = 1;
 80053ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80053be:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
					delay(1 * us_s);
 80053ca:	484f      	ldr	r0, [pc, #316]	; (8005508 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x628>)
 80053cc:	f7fe f96e 	bl	80036ac <_Z5delaym>
					BLE_SEND("Connected");
 80053d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d4:	4618      	mov	r0, r3
 80053d6:	f011 fd39 	bl	8016e4c <_ZNSaIcEC1Ev>
 80053da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80053e2:	494a      	ldr	r1, [pc, #296]	; (800550c <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62c>)
 80053e4:	4618      	mov	r0, r3
 80053e6:	f012 f9ed 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80053ea:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80053ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80053f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80053f6:	4611      	mov	r1, r2
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f000 f92b 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80053fe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005402:	4618      	mov	r0, r3
 8005404:	f011 fe77 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800540c:	4618      	mov	r0, r3
 800540e:	f011 fd1f 	bl	8016e50 <_ZNSaIcED1Ev>
 8005412:	e068      	b.n	80054e6 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x606>
				} else {
					neo_control = $CONTINUE;
 8005414:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x624>)
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
					SEND_RECIEVE("AT+NWBTBLEPWR=0", { 5000 }, 2, { "OK" });
 800541a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800541e:	4618      	mov	r0, r3
 8005420:	f011 fd14 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005424:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8005428:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800542c:	4938      	ldr	r1, [pc, #224]	; (8005510 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x630>)
 800542e:	4618      	mov	r0, r3
 8005430:	f012 f9c8 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005434:	f241 3388 	movw	r3, #5000	; 0x1388
 8005438:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800543c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005440:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8005444:	2301      	movs	r3, #1
 8005446:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800544a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800544e:	4618      	mov	r0, r3
 8005450:	f011 fcfc 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005454:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8005458:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800545c:	492d      	ldr	r1, [pc, #180]	; (8005514 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x634>)
 800545e:	4618      	mov	r0, r3
 8005460:	f012 f9b0 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005464:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8005468:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800546c:	2301      	movs	r3, #1
 800546e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8005472:	f507 7503 	add.w	r5, r7, #524	; 0x20c
 8005476:	f507 7209 	add.w	r2, r7, #548	; 0x224
 800547a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800547e:	f5a3 741b 	sub.w	r4, r3, #620	; 0x26c
 8005482:	ae02      	add	r6, sp, #8
 8005484:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8005488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800548c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005490:	2302      	movs	r3, #2
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800549e:	6821      	ldr	r1, [r4, #0]
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7fe fcb9 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80054a6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80054aa:	4618      	mov	r0, r3
 80054ac:	f011 fe23 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80054b0:	f507 7415 	add.w	r4, r7, #596	; 0x254
 80054b4:	3418      	adds	r4, #24
 80054b6:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d004      	beq.n	80054c8 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e8>
 80054be:	3c18      	subs	r4, #24
 80054c0:	4620      	mov	r0, r4
 80054c2:	f011 fe18 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80054c6:	e7f6      	b.n	80054b6 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5d6>
 80054c8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80054cc:	4618      	mov	r0, r3
 80054ce:	f011 fcbf 	bl	8016e50 <_ZNSaIcED1Ev>
 80054d2:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80054d6:	4618      	mov	r0, r3
 80054d8:	f011 fe0d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80054dc:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80054e0:	4618      	mov	r0, r3
 80054e2:	f011 fcb5 	bl	8016e50 <_ZNSaIcED1Ev>

				}
			}
			restore_ble_print();
 80054e6:	f7fe fa99 	bl	8003a1c <_Z17restore_ble_printv>
			neo_control = $CONTINUE;
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x624>)
 80054ec:	2202      	movs	r2, #2
 80054ee:	701a      	strb	r2, [r3, #0]
		}
 80054f0:	bf00      	nop
 80054f2:	f507 771d 	add.w	r7, r7, #628	; 0x274
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08017ee0 	.word	0x08017ee0
 8005500:	08017ef0 	.word	0x08017ef0
 8005504:	20000000 	.word	0x20000000
 8005508:	000f4240 	.word	0x000f4240
 800550c:	08017f00 	.word	0x08017f00
 8005510:	08017f0c 	.word	0x08017f0c
 8005514:	08017ecc 	.word	0x08017ecc

08005518 <_ZN6NEOWAY8BLE_READB5cxx11Em>:

		string BLE_READ(uint32_t timeout = 5000) {
 8005518:	b5b0      	push	{r4, r5, r7, lr}
 800551a:	b0a2      	sub	sp, #136	; 0x88
 800551c:	af04      	add	r7, sp, #16
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
			if (ble_init == 1 && ble_cont == $CONTINUE && is_ble_print()) {
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10b      	bne.n	8005548 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x30>
 8005530:	4b45      	ldr	r3, [pc, #276]	; (8005648 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x130>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d106      	bne.n	8005548 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x30>
 800553a:	f7fe fa4d 	bl	80039d8 <_Z12is_ble_printv>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x30>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <_ZN6NEOWAY8BLE_READB5cxx11Em+0x32>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d073      	beq.n	8005636 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x11e>
				LOOP_CONT neo_control_temp = neo_control;
 800554e:	4b3f      	ldr	r3, [pc, #252]	; (800564c <_ZN6NEOWAY8BLE_READB5cxx11Em+0x134>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				save_both_print(0);
 8005556:	2000      	movs	r0, #0
 8005558:	f7fe faaa 	bl	8003ab0 <_Z15save_both_printb>
				NEOWAY_RETURN return_check_temp = return_check;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005562:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				neo_control = $CONTINUE;
 8005566:	4b39      	ldr	r3, [pc, #228]	; (800564c <_ZN6NEOWAY8BLE_READB5cxx11Em+0x134>)
 8005568:	2202      	movs	r2, #2
 800556a:	701a      	strb	r2, [r3, #0]

				SEND_RECIEVE("", { timeout }, 1, { "" });
 800556c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005570:	4618      	mov	r0, r3
 8005572:	f011 fc6b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005576:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800557a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800557e:	4934      	ldr	r1, [pc, #208]	; (8005650 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x138>)
 8005580:	4618      	mov	r0, r3
 8005582:	f012 f91f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	653b      	str	r3, [r7, #80]	; 0x50
 800558a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800558e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005590:	2301      	movs	r3, #1
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005594:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005598:	4618      	mov	r0, r3
 800559a:	f011 fc57 	bl	8016e4c <_ZNSaIcEC1Ev>
 800559e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80055a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80055a6:	492a      	ldr	r1, [pc, #168]	; (8005650 <_ZN6NEOWAY8BLE_READB5cxx11Em+0x138>)
 80055a8:	4618      	mov	r0, r3
 80055aa:	f012 f90b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80055ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80055b2:	657b      	str	r3, [r7, #84]	; 0x54
 80055b4:	2301      	movs	r3, #1
 80055b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b8:	f107 0414 	add.w	r4, r7, #20
 80055bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80055c0:	ad02      	add	r5, sp, #8
 80055c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80055ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ce:	2301      	movs	r3, #1
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4620      	mov	r0, r4
 80055dc:	f7fe fc1c 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4618      	mov	r0, r3
 80055e6:	f011 fd86 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80055ea:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80055ee:	3418      	adds	r4, #24
 80055f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d004      	beq.n	8005602 <_ZN6NEOWAY8BLE_READB5cxx11Em+0xea>
 80055f8:	3c18      	subs	r4, #24
 80055fa:	4620      	mov	r0, r4
 80055fc:	f011 fd7b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005600:	e7f6      	b.n	80055f0 <_ZN6NEOWAY8BLE_READB5cxx11Em+0xd8>
 8005602:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005606:	4618      	mov	r0, r3
 8005608:	f011 fc22 	bl	8016e50 <_ZNSaIcED1Ev>
 800560c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005610:	4618      	mov	r0, r3
 8005612:	f011 fd70 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005616:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800561a:	4618      	mov	r0, r3
 800561c:	f011 fc18 	bl	8016e50 <_ZNSaIcED1Ev>

				neo_control = neo_control_temp;
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <_ZN6NEOWAY8BLE_READB5cxx11Em+0x134>)
 8005622:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005626:	7013      	strb	r3, [r2, #0]
				return_check = return_check_temp;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800562e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				restore_both_print();
 8005632:	f7fe fa4e 	bl	8003ad2 <_Z18restore_both_printv>
			}
			return GET_BLE_RESP();
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fbbe 	bl	8003dbc <_ZN6NEOWAY12GET_BLE_RESPB5cxx11Ev>
		}
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	3778      	adds	r7, #120	; 0x78
 8005644:	46bd      	mov	sp, r7
 8005646:	bdb0      	pop	{r4, r5, r7, pc}
 8005648:	20000003 	.word	0x20000003
 800564c:	20000000 	.word	0x20000000
 8005650:	08017e00 	.word	0x08017e00

08005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

		void BLE_SEND(string send_string) {
 8005654:	b5b0      	push	{r4, r5, r7, lr}
 8005656:	b0c4      	sub	sp, #272	; 0x110
 8005658:	af04      	add	r7, sp, #16
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005660:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005664:	6019      	str	r1, [r3, #0]
			if (ble_init == 1 && sending_ble == 0 && ble_cont == $CONTINUE && is_ble_print()) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d111      	bne.n	8005696 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 800567e:	4b89      	ldr	r3, [pc, #548]	; (80058a4 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x250>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d106      	bne.n	8005696 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 8005688:	f7fe f9a6 	bl	80039d8 <_Z12is_ble_printv>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80fe 	beq.w	800589a <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x246>
				LOOP_CONT neo_control_temp = neo_control;
 800569e:	4b82      	ldr	r3, [pc, #520]	; (80058a8 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x254>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				sending_ble = 1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				save_both_print(0);
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fe f9fe 	bl	8003ab0 <_Z15save_both_printb>
				neo_control = $CONTINUE;
 80056b4:	4b7c      	ldr	r3, [pc, #496]	; (80058a8 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x254>)
 80056b6:	2202      	movs	r2, #2
 80056b8:	701a      	strb	r2, [r3, #0]
				NEOWAY_RETURN return_check_temp = return_check;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80056c0:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
				SEND_RECIEVE("AT+NWBLEPSEND=0,0,0,1," + d_t_s(send_string.size(), 0), { 500 }, 1, { ">" });
 80056c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80056c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	f011 fd4f 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fa ff15 	bl	8000504 <__aeabi_ui2d>
 80056da:	4604      	mov	r4, r0
 80056dc:	460d      	mov	r5, r1
 80056de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056e2:	2200      	movs	r2, #0
 80056e4:	2100      	movs	r1, #0
 80056e6:	ec45 4b10 	vmov	d0, r4, r5
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb ff1c 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80056f0:	f107 0320 	add.w	r3, r7, #32
 80056f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056f8:	496c      	ldr	r1, [pc, #432]	; (80058ac <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x258>)
 80056fa:	4618      	mov	r0, r3
 80056fc:	f007 f916 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8005700:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005704:	65bb      	str	r3, [r7, #88]	; 0x58
 8005706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
 800570c:	2301      	movs	r3, #1
 800570e:	657b      	str	r3, [r7, #84]	; 0x54
 8005710:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005714:	4618      	mov	r0, r3
 8005716:	f011 fb99 	bl	8016e4c <_ZNSaIcEC1Ev>
 800571a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800571e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005722:	4963      	ldr	r1, [pc, #396]	; (80058b0 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x25c>)
 8005724:	4618      	mov	r0, r3
 8005726:	f012 f84d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800572a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800572e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005730:	2301      	movs	r3, #1
 8005732:	663b      	str	r3, [r7, #96]	; 0x60
 8005734:	f107 0408 	add.w	r4, r7, #8
 8005738:	f107 0220 	add.w	r2, r7, #32
 800573c:	ad02      	add	r5, sp, #8
 800573e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005742:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005746:	e885 0003 	stmia.w	r5, {r0, r1}
 800574a:	2301      	movs	r3, #1
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4620      	mov	r0, r4
 8005758:	f7fe fb5e 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	4618      	mov	r0, r3
 8005762:	f011 fcc8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005766:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800576a:	3418      	adds	r4, #24
 800576c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005770:	429c      	cmp	r4, r3
 8005772:	d004      	beq.n	800577e <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12a>
 8005774:	3c18      	subs	r4, #24
 8005776:	4620      	mov	r0, r4
 8005778:	f011 fcbd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800577c:	e7f6      	b.n	800576c <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118>
 800577e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005782:	4618      	mov	r0, r3
 8005784:	f011 fb64 	bl	8016e50 <_ZNSaIcED1Ev>
 8005788:	f107 0320 	add.w	r3, r7, #32
 800578c:	4618      	mov	r0, r3
 800578e:	f011 fcb2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005796:	4618      	mov	r0, r3
 8005798:	f011 fcad 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				SEND_RECIEVE(send_string, { 100, 100 }, 1, { "OK", "NWBLEPSEND" });
 800579c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80057a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80057a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	4610      	mov	r0, r2
 80057ac:	f011 ffd6 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80057b0:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>)
 80057b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80057be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c6:	2302      	movs	r3, #2
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80057d0:	4618      	mov	r0, r3
 80057d2:	f011 fb3b 	bl	8016e4c <_ZNSaIcEC1Ev>
 80057d6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80057da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057de:	4936      	ldr	r1, [pc, #216]	; (80058b8 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x264>)
 80057e0:	4618      	mov	r0, r3
 80057e2:	f011 ffef 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80057e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80057ea:	4618      	mov	r0, r3
 80057ec:	f011 fb2e 	bl	8016e4c <_ZNSaIcEC1Ev>
 80057f0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80057f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057f8:	3318      	adds	r3, #24
 80057fa:	4930      	ldr	r1, [pc, #192]	; (80058bc <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x268>)
 80057fc:	4618      	mov	r0, r3
 80057fe:	f011 ffe1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005802:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580a:	2302      	movs	r3, #2
 800580c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005810:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8005814:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005818:	ad02      	add	r5, sp, #8
 800581a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800581e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005822:	e885 0003 	stmia.w	r5, {r0, r1}
 8005826:	2301      	movs	r3, #1
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4620      	mov	r0, r4
 8005838:	f7fe faee 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800583c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005840:	4618      	mov	r0, r3
 8005842:	f011 fc58 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005846:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800584a:	3430      	adds	r4, #48	; 0x30
 800584c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005850:	429c      	cmp	r4, r3
 8005852:	d004      	beq.n	800585e <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20a>
 8005854:	3c18      	subs	r4, #24
 8005856:	4620      	mov	r0, r4
 8005858:	f011 fc4d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800585c:	e7f6      	b.n	800584c <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f8>
 800585e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005862:	4618      	mov	r0, r3
 8005864:	f011 faf4 	bl	8016e50 <_ZNSaIcED1Ev>
 8005868:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800586c:	4618      	mov	r0, r3
 800586e:	f011 faef 	bl	8016e50 <_ZNSaIcED1Ev>
 8005872:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005876:	4618      	mov	r0, r3
 8005878:	f011 fc3d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				neo_control = neo_control_temp;
 800587c:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x254>)
 800587e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8005882:	7013      	strb	r3, [r2, #0]
				return_check = return_check_temp;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 800588a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				sending_ble = 0;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				restore_both_print();
 8005896:	f7fe f91c 	bl	8003ad2 <_Z18restore_both_printv>
			}
		}
 800589a:	bf00      	nop
 800589c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bdb0      	pop	{r4, r5, r7, pc}
 80058a4:	20000003 	.word	0x20000003
 80058a8:	20000000 	.word	0x20000000
 80058ac:	08017f24 	.word	0x08017f24
 80058b0:	08017f3c 	.word	0x08017f3c
 80058b4:	08017f4c 	.word	0x08017f4c
 80058b8:	08017ecc 	.word	0x08017ecc
 80058bc:	08017f40 	.word	0x08017f40

080058c0 <_ZN6NEOWAY8POWER_ONEv>:

		void POWER_ON() {
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	b0d3      	sub	sp, #332	; 0x14c
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058ce:	6018      	str	r0, [r3, #0]

			SEND_RECIEVE("AT", { 1000 }, 1, { "OK" });
 80058d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058d4:	4618      	mov	r0, r3
 80058d6:	f011 fab9 	bl	8016e4c <_ZNSaIcEC1Ev>
 80058da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80058de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e2:	499e      	ldr	r1, [pc, #632]	; (8005b5c <_ZN6NEOWAY8POWER_ONEv+0x29c>)
 80058e4:	4618      	mov	r0, r3
 80058e6:	f011 ff6d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80058ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058f4:	643b      	str	r3, [r7, #64]	; 0x40
 80058f6:	2301      	movs	r3, #1
 80058f8:	647b      	str	r3, [r7, #68]	; 0x44
 80058fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80058fe:	4618      	mov	r0, r3
 8005900:	f011 faa4 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005904:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800590c:	4994      	ldr	r1, [pc, #592]	; (8005b60 <_ZN6NEOWAY8POWER_ONEv+0x2a0>)
 800590e:	4618      	mov	r0, r3
 8005910:	f011 ff58 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005914:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800591a:	2301      	movs	r3, #1
 800591c:	653b      	str	r3, [r7, #80]	; 0x50
 800591e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005922:	f5a3 7596 	sub.w	r5, r3, #300	; 0x12c
 8005926:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800592a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800592e:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8005932:	ae02      	add	r6, sp, #8
 8005934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800593c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005940:	2301      	movs	r3, #1
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	4628      	mov	r0, r5
 800594e:	f7fe fa63 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005952:	f107 030c 	add.w	r3, r7, #12
 8005956:	4618      	mov	r0, r3
 8005958:	f011 fbcd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800595c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8005960:	3418      	adds	r4, #24
 8005962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005966:	429c      	cmp	r4, r3
 8005968:	d004      	beq.n	8005974 <_ZN6NEOWAY8POWER_ONEv+0xb4>
 800596a:	3c18      	subs	r4, #24
 800596c:	4620      	mov	r0, r4
 800596e:	f011 fbc2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005972:	e7f6      	b.n	8005962 <_ZN6NEOWAY8POWER_ONEv+0xa2>
 8005974:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005978:	4618      	mov	r0, r3
 800597a:	f011 fa69 	bl	8016e50 <_ZNSaIcED1Ev>
 800597e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005982:	4618      	mov	r0, r3
 8005984:	f011 fbb7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800598c:	4618      	mov	r0, r3
 800598e:	f011 fa5f 	bl	8016e50 <_ZNSaIcED1Ev>
			if (neo_control != $CONTINUE) {
 8005992:	4b74      	ldr	r3, [pc, #464]	; (8005b64 <_ZN6NEOWAY8POWER_ONEv+0x2a4>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <_ZN6NEOWAY8POWER_ONEv+0xfa>
				neo_control = $CONTINUE;
 80059a6:	4b6f      	ldr	r3, [pc, #444]	; (8005b64 <_ZN6NEOWAY8POWER_ONEv+0x2a4>)
 80059a8:	2202      	movs	r2, #2
 80059aa:	701a      	strb	r2, [r3, #0]
				START();
 80059ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80059b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	f7fe f9e3 	bl	8003d80 <_ZN6NEOWAY5STARTEv>
			}
			SEND_RECIEVE("AT", { 1000 }, 20, { "OK" });
 80059ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80059be:	4618      	mov	r0, r3
 80059c0:	f011 fa44 	bl	8016e4c <_ZNSaIcEC1Ev>
 80059c4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80059c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80059cc:	4963      	ldr	r1, [pc, #396]	; (8005b5c <_ZN6NEOWAY8POWER_ONEv+0x29c>)
 80059ce:	4618      	mov	r0, r3
 80059d0:	f011 fef8 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80059d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80059e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059e4:	2301      	movs	r3, #1
 80059e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f011 fa2c 	bl	8016e4c <_ZNSaIcEC1Ev>
 80059f4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80059f8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80059fc:	4958      	ldr	r1, [pc, #352]	; (8005b60 <_ZN6NEOWAY8POWER_ONEv+0x2a0>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f011 fee0 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a04:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a12:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8005a16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005a1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a1e:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8005a22:	ae02      	add	r6, sp, #8
 8005a24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005a28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005a30:	2314      	movs	r3, #20
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a3e:	6821      	ldr	r1, [r4, #0]
 8005a40:	4628      	mov	r0, r5
 8005a42:	f7fe f9e9 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005a46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f011 fb53 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a50:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8005a54:	3418      	adds	r4, #24
 8005a56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d004      	beq.n	8005a68 <_ZN6NEOWAY8POWER_ONEv+0x1a8>
 8005a5e:	3c18      	subs	r4, #24
 8005a60:	4620      	mov	r0, r4
 8005a62:	f011 fb48 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a66:	e7f6      	b.n	8005a56 <_ZN6NEOWAY8POWER_ONEv+0x196>
 8005a68:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f011 f9ef 	bl	8016e50 <_ZNSaIcED1Ev>
 8005a72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005a76:	4618      	mov	r0, r3
 8005a78:	f011 fb3d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f011 f9e5 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("ATE0", { 1000 }, 10, { "OK" });
 8005a86:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f011 f9de 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005a90:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8005a94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005a98:	4933      	ldr	r1, [pc, #204]	; (8005b68 <_ZN6NEOWAY8POWER_ONEv+0x2a8>)
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f011 fe92 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ab6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005aba:	4618      	mov	r0, r3
 8005abc:	f011 f9c6 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005ac0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8005ac4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005ac8:	4925      	ldr	r1, [pc, #148]	; (8005b60 <_ZN6NEOWAY8POWER_ONEv+0x2a0>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f011 fe7a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ad0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005ad4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ade:	f107 05d4 	add.w	r5, r7, #212	; 0xd4
 8005ae2:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aea:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8005aee:	ae02      	add	r6, sp, #8
 8005af0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005af4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005af8:	e886 0003 	stmia.w	r6, {r0, r1}
 8005afc:	230a      	movs	r3, #10
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f7fe f983 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005b12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b16:	4618      	mov	r0, r3
 8005b18:	f011 faed 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b1c:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8005b20:	3418      	adds	r4, #24
 8005b22:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d004      	beq.n	8005b34 <_ZN6NEOWAY8POWER_ONEv+0x274>
 8005b2a:	3c18      	subs	r4, #24
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f011 fae2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b32:	e7f6      	b.n	8005b22 <_ZN6NEOWAY8POWER_ONEv+0x262>
 8005b34:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f011 f989 	bl	8016e50 <_ZNSaIcED1Ev>
 8005b3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005b42:	4618      	mov	r0, r3
 8005b44:	f011 fad7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b48:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f011 f97f 	bl	8016e50 <_ZNSaIcED1Ev>
//			SEND_RECIEVE("AT+IPR=115200", { 2000 }, 10, { "OK" });

		}
 8005b52:	bf00      	nop
 8005b54:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5c:	08017f54 	.word	0x08017f54
 8005b60:	08017ecc 	.word	0x08017ecc
 8005b64:	20000000 	.word	0x20000000
 8005b68:	08017f58 	.word	0x08017f58

08005b6c <_ZN6NEOWAY4INITEv>:
		void POWER_OFF() {
			NW_PWR.PULSE(1, 3 * us_s, 3 * us_s);
			V_3_8.SET(0, 1 * us_s);
		}

		void INIT() {
 8005b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6e:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8005b72:	af04      	add	r7, sp, #16
 8005b74:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005b78:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8005b7c:	6018      	str	r0, [r3, #0]

			SEND_RECIEVE("AT+CPIN?", { 5000 }, 5, { "OK" });
 8005b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b82:	4618      	mov	r0, r3
 8005b84:	f011 f962 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005b88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b8c:	f107 0320 	add.w	r3, r7, #32
 8005b90:	49ac      	ldr	r1, [pc, #688]	; (8005e44 <_ZN6NEOWAY4INITEv+0x2d8>)
 8005b92:	4618      	mov	r0, r3
 8005b94:	f011 fe16 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b98:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005b9c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005baa:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8005bae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005bb8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f011 f941 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005bca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005bce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005bd2:	499d      	ldr	r1, [pc, #628]	; (8005e48 <_ZN6NEOWAY4INITEv+0x2dc>)
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f011 fdf5 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005bda:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005bde:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8005be2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005bec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005bf8:	f5a3 7548 	sub.w	r5, r3, #800	; 0x320
 8005bfc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005c00:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8005c04:	f107 0620 	add.w	r6, r7, #32
 8005c08:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005c0c:	f5a2 7449 	sub.w	r4, r2, #804	; 0x324
 8005c10:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005c14:	f5a2 7138 	sub.w	r1, r2, #736	; 0x2e0
 8005c18:	aa02      	add	r2, sp, #8
 8005c1a:	c903      	ldmia	r1, {r0, r1}
 8005c1c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c20:	2205      	movs	r2, #5
 8005c22:	9201      	str	r2, [sp, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	9200      	str	r2, [sp, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4632      	mov	r2, r6
 8005c2c:	6821      	ldr	r1, [r4, #0]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7fe f8f2 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f011 fa5c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c3e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005c42:	3418      	adds	r4, #24
 8005c44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	d004      	beq.n	8005c56 <_ZN6NEOWAY4INITEv+0xea>
 8005c4c:	3c18      	subs	r4, #24
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f011 fa51 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c54:	e7f6      	b.n	8005c44 <_ZN6NEOWAY4INITEv+0xd8>
 8005c56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f011 f8f8 	bl	8016e50 <_ZNSaIcED1Ev>
 8005c60:	f107 0320 	add.w	r3, r7, #32
 8005c64:	4618      	mov	r0, r3
 8005c66:	f011 fa46 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f011 f8ee 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+CSQ", { 5000 }, 5, { "OK" });
 8005c74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f011 f8e7 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005c7e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005c82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c86:	4971      	ldr	r1, [pc, #452]	; (8005e4c <_ZN6NEOWAY4INITEv+0x2e0>)
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f011 fd9b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c8e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005c92:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8005c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005ca0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8005ca4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005cae:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f011 f8c6 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005cc0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8005cc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005cc8:	495f      	ldr	r1, [pc, #380]	; (8005e48 <_ZN6NEOWAY4INITEv+0x2dc>)
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f011 fd7a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005cd0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005cd4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8005cd8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005ce2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005cee:	f5a3 752f 	sub.w	r5, r3, #700	; 0x2bc
 8005cf2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005cf6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8005cfa:	f107 0684 	add.w	r6, r7, #132	; 0x84
 8005cfe:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005d02:	f5a2 7449 	sub.w	r4, r2, #804	; 0x324
 8005d06:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005d0a:	f5a2 711f 	sub.w	r1, r2, #636	; 0x27c
 8005d0e:	aa02      	add	r2, sp, #8
 8005d10:	c903      	ldmia	r1, {r0, r1}
 8005d12:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d16:	2205      	movs	r2, #5
 8005d18:	9201      	str	r2, [sp, #4]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	9200      	str	r2, [sp, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4632      	mov	r2, r6
 8005d22:	6821      	ldr	r1, [r4, #0]
 8005d24:	4628      	mov	r0, r5
 8005d26:	f7fe f877 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005d2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f011 f9e1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d34:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8005d38:	3418      	adds	r4, #24
 8005d3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d004      	beq.n	8005d4c <_ZN6NEOWAY4INITEv+0x1e0>
 8005d42:	3c18      	subs	r4, #24
 8005d44:	4620      	mov	r0, r4
 8005d46:	f011 f9d6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d4a:	e7f6      	b.n	8005d3a <_ZN6NEOWAY4INITEv+0x1ce>
 8005d4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d50:	4618      	mov	r0, r3
 8005d52:	f011 f87d 	bl	8016e50 <_ZNSaIcED1Ev>
 8005d56:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f011 f9cb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d64:	4618      	mov	r0, r3
 8005d66:	f011 f873 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+CREG=2", { 5000 }, 5, { "OK" });
 8005d6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f011 f86c 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005d74:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005d78:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005d7c:	4934      	ldr	r1, [pc, #208]	; (8005e50 <_ZN6NEOWAY4INITEv+0x2e4>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f011 fd20 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d84:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005d88:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005d96:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8005d9a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005da4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8005da8:	2201      	movs	r2, #1
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db0:	4618      	mov	r0, r3
 8005db2:	f011 f84b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005db6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005dbe:	4922      	ldr	r1, [pc, #136]	; (8005e48 <_ZN6NEOWAY4INITEv+0x2dc>)
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f011 fcff 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005dc6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005dca:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8005dce:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005dd8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8005ddc:	2201      	movs	r2, #1
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005de4:	f5a3 7516 	sub.w	r5, r3, #600	; 0x258
 8005de8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005dec:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8005df0:	f107 06e8 	add.w	r6, r7, #232	; 0xe8
 8005df4:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005df8:	f5a2 7449 	sub.w	r4, r2, #804	; 0x324
 8005dfc:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005e00:	f5a2 7106 	sub.w	r1, r2, #536	; 0x218
 8005e04:	aa02      	add	r2, sp, #8
 8005e06:	c903      	ldmia	r1, {r0, r1}
 8005e08:	e882 0003 	stmia.w	r2, {r0, r1}
 8005e0c:	2205      	movs	r2, #5
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	9200      	str	r2, [sp, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4632      	mov	r2, r6
 8005e18:	6821      	ldr	r1, [r4, #0]
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f7fd fffc 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005e20:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f011 f966 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e2a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8005e2e:	3418      	adds	r4, #24
 8005e30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e34:	429c      	cmp	r4, r3
 8005e36:	d00d      	beq.n	8005e54 <_ZN6NEOWAY4INITEv+0x2e8>
 8005e38:	3c18      	subs	r4, #24
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f011 f95b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e40:	e7f6      	b.n	8005e30 <_ZN6NEOWAY4INITEv+0x2c4>
 8005e42:	bf00      	nop
 8005e44:	08017f60 	.word	0x08017f60
 8005e48:	08017ecc 	.word	0x08017ecc
 8005e4c:	08017f6c 	.word	0x08017f6c
 8005e50:	08017f74 	.word	0x08017f74
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f010 fff9 	bl	8016e50 <_ZNSaIcED1Ev>
 8005e5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f011 f947 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f010 ffef 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+CREG?", { 5000 }, 5, { "2," });
 8005e72:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005e76:	4618      	mov	r0, r3
 8005e78:	f010 ffe8 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005e7c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005e80:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005e84:	49d5      	ldr	r1, [pc, #852]	; (80061dc <_ZN6NEOWAY4INITEv+0x670>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f011 fc9c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e8c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005e90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005e9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ea2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005eac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f010 ffc7 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005ebe:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8005ec2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005ec6:	49c6      	ldr	r1, [pc, #792]	; (80061e0 <_ZN6NEOWAY4INITEv+0x674>)
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f011 fc7b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ece:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005ed2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ed6:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005ee0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005eec:	f5a3 75fa 	sub.w	r5, r3, #500	; 0x1f4
 8005ef0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005ef4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ef8:	f507 76a6 	add.w	r6, r7, #332	; 0x14c
 8005efc:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005f00:	f5a2 7449 	sub.w	r4, r2, #804	; 0x324
 8005f04:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005f08:	f5a2 71da 	sub.w	r1, r2, #436	; 0x1b4
 8005f0c:	aa02      	add	r2, sp, #8
 8005f0e:	c903      	ldmia	r1, {r0, r1}
 8005f10:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f14:	2205      	movs	r2, #5
 8005f16:	9201      	str	r2, [sp, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	9200      	str	r2, [sp, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4632      	mov	r2, r6
 8005f20:	6821      	ldr	r1, [r4, #0]
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7fd ff78 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8005f28:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f011 f8e2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005f32:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8005f36:	3418      	adds	r4, #24
 8005f38:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d004      	beq.n	8005f4a <_ZN6NEOWAY4INITEv+0x3de>
 8005f40:	3c18      	subs	r4, #24
 8005f42:	4620      	mov	r0, r4
 8005f44:	f011 f8d7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005f48:	e7f6      	b.n	8005f38 <_ZN6NEOWAY4INITEv+0x3cc>
 8005f4a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f010 ff7e 	bl	8016e50 <_ZNSaIcED1Ev>
 8005f54:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f011 f8cc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005f5e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005f62:	4618      	mov	r0, r3
 8005f64:	f010 ff74 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+CGATT=1", { 5000 }, 5, { "OK" });
 8005f68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f010 ff6d 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005f72:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8005f76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005f7a:	499a      	ldr	r1, [pc, #616]	; (80061e4 <_ZN6NEOWAY4INITEv+0x678>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f011 fc21 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f82:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005f86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005f94:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005f98:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fa2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f010 ff4c 	bl	8016e4c <_ZNSaIcEC1Ev>
 8005fb4:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8005fb8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8005fbc:	498a      	ldr	r1, [pc, #552]	; (80061e8 <_ZN6NEOWAY4INITEv+0x67c>)
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f011 fc00 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005fc4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005fcc:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fd6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005fda:	2201      	movs	r2, #1
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fe2:	f5a3 75c8 	sub.w	r5, r3, #400	; 0x190
 8005fe6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005fee:	f507 76d8 	add.w	r6, r7, #432	; 0x1b0
 8005ff2:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005ff6:	f5a2 7449 	sub.w	r4, r2, #804	; 0x324
 8005ffa:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8005ffe:	f5a2 71a8 	sub.w	r1, r2, #336	; 0x150
 8006002:	aa02      	add	r2, sp, #8
 8006004:	c903      	ldmia	r1, {r0, r1}
 8006006:	e882 0003 	stmia.w	r2, {r0, r1}
 800600a:	2205      	movs	r2, #5
 800600c:	9201      	str	r2, [sp, #4]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	9200      	str	r2, [sp, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4632      	mov	r2, r6
 8006016:	6821      	ldr	r1, [r4, #0]
 8006018:	4628      	mov	r0, r5
 800601a:	f7fd fefd 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800601e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006022:	4618      	mov	r0, r3
 8006024:	f011 f867 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006028:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 800602c:	3418      	adds	r4, #24
 800602e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8006032:	429c      	cmp	r4, r3
 8006034:	d004      	beq.n	8006040 <_ZN6NEOWAY4INITEv+0x4d4>
 8006036:	3c18      	subs	r4, #24
 8006038:	4620      	mov	r0, r4
 800603a:	f011 f85c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800603e:	e7f6      	b.n	800602e <_ZN6NEOWAY4INITEv+0x4c2>
 8006040:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8006044:	4618      	mov	r0, r3
 8006046:	f010 ff03 	bl	8016e50 <_ZNSaIcED1Ev>
 800604a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800604e:	4618      	mov	r0, r3
 8006050:	f011 f851 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006054:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006058:	4618      	mov	r0, r3
 800605a:	f010 fef9 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+CGATT?", { 5000 }, 5, { "+CGATT: 1" });
 800605e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8006062:	4618      	mov	r0, r3
 8006064:	f010 fef2 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006068:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800606c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8006070:	495e      	ldr	r1, [pc, #376]	; (80061ec <_ZN6NEOWAY4INITEv+0x680>)
 8006072:	4618      	mov	r0, r3
 8006074:	f011 fba6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006078:	f241 3388 	movw	r3, #5000	; 0x1388
 800607c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006080:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006084:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006088:	2301      	movs	r3, #1
 800608a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800608e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006092:	4618      	mov	r0, r3
 8006094:	f010 feda 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006098:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800609c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80060a0:	4953      	ldr	r1, [pc, #332]	; (80061f0 <_ZN6NEOWAY4INITEv+0x684>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f011 fb8e 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060a8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80060ac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80060b0:	2301      	movs	r3, #1
 80060b2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80060b6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80060ba:	f5a3 7596 	sub.w	r5, r3, #300	; 0x12c
 80060be:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80060c2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80060c6:	f5a3 7449 	sub.w	r4, r3, #804	; 0x324
 80060ca:	ae02      	add	r6, sp, #8
 80060cc:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80060d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80060d4:	e886 0003 	stmia.w	r6, {r0, r1}
 80060d8:	2305      	movs	r3, #5
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80060e6:	6821      	ldr	r1, [r4, #0]
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7fd fe95 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80060ee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80060f2:	4618      	mov	r0, r3
 80060f4:	f010 ffff 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80060f8:	f507 7411 	add.w	r4, r7, #580	; 0x244
 80060fc:	3418      	adds	r4, #24
 80060fe:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8006102:	429c      	cmp	r4, r3
 8006104:	d004      	beq.n	8006110 <_ZN6NEOWAY4INITEv+0x5a4>
 8006106:	3c18      	subs	r4, #24
 8006108:	4620      	mov	r0, r4
 800610a:	f010 fff4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800610e:	e7f6      	b.n	80060fe <_ZN6NEOWAY4INITEv+0x592>
 8006110:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006114:	4618      	mov	r0, r3
 8006116:	f010 fe9b 	bl	8016e50 <_ZNSaIcED1Ev>
 800611a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800611e:	4618      	mov	r0, r3
 8006120:	f010 ffe9 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006124:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8006128:	4618      	mov	r0, r3
 800612a:	f010 fe91 	bl	8016e50 <_ZNSaIcED1Ev>
			//	neoway.SEND_RECIEVE("AT$MYSYSINFO", { 5000 }, 1, { "+CGATT: 1" });

			SEND_RECIEVE("AT+XIIC=1", { 5000 }, 5, { "OK" });
 800612e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006132:	4618      	mov	r0, r3
 8006134:	f010 fe8a 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006138:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800613c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006140:	492c      	ldr	r1, [pc, #176]	; (80061f4 <_ZN6NEOWAY4INITEv+0x688>)
 8006142:	4618      	mov	r0, r3
 8006144:	f011 fb3e 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006148:	f241 3388 	movw	r3, #5000	; 0x1388
 800614c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006150:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8006154:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8006158:	2301      	movs	r3, #1
 800615a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800615e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006162:	4618      	mov	r0, r3
 8006164:	f010 fe72 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006168:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800616c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006170:	491d      	ldr	r1, [pc, #116]	; (80061e8 <_ZN6NEOWAY4INITEv+0x67c>)
 8006172:	4618      	mov	r0, r3
 8006174:	f011 fb26 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006178:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800617c:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8006180:	2301      	movs	r3, #1
 8006182:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8006186:	f507 7518 	add.w	r5, r7, #608	; 0x260
 800618a:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800618e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006192:	f5a3 7449 	sub.w	r4, r3, #804	; 0x324
 8006196:	ae02      	add	r6, sp, #8
 8006198:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800619c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80061a4:	2305      	movs	r3, #5
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7fd fe2f 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80061ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061be:	4618      	mov	r0, r3
 80061c0:	f010 ff99 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061c4:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 80061c8:	3418      	adds	r4, #24
 80061ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80061ce:	429c      	cmp	r4, r3
 80061d0:	d012      	beq.n	80061f8 <_ZN6NEOWAY4INITEv+0x68c>
 80061d2:	3c18      	subs	r4, #24
 80061d4:	4620      	mov	r0, r4
 80061d6:	f010 ff8e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061da:	e7f6      	b.n	80061ca <_ZN6NEOWAY4INITEv+0x65e>
 80061dc:	08017f80 	.word	0x08017f80
 80061e0:	08017f8c 	.word	0x08017f8c
 80061e4:	08017f90 	.word	0x08017f90
 80061e8:	08017ecc 	.word	0x08017ecc
 80061ec:	08017f9c 	.word	0x08017f9c
 80061f0:	08017fa8 	.word	0x08017fa8
 80061f4:	08017fb4 	.word	0x08017fb4
 80061f8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f010 fe27 	bl	8016e50 <_ZNSaIcED1Ev>
 8006202:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006206:	4618      	mov	r0, r3
 8006208:	f010 ff75 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800620c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006210:	4618      	mov	r0, r3
 8006212:	f010 fe1d 	bl	8016e50 <_ZNSaIcED1Ev>
			SEND_RECIEVE("AT+XIIC?", { 5000 }, 5, { "+XIIC:    1" });
 8006216:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 800621a:	4618      	mov	r0, r3
 800621c:	f010 fe16 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006220:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8006224:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8006228:	4932      	ldr	r1, [pc, #200]	; (80062f4 <_ZN6NEOWAY4INITEv+0x788>)
 800622a:	4618      	mov	r0, r3
 800622c:	f011 faca 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006230:	f241 3388 	movw	r3, #5000	; 0x1388
 8006234:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8006238:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800623c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8006240:	2301      	movs	r3, #1
 8006242:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8006246:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800624a:	4618      	mov	r0, r3
 800624c:	f010 fdfe 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006250:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8006254:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8006258:	4927      	ldr	r1, [pc, #156]	; (80062f8 <_ZN6NEOWAY4INITEv+0x78c>)
 800625a:	4618      	mov	r0, r3
 800625c:	f011 fab2 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006260:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8006264:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8006268:	2301      	movs	r3, #1
 800626a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800626e:	f507 7531 	add.w	r5, r7, #708	; 0x2c4
 8006272:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8006276:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800627a:	f5a3 7449 	sub.w	r4, r3, #804	; 0x324
 800627e:	ae02      	add	r6, sp, #8
 8006280:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8006284:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006288:	e886 0003 	stmia.w	r6, {r0, r1}
 800628c:	2305      	movs	r3, #5
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800629a:	6821      	ldr	r1, [r4, #0]
 800629c:	4628      	mov	r0, r5
 800629e:	f7fd fdbb 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80062a2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f010 ff25 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062ac:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 80062b0:	3418      	adds	r4, #24
 80062b2:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80062b6:	429c      	cmp	r4, r3
 80062b8:	d004      	beq.n	80062c4 <_ZN6NEOWAY4INITEv+0x758>
 80062ba:	3c18      	subs	r4, #24
 80062bc:	4620      	mov	r0, r4
 80062be:	f010 ff1a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062c2:	e7f6      	b.n	80062b2 <_ZN6NEOWAY4INITEv+0x746>
 80062c4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80062c8:	4618      	mov	r0, r3
 80062ca:	f010 fdc1 	bl	8016e50 <_ZNSaIcED1Ev>
 80062ce:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80062d2:	4618      	mov	r0, r3
 80062d4:	f010 ff0f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062d8:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80062dc:	4618      	mov	r0, r3
 80062de:	f010 fdb7 	bl	8016e50 <_ZNSaIcED1Ev>
			delay(2 * ms_s);
 80062e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80062e6:	f7fd f9e1 	bl	80036ac <_Z5delaym>
		}
 80062ea:	bf00      	nop
 80062ec:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f4:	08017fc0 	.word	0x08017fc0
 80062f8:	08017fcc 	.word	0x08017fcc

080062fc <_ZN10UART_DEBUGC1EP12DynamicArrayIP9VARIABLESEP12UART_PRINTERP6NEOWAY>:
		uint32_t try_count = 3;
		LOOP_CONT both_control = $CONTINUE;
		string resp_string = "";
	public:

		UART_DEBUG(DynamicArray<VARIABLES*> *temp_i, UART_PRINTER *debug, NEOWAY *neoway) :
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
				debug(debug), neoway(neoway) {
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2203      	movs	r2, #3
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2202      	movs	r2, #2
 8006320:	741a      	strb	r2, [r3, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f103 0414 	add.w	r4, r3, #20
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	4618      	mov	r0, r3
 800632e:	f010 fd8d 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	461a      	mov	r2, r3
 8006338:	4908      	ldr	r1, [pc, #32]	; (800635c <_ZN10UART_DEBUGC1EP12DynamicArrayIP9VARIABLESEP12UART_PRINTERP6NEOWAY+0x60>)
 800633a:	4620      	mov	r0, r4
 800633c:	f011 fa42 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4618      	mov	r0, r3
 8006346:	f010 fd83 	bl	8016e50 <_ZNSaIcED1Ev>
			VariablePointer = temp_i;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	601a      	str	r2, [r3, #0]

		}
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}
 800635a:	bf00      	nop
 800635c:	08017e00 	.word	0x08017e00

08006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

		void Print2(string out) {
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b08f      	sub	sp, #60	; 0x3c
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]

			neoway->BLE_SEND(out);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689c      	ldr	r4, [r3, #8]
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f011 f9f1 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4619      	mov	r1, r3
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff f967 	bl	8005654 <_ZN6NEOWAY8BLE_SENDENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	4618      	mov	r0, r3
 800638c:	f010 feb3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			debug->Print(out);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685c      	ldr	r4, [r3, #4]
 8006394:	f107 0320 	add.w	r3, r7, #32
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f011 f9de 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80063a0:	f107 0320 	add.w	r3, r7, #32
 80063a4:	4619      	mov	r1, r3
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7fd fbea 	bl	8003b80 <_ZN12UART_PRINTER5PrintENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80063ac:	f107 0320 	add.w	r3, r7, #32
 80063b0:	4618      	mov	r0, r3
 80063b2:	f010 fea0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
 80063b6:	bf00      	nop
 80063b8:	373c      	adds	r7, #60	; 0x3c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}
	...

080063c0 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b>:

		void Json_print(string json_print, string name_1 = "Json", bool formatted = 1) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b0a4      	sub	sp, #144	; 0x90
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	70fb      	strb	r3, [r7, #3]

//			serializeJson(json_ret, json_print);
			if (formatted) {
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d047      	beq.n	8006464 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0xa4>
				for (uint32_t var = 0; var < json_print.size(); var++) {
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063da:	e036      	b.n	800644a <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x8a>
					//				string char_s = json_print.at(var);
					char char_s = json_print.at(var);
 80063dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f010 ff01 	bl	80171e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>
 80063e6:	4603      	mov	r3, r0
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
					//				if (char_s == "," || char_s == "{" || char_s == "}") {
					if (char_s == ',' || char_s == '{' || char_s == '}') {
 80063ee:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80063f2:	2b2c      	cmp	r3, #44	; 0x2c
 80063f4:	d007      	beq.n	8006406 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x46>
 80063f6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80063fa:	2b7b      	cmp	r3, #123	; 0x7b
 80063fc:	d003      	beq.n	8006406 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x46>
 80063fe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006402:	2b7d      	cmp	r3, #125	; 0x7d
 8006404:	d106      	bne.n	8006414 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x54>
						//					json_print.insert(var, "\n\r", 1);
						json_print.replace(var, 1, "\n\r");
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x14c>)
 8006408:	2201      	movs	r2, #1
 800640a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800640e:	68b8      	ldr	r0, [r7, #8]
 8006410:	f011 f85e 	bl	80174d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKc>
					}
					if (char_s == '\"') {
 8006414:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006418:	2b22      	cmp	r3, #34	; 0x22
 800641a:	d106      	bne.n	800642a <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x6a>
						//					json_print.insert(var, "\n\r", 1);
						json_print.replace(var, 1, " ");
 800641c:	4b3c      	ldr	r3, [pc, #240]	; (8006510 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x150>)
 800641e:	2201      	movs	r2, #1
 8006420:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006424:	68b8      	ldr	r0, [r7, #8]
 8006426:	f011 f853 	bl	80174d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKc>
					}
					if (char_s == ':') {
 800642a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800642e:	2b3a      	cmp	r3, #58	; 0x3a
 8006430:	d106      	bne.n	8006440 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x80>
						//					json_print.insert(var, "\n\r", 1);
						json_print.replace(var, 1, "-");
 8006432:	4b38      	ldr	r3, [pc, #224]	; (8006514 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x154>)
 8006434:	2201      	movs	r2, #1
 8006436:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f011 f848 	bl	80174d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKc>
				for (uint32_t var = 0; var < json_print.size(); var++) {
 8006440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006444:	3301      	adds	r3, #1
 8006446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800644a:	68b8      	ldr	r0, [r7, #8]
 800644c:	f010 fe90 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8006450:	4602      	mov	r2, r0
 8006452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006456:	4293      	cmp	r3, r2
 8006458:	bf34      	ite	cc
 800645a:	2301      	movcc	r3, #1
 800645c:	2300      	movcs	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1bb      	bne.n	80063dc <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x1c>
					//				} else {
					//					Print2(char_s);
					//				}
				}
			}
			Print2("\n\r\n\r" + name_1 + " -->");
 8006464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	492b      	ldr	r1, [pc, #172]	; (8006518 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x158>)
 800646c:	4618      	mov	r0, r3
 800646e:	f006 f95b 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8006472:	f107 0310 	add.w	r3, r7, #16
 8006476:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800647a:	4a28      	ldr	r2, [pc, #160]	; (800651c <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x15c>)
 800647c:	4618      	mov	r0, r3
 800647e:	f006 fd9c 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff ff69 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4618      	mov	r0, r3
 8006494:	f010 fe2f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800649c:	4618      	mov	r0, r3
 800649e:	f010 fe2a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			Print2(json_print);
 80064a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f011 f957 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80064ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff ff53 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80064ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064be:	4618      	mov	r0, r3
 80064c0:	f010 fe19 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			Print2("<--" + name_1 + "\n\r");
 80064c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	4915      	ldr	r1, [pc, #84]	; (8006520 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x160>)
 80064cc:	4618      	mov	r0, r3
 80064ce:	f006 f92b 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80064d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064d6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80064da:	4a0c      	ldr	r2, [pc, #48]	; (800650c <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b+0x14c>)
 80064dc:	4618      	mov	r0, r3
 80064de:	f006 fd6c 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80064e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff ff39 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80064ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064f2:	4618      	mov	r0, r3
 80064f4:	f010 fdff 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80064fc:	4618      	mov	r0, r3
 80064fe:	f010 fdfa 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
 8006502:	bf00      	nop
 8006504:	3790      	adds	r7, #144	; 0x90
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	08017fd8 	.word	0x08017fd8
 8006510:	08017fdc 	.word	0x08017fdc
 8006514:	08017dd8 	.word	0x08017dd8
 8006518:	08017fe0 	.word	0x08017fe0
 800651c:	08017fe8 	.word	0x08017fe8
 8006520:	08017ff0 	.word	0x08017ff0

08006524 <_ZN10UART_DEBUG8BLE_ReadB5cxx11Em>:
			neoway->BLE_SEND(d_t_s(out, decimals));

			debug->Print(d_t_s(out, decimals));
		}

		string BLE_Read(uint32_t timeout = 5000) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
//			Print2("b");
			return neoway->BLE_READ(timeout);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6899      	ldr	r1, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe ffed 	bl	8005518 <_ZN6NEOWAY8BLE_READB5cxx11Em>
		}
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <_ZN10UART_DEBUG8Ser_ReadB5cxx11Em>:

		string Ser_Read(uint32_t a) {
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
//			Print2("s");
			return debug->Read(a);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fada 	bl	8003b14 <_ZN12UART_PRINTER4ReadB5cxx11Em>
		}
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi>:

		/**
		 * @fn 	void void PassAuthen()
		 * @brief timeout = multiple of 1000
		 */
		string Both_Get_pass(uint32_t timeout_in_s = 5, int *ble_ser = NULL) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b0a6      	sub	sp, #152	; 0x98
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
			string uart_in = "", ble_in = "", pass = debug->get_pass();
 8006576:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800657a:	4618      	mov	r0, r3
 800657c:	f010 fc66 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006580:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006584:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006588:	4957      	ldr	r1, [pc, #348]	; (80066e8 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x180>)
 800658a:	4618      	mov	r0, r3
 800658c:	f011 f91a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006590:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006594:	4618      	mov	r0, r3
 8006596:	f010 fc5b 	bl	8016e50 <_ZNSaIcED1Ev>
 800659a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800659e:	4618      	mov	r0, r3
 80065a0:	f010 fc54 	bl	8016e4c <_ZNSaIcEC1Ev>
 80065a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065ac:	494e      	ldr	r1, [pc, #312]	; (80066e8 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x180>)
 80065ae:	4618      	mov	r0, r3
 80065b0:	f011 f908 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80065b8:	4618      	mov	r0, r3
 80065ba:	f010 fc49 	bl	8016e50 <_ZNSaIcED1Ev>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	f107 0314 	add.w	r3, r7, #20
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fafd 	bl	8003bc8 <_ZN12UART_PRINTER8get_passB5cxx11Ev>
			for (uint16_t it = timeout_in_s * 5; it > 0; it--) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	0092      	lsls	r2, r2, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80065dc:	e05c      	b.n	8006698 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x130>
#if defined(UL1_ON)
				LED_1.Toggle(1);
#endif
				uart_in = Ser_Read(100);
 80065de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80065e2:	2264      	movs	r2, #100	; 0x64
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ffad 	bl	8006546 <_ZN10UART_DEBUG8Ser_ReadB5cxx11Em>
 80065ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80065f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f010 fd89 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80065fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006600:	4618      	mov	r0, r3
 8006602:	f010 fd78 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
#if defined(UL1_ON)
				LED_1.Toggle(1);
#endif
				ble_in = BLE_Read(100);
 8006606:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800660a:	2264      	movs	r2, #100	; 0x64
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff ff88 	bl	8006524 <_ZN10UART_DEBUG8BLE_ReadB5cxx11Em>
 8006614:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f010 fd75 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006624:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006628:	4618      	mov	r0, r3
 800662a:	f010 fd64 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if (uart_in == pass) {
 800662e:	f107 0214 	add.w	r2, r7, #20
 8006632:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f006 fd13 	bl	800d064 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00c      	beq.n	800665e <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0xf6>
					if (ble_ser != NULL) {
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0xe8>
						*ble_ser = 1;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
					}
					return uart_in;
 8006650:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006654:	4619      	mov	r1, r3
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f010 fd33 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800665c:	e031      	b.n	80066c2 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x15a>
				}
				if (ble_in == pass) {
 800665e:	f107 0214 	add.w	r2, r7, #20
 8006662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f006 fcfb 	bl	800d064 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x126>
					if (ble_ser != NULL) {
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x118>
						*ble_ser = 2;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2202      	movs	r2, #2
 800667e:	601a      	str	r2, [r3, #0]
					}
					return ble_in;
 8006680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006684:	4619      	mov	r1, r3
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f010 fd1b 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800668c:	e019      	b.n	80066c2 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x15a>
			for (uint16_t it = timeout_in_s * 5; it > 0; it--) {
 800668e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006692:	3b01      	subs	r3, #1
 8006694:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8006698:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800669c:	2b00      	cmp	r3, #0
 800669e:	d19e      	bne.n	80065de <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x76>
				}
			}
			return "";
 80066a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80066a4:	4618      	mov	r0, r3
 80066a6:	f010 fbd1 	bl	8016e4c <_ZNSaIcEC1Ev>
 80066aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80066ae:	461a      	mov	r2, r3
 80066b0:	490d      	ldr	r1, [pc, #52]	; (80066e8 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi+0x180>)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f011 f886 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80066b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80066bc:	4618      	mov	r0, r3
 80066be:	f010 fbc7 	bl	8016e50 <_ZNSaIcED1Ev>
		}
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4618      	mov	r0, r3
 80066c8:	f010 fd15 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066d0:	4618      	mov	r0, r3
 80066d2:	f010 fd10 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066da:	4618      	mov	r0, r3
 80066dc:	f010 fd0b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	3798      	adds	r7, #152	; 0x98
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	08017e00 	.word	0x08017e00

080066ec <_ZN10UART_DEBUG9Both_ReadB5cxx11Em>:

		string Both_Read(uint32_t timeout_in_s = 5) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b0a0      	sub	sp, #128	; 0x80
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
			string Uart_resp = "", Ble_resp = "";
 80066f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066fc:	4618      	mov	r0, r3
 80066fe:	f010 fba5 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006702:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800670a:	4952      	ldr	r1, [pc, #328]	; (8006854 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x168>)
 800670c:	4618      	mov	r0, r3
 800670e:	f011 f859 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006712:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006716:	4618      	mov	r0, r3
 8006718:	f010 fb9a 	bl	8016e50 <_ZNSaIcED1Ev>
 800671c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006720:	4618      	mov	r0, r3
 8006722:	f010 fb93 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006726:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800672a:	f107 0314 	add.w	r3, r7, #20
 800672e:	4949      	ldr	r1, [pc, #292]	; (8006854 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x168>)
 8006730:	4618      	mov	r0, r3
 8006732:	f011 f847 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800673a:	4618      	mov	r0, r3
 800673c:	f010 fb88 	bl	8016e50 <_ZNSaIcED1Ev>
			for (uint16_t it = (timeout_in_s == 0 ? 5 : timeout_in_s); it > 0; it--) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x60>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	b29b      	uxth	r3, r3
 800674a:	e000      	b.n	800674e <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x62>
 800674c:	2305      	movs	r3, #5
 800674e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8006752:	e05c      	b.n	800680e <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x122>
				refresh_counter();
 8006754:	f7fc ffd2 	bl	80036fc <_Z15refresh_counterv>
				Uart_resp = Ser_Read(500);
 8006758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800675c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff feef 	bl	8006546 <_ZN10UART_DEBUG8Ser_ReadB5cxx11Em>
 8006768:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800676c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f010 fccb 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800677c:	4618      	mov	r0, r3
 800677e:	f010 fcba 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				Ble_resp = BLE_Read(500);
 8006782:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006786:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fec9 	bl	8006524 <_ZN10UART_DEBUG8BLE_ReadB5cxx11Em>
 8006792:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	4611      	mov	r1, r2
 800679c:	4618      	mov	r0, r3
 800679e:	f010 fcb6 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80067a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80067a6:	4618      	mov	r0, r3
 80067a8:	f010 fca5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if (!Uart_resp.empty()) {
 80067ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067b0:	4618      	mov	r0, r3
 80067b2:	f010 fd0d 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f083 0301 	eor.w	r3, r3, #1
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d006      	beq.n	80067d0 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0xe4>
					return Uart_resp;
 80067c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067c6:	4619      	mov	r1, r3
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f010 fc7a 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80067ce:	e033      	b.n	8006838 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x14c>
				}
				if (!Ble_resp.empty()) {
 80067d0:	f107 0314 	add.w	r3, r7, #20
 80067d4:	4618      	mov	r0, r3
 80067d6:	f010 fcfb 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80067da:	4603      	mov	r3, r0
 80067dc:	f083 0301 	eor.w	r3, r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x108>
					return Ble_resp;
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f010 fc68 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80067f2:	e021      	b.n	8006838 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x14c>
				}
				if (timeout_in_s == 0) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x118>
					it++;
 80067fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80067fe:	3301      	adds	r3, #1
 8006800:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			for (uint16_t it = (timeout_in_s == 0 ? 5 : timeout_in_s); it > 0; it--) {
 8006804:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006808:	3b01      	subs	r3, #1
 800680a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800680e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006812:	2b00      	cmp	r3, #0
 8006814:	d19e      	bne.n	8006754 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x68>
				}
			}
			return "";
 8006816:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800681a:	4618      	mov	r0, r3
 800681c:	f010 fb16 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006820:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006824:	461a      	mov	r2, r3
 8006826:	490b      	ldr	r1, [pc, #44]	; (8006854 <_ZN10UART_DEBUG9Both_ReadB5cxx11Em+0x168>)
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f010 ffcb 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800682e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006832:	4618      	mov	r0, r3
 8006834:	f010 fb0c 	bl	8016e50 <_ZNSaIcED1Ev>
		}
 8006838:	f107 0314 	add.w	r3, r7, #20
 800683c:	4618      	mov	r0, r3
 800683e:	f010 fc5a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006846:	4618      	mov	r0, r3
 8006848:	f010 fc55 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	3780      	adds	r7, #128	; 0x80
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	08017e00 	.word	0x08017e00

08006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>:

		NEOWAY_RETURN Both_read_check(string print_this = "", uint32_t timeout_in_s = 5, string ex_resp = "", string *resp = NULL) {
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b0ab      	sub	sp, #172	; 0xac
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
			NEOWAY_RETURN return_check_temp = $N_OK;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			string response;
 800686c:	f107 0310 	add.w	r3, r7, #16
 8006870:	4618      	mov	r0, r3
 8006872:	f010 fc0f 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			do {
				if (print_this != "") {
 8006876:	4954      	ldr	r1, [pc, #336]	; (80069c8 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x170>)
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f006 fc1d 	bl	800d0b8 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01e      	beq.n	80068c2 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x6a>
					Print2("\n\r" + print_this + " : ");
 8006884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4950      	ldr	r1, [pc, #320]	; (80069cc <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x174>)
 800688c:	4618      	mov	r0, r3
 800688e:	f005 ff4b 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8006892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006896:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800689a:	4a4d      	ldr	r2, [pc, #308]	; (80069d0 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x178>)
 800689c:	4618      	mov	r0, r3
 800689e:	f006 fb8c 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80068a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068a6:	4619      	mov	r1, r3
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fd59 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80068ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068b2:	4618      	mov	r0, r3
 80068b4:	f010 fc1f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068bc:	4618      	mov	r0, r3
 80068be:	f010 fc1a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				}

				response = Both_Read(timeout_in_s);
 80068c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ff0e 	bl	80066ec <_ZN10UART_DEBUG9Both_ReadB5cxx11Em>
 80068d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f010 fc17 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80068e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80068e4:	4618      	mov	r0, r3
 80068e6:	f010 fc06 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

//				Print2(response);

				return_check_temp = CHECK_RESPONSE(&response, &ex_resp);
 80068ea:	f107 0310 	add.w	r3, r7, #16
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f872 	bl	80069dc <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

				if (resp != NULL) {
 80068fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d006      	beq.n	8006914 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0xbc>
					*resp = response;
 8006906:	f107 0310 	add.w	r3, r7, #16
 800690a:	4619      	mov	r1, r3
 800690c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006910:	f010 fbf7 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				}
				if (return_check_temp == $EXPECTED_RESPONSE) {
 8006914:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006918:	2b02      	cmp	r3, #2
 800691a:	d047      	beq.n	80069ac <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x154>
					break;
				} else {
					if (response.empty()) {
 800691c:	f107 0310 	add.w	r3, r7, #16
 8006920:	4618      	mov	r0, r3
 8006922:	f010 fc55 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01d      	beq.n	8006968 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x110>
						Print2("\tNo Response");
 800692c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006930:	4618      	mov	r0, r3
 8006932:	f010 fa8b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006936:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800693a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800693e:	4925      	ldr	r1, [pc, #148]	; (80069d4 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x17c>)
 8006940:	4618      	mov	r0, r3
 8006942:	f010 ff3f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006946:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800694a:	4619      	mov	r1, r3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fd07 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006952:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006956:	4618      	mov	r0, r3
 8006958:	f010 fbcd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800695c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006960:	4618      	mov	r0, r3
 8006962:	f010 fa75 	bl	8016e50 <_ZNSaIcED1Ev>
 8006966:	e01c      	b.n	80069a2 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x14a>
					} else {
						Print2("\tWrong response");
 8006968:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800696c:	4618      	mov	r0, r3
 800696e:	f010 fa6d 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006972:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006976:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800697a:	4917      	ldr	r1, [pc, #92]	; (80069d8 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x180>)
 800697c:	4618      	mov	r0, r3
 800697e:	f010 ff21 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006982:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006986:	4619      	mov	r1, r3
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fce9 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800698e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006992:	4618      	mov	r0, r3
 8006994:	f010 fbaf 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800699c:	4618      	mov	r0, r3
 800699e:	f010 fa57 	bl	8016e50 <_ZNSaIcED1Ev>
					}
				}
			} while (timeout_in_s == 0);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f43f af66 	beq.w	8006876 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x1e>
 80069aa:	e000      	b.n	80069ae <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_+0x156>
					break;
 80069ac:	bf00      	nop
			return return_check_temp;
 80069ae:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
		}
 80069b2:	f107 0310 	add.w	r3, r7, #16
 80069b6:	4618      	mov	r0, r3
 80069b8:	f010 fb9d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			return return_check_temp;
 80069bc:	4623      	mov	r3, r4
		}
 80069be:	4618      	mov	r0, r3
 80069c0:	37ac      	adds	r7, #172	; 0xac
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08017e00 	.word	0x08017e00
 80069cc:	08017fd8 	.word	0x08017fd8
 80069d0:	08017ff4 	.word	0x08017ff4
 80069d4:	08017ff8 	.word	0x08017ff8
 80069d8:	08018008 	.word	0x08018008

080069dc <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:

		NEOWAY_RETURN CHECK_RESPONSE(string *response, string *ex_resp) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
			if (ex_resp == NULL) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x16>
				return $ex_resp_NULL;
 80069ee:	2304      	movs	r3, #4
 80069f0:	e032      	b.n	8006a58 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7c>
			} else
				if (*response == *ex_resp || *ex_resp == "") {
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f006 fb35 	bl	800d064 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x32>
 8006a00:	4917      	ldr	r1, [pc, #92]	; (8006a60 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x84>)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f006 fb1b 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x36>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x38>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x40>
					return $EXPECTED_RESPONSE;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e01d      	b.n	8006a58 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7c>
				} else
					if (response->find("ERROR") == not_found) {
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4911      	ldr	r1, [pc, #68]	; (8006a64 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x88>)
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f010 fdf9 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x60>
						return $ERROR_RESPONSE;
 8006a38:	2306      	movs	r3, #6
 8006a3a:	e00d      	b.n	8006a58 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7c>
					} else
						if (response->size() == 0) {
 8006a3c:	68b8      	ldr	r0, [r7, #8]
 8006a3e:	f010 fb97 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7a>
							return $NO_RESPONSE;
 8006a52:	2305      	movs	r3, #5
 8006a54:	e000      	b.n	8006a58 <_ZN10UART_DEBUG14CHECK_RESPONSEEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x7c>
						} else {
							return $N_ERROR;
 8006a56:	2307      	movs	r3, #7
						}
			HAL_Delay(1);
		}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	08017e00 	.word	0x08017e00
 8006a64:	08017e94 	.word	0x08017e94

08006a68 <_ZN9VARIABLESD1Ev>:
class VARIABLES {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	4618      	mov	r0, r3
 8006a76:	f006 fa15 	bl	800cea4 <_ZN12DynamicArrayI9ParameterED1Ev>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f010 fb3a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <_ZN11BUTTON_READC1EP12DynamicArrayIP9VARIABLESENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
		};
		BUTTONPIN buttonpin;
		GPIO_PinState state = GPIO_PIN_RESET;
		bool rest_state = 0;

		BUTTON_READ(DynamicArray<VARIABLES*> *variables_pointer, string var_name, bool add_to_json = 0) :
 8006a8c:	b590      	push	{r4, r7, lr}
 8006a8e:	b08b      	sub	sp, #44	; 0x2c
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	70fb      	strb	r3, [r7, #3]
				VARIABLES(variables_pointer, var_name, add_to_json) {
 8006a9a:	68fc      	ldr	r4, [r7, #12]
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f010 fe5a 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	f107 0210 	add.w	r2, r7, #16
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7fc fe2f 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8006ab6:	f107 0310 	add.w	r3, r7, #16
 8006aba:	4618      	mov	r0, r3
 8006abc:	f010 fb1b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		}
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	372c      	adds	r7, #44	; 0x2c
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd90      	pop	{r4, r7, pc}

08006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JsonDocument with a memory pool on the stack.
template <size_t desiredCapacity>
class StaticJsonDocument : public JsonDocument {
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fb fdb8 	bl	800265a <_ZN11ArduinoJson7V6211HB12JsonDocumentD1Ev>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <_ZN12JSON_HANDLERC1ER12DynamicArrayIP9VARIABLESE>:
			$CLEAR_STRING,  //!<To clear JSON string
			$CLEAR_ALL,  //!< To clear both Packet,string
			$CLEAR_NONE  //!< To clear nothing
		};  //!<an enum that stores status about clearing JSON Packet, or JSON string

		JSON_HANDLER(DynamicArray<VARIABLES*> &variables_pointer_3) :
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
				variables_pointer_2(variables_pointer_3) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f006 faea 	bl	800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f006 fae4 	bl	800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 6405 	add.w	r4, r3, #2128	; 0x850
 8006b18:	f107 0308 	add.w	r3, r7, #8
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f010 f995 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	461a      	mov	r2, r3
 8006b28:	4912      	ldr	r1, [pc, #72]	; (8006b74 <_ZN12JSON_HANDLERC1ER12DynamicArrayIP9VARIABLESE+0x80>)
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f010 fe4a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b30:	f107 0308 	add.w	r3, r7, #8
 8006b34:	4618      	mov	r0, r3
 8006b36:	f010 f98b 	bl	8016e50 <_ZNSaIcED1Ev>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f603 0468 	addw	r4, r3, #2152	; 0x868
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	4618      	mov	r0, r3
 8006b46:	f010 f981 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4908      	ldr	r1, [pc, #32]	; (8006b74 <_ZN12JSON_HANDLERC1ER12DynamicArrayIP9VARIABLESE+0x80>)
 8006b52:	4620      	mov	r0, r4
 8006b54:	f010 fe36 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f010 f977 	bl	8016e50 <_ZNSaIcED1Ev>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
		}
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}
 8006b74:	08017e00 	.word	0x08017e00

08006b78 <_ZN11ArduinoJson7V6211HB6detail11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

// A proxy class to get or set a member of an object.
// https://arduinojson.org/v6/api/jsonobject/subscript/
template <typename TUpstream, typename TStringRef>
class MemberProxy
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f010 fab6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb>:
		 * >Now if we have to serialize, SerializeJson function is invoked.
		 * @param [in] variables_pointer_2 base address of Dynamic Array object with VARIABLES* type.
		 * @param [in] clear_enum_temp an enum storing status about json data. Initially initialized to $CLEAR_NONE
		 * @param [in] serialize A 1 bit Boolean value storing status about serialization.Initially initialized to 0
		 */
		void MAKE_META_JSON(clear_enum clear_enum_temp = $CLEAR_NONE, bool serialize = 0) {
 8006b94:	b5b0      	push	{r4, r5, r7, lr}
 8006b96:	ed2d 8b02 	vpush	{d8}
 8006b9a:	b0b0      	sub	sp, #192	; 0xc0
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	70bb      	strb	r3, [r7, #2]
			CLEAR_META(clear_enum_temp);
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f939 	bl	8006e24 <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE>
			for (uint32_t iter_1 = 0; iter_1 < variables_pointer_2.size(); iter_1++) {
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bb8:	e0f9      	b.n	8006dae <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x21a>
				VARIABLES *temp_ptr = *(variables_pointer_2.at(iter_1));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8006bc0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f006 faa5 	bl	800d114 <_ZN12DynamicArrayIP9VARIABLESE2atEm>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				if (temp_ptr->GET_VAR_VALUE_CONN() >= 0) {
 8006bd2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006bd6:	f7fc fe27 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 8006bda:	ec51 0b10 	vmov	r0, r1, d0
 8006bde:	2301      	movs	r3, #1
 8006be0:	461c      	mov	r4, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f7f9 ff8b 	bl	8000b04 <__aeabi_dcmpge>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x64>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	461c      	mov	r4, r3
 8006bf8:	b2e3      	uxtb	r3, r4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80d2 	beq.w	8006da4 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x210>
					meta_data_json[temp_ptr->GET_VAR_NAME()] = temp_ptr->GET_VAR_VALUE_CONN();
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8006c06:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006c0a:	f7fc fe02 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	673c      	str	r4, [r7, #112]	; 0x70
 8006c12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c14:	f107 040c 	add.w	r4, r7, #12
    return {*this, key};
 8006c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f010 fd9c 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006c24:	66bc      	str	r4, [r7, #104]	; 0x68
 8006c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c2e:	663b      	str	r3, [r7, #96]	; 0x60
      public VariantOperators<MemberProxy<TUpstream, TStringRef>> {
  friend class VariantAttorney;

 public:
  FORCE_INLINE MemberProxy(TUpstream upstream, TStringRef key)
      : _upstream(upstream), _key(key) {}
 8006c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c38:	3304      	adds	r3, #4
 8006c3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f010 fd8d 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006c42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c46:	4618      	mov	r0, r3
 8006c48:	f010 fa55 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c4c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006c50:	f7fc fdea 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 8006c54:	eeb0 7a40 	vmov.f32	s14, s0
 8006c58:	eef0 7a60 	vmov.f32	s15, s1
 8006c5c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 8006c60:	f107 030c 	add.w	r3, r7, #12
 8006c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  // Copies the specified value.
  // https://arduinojson.org/v6/api/jsonvariant/set/
  template <typename T>
  FORCE_INLINE bool set(const T& value) const {
    Converter<T>::toJson(value, getOrCreateVariant());
 8006c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c74:	ed93 8b00 	vldr	d8, [r3]
 8006c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const TDerived& derived() const {
    return static_cast<const TDerived&>(*this);
  }

  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(derived());
 8006c88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006c8c:	f008 fb85 	bl	800f39a <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7derivedEv>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return *this;
  }

 private:
  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(_upstream);
 8006c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return client.getPool();
 8006ca8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006cac:	f7fb fcf2 	bl	8002694 <_ZN11ArduinoJson7V6211HB12JsonDocument7getPoolEv>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  FORCE_INLINE VariantData* getData() const {
    return VariantAttorney::getData(derived());
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return VariantAttorney::getOrCreateData(derived());
 8006cc2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006cc6:	f008 fb68 	bl	800f39a <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7derivedEv>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return variantGetMember(VariantAttorney::getData(_upstream),
                            adaptString(_key));
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(_upstream),
 8006cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  template <typename TClient>
  FORCE_INLINE static VariantData* getOrCreateData(TClient& client) {
    return client.getOrCreateData();
 8006ce2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006ce6:	f7fb fcf8 	bl	80026da <_ZN11ArduinoJson7V6211HB12JsonDocument15getOrCreateDataEv>
 8006cea:	4605      	mov	r5, r0
 8006cec:	bf00      	nop
                                 adaptString(_key),
 8006cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cf2:	1d1a      	adds	r2, r3, #4
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(_upstream),
 8006cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f006 fe13 	bl	800d926 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_13StringAdapterIT_vE13AdaptedStringERKSA_>
 8006d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return client.getPool();
 8006d0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006d0e:	f7fb fcc1 	bl	8002694 <_ZN11ArduinoJson7V6211HB12JsonDocument7getPoolEv>
 8006d12:	4603      	mov	r3, r0
 8006d14:	bf00      	nop
 8006d16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006d1a:	ca06      	ldmia	r2, {r1, r2}
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f00a fb68 	bl	80113f2 <_ZN11ArduinoJson7V6211HB6detail21variantGetOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 8006d22:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(_upstream));
 8006d24:	bf00      	nop
    return client.getOrCreateData();
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
  return JsonVariant(getPool(), getData());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
  return JsonVariant(getPool(), getOrCreateData());
 8006d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fb fafc 	bl	800232e <_ZN11ArduinoJson7V6211HB11JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8006d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8006d42:	eef0 0a68 	vmov.f32	s1, s17
 8006d46:	f007 ff32 	bl	800ebae <_ZN11ArduinoJson7V6211HB9ConverterIdvE6toJsonEdNS0_11JsonVariantE>
 8006d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return VariantAttorney::getPool(derived());
 8006d52:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006d56:	f008 fb20 	bl	800f39a <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7derivedEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d64:	67fb      	str	r3, [r7, #124]	; 0x7c
    return VariantAttorney::getPool(_upstream);
 8006d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	67bb      	str	r3, [r7, #120]	; 0x78
    return client.getPool();
 8006d6c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006d6e:	f7fb fc91 	bl	8002694 <_ZN11ArduinoJson7V6211HB12JsonDocument7getPoolEv>
 8006d72:	4603      	mov	r3, r0
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
    MemoryPool* pool = getPool();
 8006d7c:	677b      	str	r3, [r7, #116]	; 0x74
    return pool && !pool->overflowed();
 8006d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x200>
 8006d84:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006d86:	f7fb f8ab 	bl	8001ee0 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10overflowedEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f083 0301 	eor.w	r3, r3, #1
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff feed 	bl	8006b78 <_ZN11ArduinoJson7V6211HB6detail11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
					HAL_Delay(100);
 8006d9e:	2064      	movs	r0, #100	; 0x64
 8006da0:	f00b fe4c 	bl	8012a3c <HAL_Delay>
			for (uint32_t iter_1 = 0; iter_1 < variables_pointer_2.size(); iter_1++) {
 8006da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006da8:	3301      	adds	r3, #1
 8006daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8006db4:	4618      	mov	r0, r3
 8006db6:	f006 f9a1 	bl	800d0fc <_ZN12DynamicArrayIP9VARIABLESE4sizeEv>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	bf34      	ite	cc
 8006dc4:	2301      	movcc	r3, #1
 8006dc6:	2300      	movcs	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f47f aef5 	bne.w	8006bba <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x26>
				}
			}
			if (serialize) {
 8006dd0:	78bb      	ldrb	r3, [r7, #2]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb+0x264>
				serializeJson(meta_data_json, meta_json_string);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    return getVariant();
 8006dde:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006de0:	f7fb fc46 	bl	8002670 <_ZNK11ArduinoJson7V6211HB12JsonDocument10getVariantEv>
 8006de4:	4603      	mov	r3, r0
 8006de6:	bf00      	nop
 8006de8:	461a      	mov	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f005 fe3f 	bl	800ca76 <_ZN11ArduinoJson7V6211HB13serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>
			}
		}
 8006df8:	bf00      	nop
 8006dfa:	37c0      	adds	r7, #192	; 0xc0
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	ecbd 8b02 	vpop	{d8}
 8006e02:	bdb0      	pop	{r4, r5, r7, pc}

08006e04 <_ZN12JSON_HANDLER20GET_META_JSON_STRINGB5cxx11Ev>:

		uint32_t GET_JSON_STRING_LEN() {
			return json_string.length();
		}

		string GET_META_JSON_STRING() {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
			return meta_json_string;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f010 fca0 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
		}
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE>:
					break;
				default:
					break;
			}
		}
		void CLEAR_META(clear_enum clear_enum_temp = $CLEAR_ALL) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
			switch (clear_enum_temp) {
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d006      	beq.n	8006e44 <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x20>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	dc1f      	bgt.n	8006e7a <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x56>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00f      	beq.n	8006e5e <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x3a>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d014      	beq.n	8006e6c <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x48>
					break;
				case $CLEAR_STRING:
					meta_json_string.clear();
					break;
				default:
					break;
 8006e42:	e01a      	b.n	8006e7a <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x56>
					meta_data_json.clear();
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fb fbde 	bl	800260c <_ZN11ArduinoJson7V6211HB12JsonDocument5clearEv>
					meta_json_string.clear();
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8006e56:	4618      	mov	r0, r3
 8006e58:	f010 f9b5 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
					break;
 8006e5c:	e00e      	b.n	8006e7c <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x58>
					meta_data_json.clear();
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fb fbd1 	bl	800260c <_ZN11ArduinoJson7V6211HB12JsonDocument5clearEv>
					break;
 8006e6a:	e007      	b.n	8006e7c <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x58>
					meta_json_string.clear();
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8006e72:	4618      	mov	r0, r3
 8006e74:	f010 f9a7 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
					break;
 8006e78:	e000      	b.n	8006e7c <_ZN12JSON_HANDLER10CLEAR_METAENS_10clear_enumE+0x58>
					break;
 8006e7a:	bf00      	nop
			}
		}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <_ZNK12JSON_HANDLER22COMPARE_META_DATA_JSONERN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>:
		}

		bool COMPARE_DATA_JSON(StaticJsonDocument<1024> &other) const {
			return data_json == other;
		}
		bool COMPARE_META_DATA_JSON(StaticJsonDocument<1024> &other) const {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
			return meta_data_json == other;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f006 f95a 	bl	800d152 <_ZN11ArduinoJson7V6211HB6detaileqINS0_18StaticJsonDocumentILj1024EEEEEbRKT_RKNS0_12JsonDocumentE>
 8006e9e:	4603      	mov	r3, r0
		}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_Z6go2appm>:
const uint32_t appadd = 0x801F000;
#endif
//uint32_t appadd = 0x0800EA60;
typedef void (*ptrFapp)();

void go2app(uint32_t APP_ADDR) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0a4      	sub	sp, #144	; 0x90
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	uint32_t JumpAddress;
	ptrFapp Jump_app;

	both_debug.Print2("\r\nAPP ADDRESS = " + d_t_h_s(APP_ADDR));
 8006eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fa faca 	bl	8001450 <_Z7d_t_h_sB5cxx11m>
 8006ebc:	f107 030c 	add.w	r3, r7, #12
 8006ec0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ec4:	4934      	ldr	r1, [pc, #208]	; (8006f98 <_Z6go2appm+0xf0>)
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f005 fd30 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4832      	ldr	r0, [pc, #200]	; (8006f9c <_Z6go2appm+0xf4>)
 8006ed4:	f7ff fa44 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006ed8:	f107 030c 	add.w	r3, r7, #12
 8006edc:	4618      	mov	r0, r3
 8006ede:	f010 f90a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f010 f905 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (((*(uint32_t*) APP_ADDR) & 0x2FFE0000) == 0x20000000) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <_Z6go2appm+0xf8>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d12b      	bne.n	8006f52 <_Z6go2appm+0xaa>
		JumpAddress = *(uint32_t*) (APP_ADDR + 4);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		both_debug.Print2("\tGoing to APP : " + d_t_h_s(JumpAddress));
 8006f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f08:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fa fa9f 	bl	8001450 <_Z7d_t_h_sB5cxx11m>
 8006f12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f16:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006f1a:	4922      	ldr	r1, [pc, #136]	; (8006fa4 <_Z6go2appm+0xfc>)
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f005 fd05 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8006f22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f26:	4619      	mov	r1, r3
 8006f28:	481c      	ldr	r0, [pc, #112]	; (8006f9c <_Z6go2appm+0xf4>)
 8006f2a:	f7ff fa19 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f32:	4618      	mov	r0, r3
 8006f34:	f010 f8df 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f010 f8da 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Jump_app = (ptrFapp) JumpAddress;
 8006f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
//		uint32_t MSP_ADD = *(uint32_t*) APP_ADDR;
//		both_debug.Print2("\tChanging MSP to: " + d_t_h_s(MSP_ADD));
//		__set_MSP(MSP_ADD);
		Jump_app();
 8006f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f4e:	4798      	blx	r3
	} else {
		both_debug.Print2("\r\nNo APP : Reseting system");
		NVIC_SystemReset();
	}
}
 8006f50:	e01e      	b.n	8006f90 <_Z6go2appm+0xe8>
		both_debug.Print2("\r\nNo APP : Reseting system");
 8006f52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f56:	4618      	mov	r0, r3
 8006f58:	f00f ff78 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006f5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006f60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f64:	4910      	ldr	r1, [pc, #64]	; (8006fa8 <_Z6go2appm+0x100>)
 8006f66:	4618      	mov	r0, r3
 8006f68:	f010 fc2c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f70:	4619      	mov	r1, r3
 8006f72:	480a      	ldr	r0, [pc, #40]	; (8006f9c <_Z6go2appm+0xf4>)
 8006f74:	f7ff f9f4 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006f78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f010 f8ba 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f86:	4618      	mov	r0, r3
 8006f88:	f00f ff62 	bl	8016e50 <_ZNSaIcED1Ev>
		NVIC_SystemReset();
 8006f8c:	f7fa f9b4 	bl	80012f8 <__NVIC_SystemReset>
}
 8006f90:	3790      	adds	r7, #144	; 0x90
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08018020 	.word	0x08018020
 8006f9c:	200002dc 	.word	0x200002dc
 8006fa0:	2ffe0000 	.word	0x2ffe0000
 8006fa4:	08018034 	.word	0x08018034
 8006fa8:	08018048 	.word	0x08018048

08006fac <_Z10PassAuthenv>:

#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE)
/**
 * @brief To take password input as a string from serial monitor and verify it and then enable or disable Print functionality.
 */
void PassAuthen() {
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b0ab      	sub	sp, #172	; 0xac
 8006fb0:	af00      	add	r7, sp, #0
	save_both_print(1);
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fc fd7c 	bl	8003ab0 <_Z15save_both_printb>
	both_debug.Print2("\r\nEnter Password\r\n");
 8006fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f00f ff45 	bl	8016e4c <_ZNSaIcEC1Ev>
 8006fc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006fc6:	f107 031c 	add.w	r3, r7, #28
 8006fca:	495b      	ldr	r1, [pc, #364]	; (8007138 <_Z10PassAuthenv+0x18c>)
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f010 fbf9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006fd2:	f107 031c 	add.w	r3, r7, #28
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4858      	ldr	r0, [pc, #352]	; (800713c <_Z10PassAuthenv+0x190>)
 8006fda:	f7ff f9c1 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006fde:	f107 031c 	add.w	r3, r7, #28
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f010 f887 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fe8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fec:	4618      	mov	r0, r3
 8006fee:	f00f ff2f 	bl	8016e50 <_ZNSaIcED1Ev>

	int try_count = 5;
 8006ff2:	2305      	movs	r3, #5
 8006ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	string entered_pass;
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f010 f84a 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	refresh_counter();
 8007000:	f7fc fb7c 	bl	80036fc <_Z15refresh_counterv>
	do {

		int ble_ser = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	603b      	str	r3, [r7, #0]
		both_debug.Both_Get_pass(3, &ble_ser);
 8007008:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800700c:	463b      	mov	r3, r7
 800700e:	2203      	movs	r2, #3
 8007010:	494a      	ldr	r1, [pc, #296]	; (800713c <_Z10PassAuthenv+0x190>)
 8007012:	f7ff faa9 	bl	8006568 <_ZN10UART_DEBUG13Both_Get_passB5cxx11EmPi>
 8007016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800701a:	4618      	mov	r0, r3
 800701c:	f010 f86b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		if (ble_ser == 1) {
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d125      	bne.n	8007072 <_Z10PassAuthenv+0xc6>
			restore_both_print();
 8007026:	f7fc fd54 	bl	8003ad2 <_Z18restore_both_printv>
			set_both_print(0);
 800702a:	2000      	movs	r0, #0
 800702c:	f7fc fc92 	bl	8003954 <_Z14set_both_printb>
			set_uart_print(1);
 8007030:	2001      	movs	r0, #1
 8007032:	f7fc fca5 	bl	8003980 <_Z14set_uart_printb>
			both_debug.Print2("\r\nUART PRINTING");
 8007036:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800703a:	4618      	mov	r0, r3
 800703c:	f00f ff06 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007040:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007044:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007048:	493d      	ldr	r1, [pc, #244]	; (8007140 <_Z10PassAuthenv+0x194>)
 800704a:	4618      	mov	r0, r3
 800704c:	f010 fbba 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007050:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007054:	4619      	mov	r1, r3
 8007056:	4839      	ldr	r0, [pc, #228]	; (800713c <_Z10PassAuthenv+0x190>)
 8007058:	f7ff f982 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800705c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007060:	4618      	mov	r0, r3
 8007062:	f010 f848 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007066:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800706a:	4618      	mov	r0, r3
 800706c:	f00f fef0 	bl	8016e50 <_ZNSaIcED1Ev>
			return;
 8007070:	e037      	b.n	80070e2 <_Z10PassAuthenv+0x136>
		}

		if (ble_ser == 2) {
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d125      	bne.n	80070c4 <_Z10PassAuthenv+0x118>
			restore_both_print();
 8007078:	f7fc fd2b 	bl	8003ad2 <_Z18restore_both_printv>
			set_both_print(0);
 800707c:	2000      	movs	r0, #0
 800707e:	f7fc fc69 	bl	8003954 <_Z14set_both_printb>
			set_ble_print(1);
 8007082:	2001      	movs	r0, #1
 8007084:	f7fc fc98 	bl	80039b8 <_Z13set_ble_printb>
			both_debug.Print2("\r\nBLE PRINTING");
 8007088:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800708c:	4618      	mov	r0, r3
 800708e:	f00f fedd 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007092:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007096:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800709a:	492a      	ldr	r1, [pc, #168]	; (8007144 <_Z10PassAuthenv+0x198>)
 800709c:	4618      	mov	r0, r3
 800709e:	f010 fb91 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80070a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070a6:	4619      	mov	r1, r3
 80070a8:	4824      	ldr	r0, [pc, #144]	; (800713c <_Z10PassAuthenv+0x190>)
 80070aa:	f7ff f959 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80070ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f010 f81f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80070b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80070bc:	4618      	mov	r0, r3
 80070be:	f00f fec7 	bl	8016e50 <_ZNSaIcED1Ev>
			return;
 80070c2:	e00e      	b.n	80070e2 <_Z10PassAuthenv+0x136>
		}

	} while (--try_count > 0);
 80070c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfcc      	ite	gt
 80070d6:	2301      	movgt	r3, #1
 80070d8:	2300      	movle	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d191      	bne.n	8007004 <_Z10PassAuthenv+0x58>
 80070e0:	e001      	b.n	80070e6 <_Z10PassAuthenv+0x13a>
 80070e2:	2400      	movs	r4, #0
 80070e4:	e01f      	b.n	8007126 <_Z10PassAuthenv+0x17a>
	both_debug.Print2("\r\n----------\r\n");
 80070e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f00f feae 	bl	8016e4c <_ZNSaIcEC1Ev>
 80070f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80070f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80070f8:	4913      	ldr	r1, [pc, #76]	; (8007148 <_Z10PassAuthenv+0x19c>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f010 fb62 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007100:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007104:	4619      	mov	r1, r3
 8007106:	480d      	ldr	r0, [pc, #52]	; (800713c <_Z10PassAuthenv+0x190>)
 8007108:	f7ff f92a 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800710c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007110:	4618      	mov	r0, r3
 8007112:	f00f fff0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007116:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800711a:	4618      	mov	r0, r3
 800711c:	f00f fe98 	bl	8016e50 <_ZNSaIcED1Ev>
	restore_both_print();
 8007120:	f7fc fcd7 	bl	8003ad2 <_Z18restore_both_printv>
}
 8007124:	2401      	movs	r4, #1
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	4618      	mov	r0, r3
 800712a:	f00f ffe4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800712e:	2c01      	cmp	r4, #1
 8007130:	37ac      	adds	r7, #172	; 0xac
 8007132:	46bd      	mov	sp, r7
 8007134:	bd90      	pop	{r4, r7, pc}
 8007136:	bf00      	nop
 8007138:	08018064 	.word	0x08018064
 800713c:	200002dc 	.word	0x200002dc
 8007140:	08018078 	.word	0x08018078
 8007144:	08018088 	.word	0x08018088
 8007148:	08018098 	.word	0x08018098

0800714c <_Z10MENU_PRINTb>:

#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE)
/**
 * @brief To display Device Configuration Menu- Index no, Variable name and Variable Value.
 */
void MENU_PRINT(bool take_input = 1) {
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 8007152:	af02      	add	r7, sp, #8
 8007154:	4602      	mov	r2, r0
 8007156:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800715a:	f2a3 73c9 	subw	r3, r3, #1993	; 0x7c9
 800715e:	701a      	strb	r2, [r3, #0]
#define try_count 5
	volatile double entered_int = 0;
 8007160:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007164:	4619      	mov	r1, r3
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	e941 2302 	strd	r2, r3, [r1, #-8]
	uint32_t try_times = try_count;
 8007172:	2305      	movs	r3, #5
 8007174:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc

	StaticJsonDocument < 1024 > saved_json;
 8007178:	f107 0320 	add.w	r3, r7, #32
 800717c:	4618      	mov	r0, r3
 800717e:	f005 ffac 	bl	800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>
	data_packet.MAKE_META_JSON(data_packet.$CLEAR_STRING, 1);
 8007182:	2201      	movs	r2, #1
 8007184:	2101      	movs	r1, #1
 8007186:	4833      	ldr	r0, [pc, #204]	; (8007254 <_Z10MENU_PRINTb+0x108>)
 8007188:	f7ff fd04 	bl	8006b94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb>
	deserializeJson(saved_json, data_packet.meta_json_string);
 800718c:	f107 0320 	add.w	r3, r7, #32
 8007190:	4931      	ldr	r1, [pc, #196]	; (8007258 <_Z10MENU_PRINTb+0x10c>)
 8007192:	4618      	mov	r0, r3
 8007194:	f005 fff7 	bl	800d186 <_ZN11ArduinoJson7V6211HB15deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>
	string entered = "";
 8007198:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800719c:	4618      	mov	r0, r3
 800719e:	f00f fe55 	bl	8016e4c <_ZNSaIcEC1Ev>
 80071a2:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	492c      	ldr	r1, [pc, #176]	; (800725c <_Z10MENU_PRINTb+0x110>)
 80071ac:	4618      	mov	r0, r3
 80071ae:	f010 fb09 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80071b2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80071b6:	4618      	mov	r0, r3
 80071b8:	f00f fe4a 	bl	8016e50 <_ZNSaIcED1Ev>
	do {
		entered_int = 0;
 80071bc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80071c0:	4619      	mov	r1, r3
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e941 2302 	strd	r2, r3, [r1, #-8]
		if (try_times == try_count) {
 80071ce:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	f040 8109 	bne.w	80073ea <_Z10MENU_PRINTb+0x29e>
			both_debug.Print2("\r\n>>>>>>>>>>>>>> MENU <<<<<<<<<<<<<<\r\n");
 80071d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071dc:	4618      	mov	r0, r3
 80071de:	f00f fe35 	bl	8016e4c <_ZNSaIcEC1Ev>
 80071e2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80071e6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80071ea:	491d      	ldr	r1, [pc, #116]	; (8007260 <_Z10MENU_PRINTb+0x114>)
 80071ec:	4618      	mov	r0, r3
 80071ee:	f010 fae9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80071f2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80071f6:	4619      	mov	r1, r3
 80071f8:	481a      	ldr	r0, [pc, #104]	; (8007264 <_Z10MENU_PRINTb+0x118>)
 80071fa:	f7ff f8b1 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80071fe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8007202:	4618      	mov	r0, r3
 8007204:	f00f ff77 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007208:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800720c:	4618      	mov	r0, r3
 800720e:	f00f fe1f 	bl	8016e50 <_ZNSaIcED1Ev>
			both_debug.Print2("\r\nIn : Co : Js : Name");
 8007212:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8007216:	4618      	mov	r0, r3
 8007218:	f00f fe18 	bl	8016e4c <_ZNSaIcEC1Ev>
 800721c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8007220:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8007224:	4910      	ldr	r1, [pc, #64]	; (8007268 <_Z10MENU_PRINTb+0x11c>)
 8007226:	4618      	mov	r0, r3
 8007228:	f010 facc 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800722c:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8007230:	4619      	mov	r1, r3
 8007232:	480c      	ldr	r0, [pc, #48]	; (8007264 <_Z10MENU_PRINTb+0x118>)
 8007234:	f7ff f894 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007238:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800723c:	4618      	mov	r0, r3
 800723e:	f00f ff5a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007242:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8007246:	4618      	mov	r0, r3
 8007248:	f00f fe02 	bl	8016e50 <_ZNSaIcED1Ev>
			//To dynamically print each variable's index number,name & value_conn
			for (uint32_t i = 0; i < total_menu_index; i++) {
 800724c:	2300      	movs	r3, #0
 800724e:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 8007252:	e0a3      	b.n	800739c <_Z10MENU_PRINTb+0x250>
 8007254:	200004c8 	.word	0x200004c8
 8007258:	20000d30 	.word	0x20000d30
 800725c:	08017e00 	.word	0x08017e00
 8007260:	080180a8 	.word	0x080180a8
 8007264:	200002dc 	.word	0x200002dc
 8007268:	080180d0 	.word	0x080180d0
				VARIABLES *tempi = *(variables_pointer.at(i));
 800726c:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 8007270:	48ea      	ldr	r0, [pc, #936]	; (800761c <_Z10MENU_PRINTb+0x4d0>)
 8007272:	f005 ff4f 	bl	800d114 <_ZN12DynamicArrayIP9VARIABLESE2atEm>
 8007276:	4603      	mov	r3, r0
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
				/**
				 *	Uncomment to print add_to_json along with variables in menu
				 */

//				both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 0, 1) + " : " + d_t_s(tempi->IS_add_to_json(), 0, 1) + " : " + tempi->GET_VAR_NAME());
				both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 0, 1) + " : " + tempi->GET_VAR_NAME());
 800727e:	f8d7 07c4 	ldr.w	r0, [r7, #1988]	; 0x7c4
 8007282:	f7fc fab9 	bl	80037f8 <_ZNK9VARIABLES9GET_indexEv>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 f94b 	bl	8000524 <__aeabi_i2d>
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8007296:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800729a:	2201      	movs	r2, #1
 800729c:	2100      	movs	r1, #0
 800729e:	ec45 4b10 	vmov	d0, r4, r5
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fa f940 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80072a8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80072ac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80072b0:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 80072b4:	49da      	ldr	r1, [pc, #872]	; (8007620 <_Z10MENU_PRINTb+0x4d4>)
 80072b6:	4618      	mov	r0, r3
 80072b8:	f005 fb38 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80072bc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80072c0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80072c4:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 80072c8:	4ad6      	ldr	r2, [pc, #856]	; (8007624 <_Z10MENU_PRINTb+0x4d8>)
 80072ca:	4618      	mov	r0, r3
 80072cc:	f005 fe75 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80072d0:	f8d7 07c4 	ldr.w	r0, [r7, #1988]	; 0x7c4
 80072d4:	f7fc faa8 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 80072d8:	eeb0 7a40 	vmov.f32	s14, s0
 80072dc:	eef0 7a60 	vmov.f32	s15, s1
 80072e0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80072e4:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80072e8:	2201      	movs	r2, #1
 80072ea:	2100      	movs	r1, #0
 80072ec:	eeb0 0a47 	vmov.f32	s0, s14
 80072f0:	eef0 0a67 	vmov.f32	s1, s15
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fa f917 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80072fa:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80072fe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8007302:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8007306:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800730a:	4618      	mov	r0, r3
 800730c:	f005 fa93 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8007310:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8007314:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007318:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800731c:	4ac1      	ldr	r2, [pc, #772]	; (8007624 <_Z10MENU_PRINTb+0x4d8>)
 800731e:	4618      	mov	r0, r3
 8007320:	f005 fe4b 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8007324:	f8d7 07c4 	ldr.w	r0, [r7, #1988]	; 0x7c4
 8007328:	f7fc fa73 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 800732c:	4602      	mov	r2, r0
 800732e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8007332:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007336:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 800733a:	4618      	mov	r0, r3
 800733c:	f005 ff35 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8007340:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007344:	4619      	mov	r1, r3
 8007346:	48b8      	ldr	r0, [pc, #736]	; (8007628 <_Z10MENU_PRINTb+0x4dc>)
 8007348:	f7ff f80a 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800734c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007350:	4618      	mov	r0, r3
 8007352:	f00f fed0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007356:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800735a:	4618      	mov	r0, r3
 800735c:	f00f fecb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007360:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8007364:	4618      	mov	r0, r3
 8007366:	f00f fec6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800736a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800736e:	4618      	mov	r0, r3
 8007370:	f00f fec1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007374:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8007378:	4618      	mov	r0, r3
 800737a:	f00f febc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800737e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8007382:	4618      	mov	r0, r3
 8007384:	f00f feb7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007388:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800738c:	4618      	mov	r0, r3
 800738e:	f00f feb2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			for (uint32_t i = 0; i < total_menu_index; i++) {
 8007392:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8007396:	3301      	adds	r3, #1
 8007398:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 800739c:	4ba3      	ldr	r3, [pc, #652]	; (800762c <_Z10MENU_PRINTb+0x4e0>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80073a6:	4293      	cmp	r3, r2
 80073a8:	f4ff af60 	bcc.w	800726c <_Z10MENU_PRINTb+0x120>
			}
			both_debug.Print2("\r\n\r\n>>>>>>>>>>>>>> MENU <<<<<<<<<<<<<<");
 80073ac:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80073b0:	4618      	mov	r0, r3
 80073b2:	f00f fd4b 	bl	8016e4c <_ZNSaIcEC1Ev>
 80073b6:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80073ba:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80073be:	499c      	ldr	r1, [pc, #624]	; (8007630 <_Z10MENU_PRINTb+0x4e4>)
 80073c0:	4618      	mov	r0, r3
 80073c2:	f010 f9ff 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80073c6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80073ca:	4619      	mov	r1, r3
 80073cc:	4896      	ldr	r0, [pc, #600]	; (8007628 <_Z10MENU_PRINTb+0x4dc>)
 80073ce:	f7fe ffc7 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80073d2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80073d6:	4618      	mov	r0, r3
 80073d8:	f00f fe8d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80073dc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80073e0:	4618      	mov	r0, r3
 80073e2:	f00f fd35 	bl	8016e50 <_ZNSaIcED1Ev>
			refresh_counter();
 80073e6:	f7fc f989 	bl	80036fc <_Z15refresh_counterv>
		}
		try_times--;
 80073ea:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80073ee:	3b01      	subs	r3, #1
 80073f0:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
		if (take_input) {
 80073f4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80073f8:	f2a3 73c9 	subw	r3, r3, #1993	; 0x7c9
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 8294 	beq.w	800792c <_Z10MENU_PRINTb+0x7e0>
			both_debug.Both_read_check("Enter index", 20, "", &entered);
 8007404:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 8007408:	4618      	mov	r0, r3
 800740a:	f00f fd1f 	bl	8016e4c <_ZNSaIcEC1Ev>
 800740e:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 8007412:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8007416:	4987      	ldr	r1, [pc, #540]	; (8007634 <_Z10MENU_PRINTb+0x4e8>)
 8007418:	4618      	mov	r0, r3
 800741a:	f010 f9d3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800741e:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8007422:	4618      	mov	r0, r3
 8007424:	f00f fd12 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007428:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800742c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8007430:	4981      	ldr	r1, [pc, #516]	; (8007638 <_Z10MENU_PRINTb+0x4ec>)
 8007432:	4618      	mov	r0, r3
 8007434:	f010 f9c6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007438:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800743c:	f207 5154 	addw	r1, r7, #1364	; 0x554
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	4613      	mov	r3, r2
 8007448:	2214      	movs	r2, #20
 800744a:	4877      	ldr	r0, [pc, #476]	; (8007628 <_Z10MENU_PRINTb+0x4dc>)
 800744c:	f7ff fa04 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8007450:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8007454:	4618      	mov	r0, r3
 8007456:	f00f fe4e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800745a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800745e:	4618      	mov	r0, r3
 8007460:	f00f fcf6 	bl	8016e50 <_ZNSaIcED1Ev>
 8007464:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8007468:	4618      	mov	r0, r3
 800746a:	f00f fe44 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800746e:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 8007472:	4618      	mov	r0, r3
 8007474:	f00f fcec 	bl	8016e50 <_ZNSaIcED1Ev>
			entered_int = s_t_d(entered);
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f7fa f8f7 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007482:	eeb0 7a40 	vmov.f32	s14, s0
 8007486:	eef0 7a60 	vmov.f32	s15, s1
 800748a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800748e:	ed03 7b02 	vstr	d7, [r3, #-8]
			if (entered_int > 0) {
 8007492:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007496:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800749a:	2301      	movs	r3, #1
 800749c:	461c      	mov	r4, r3
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	f7f9 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <_Z10MENU_PRINTb+0x368>
 80074b0:	2300      	movs	r3, #0
 80074b2:	461c      	mov	r4, r3
 80074b4:	b2e3      	uxtb	r3, r4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8216 	beq.w	80078e8 <_Z10MENU_PRINTb+0x79c>
				if (entered_int < variables_pointer.size()) {
 80074bc:	4857      	ldr	r0, [pc, #348]	; (800761c <_Z10MENU_PRINTb+0x4d0>)
 80074be:	f005 fe1d 	bl	800d0fc <_ZN12DynamicArrayIP9VARIABLESE4sizeEv>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 f81d 	bl	8000504 <__aeabi_ui2d>
 80074ca:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80074ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074d2:	2401      	movs	r4, #1
 80074d4:	f7f9 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <_Z10MENU_PRINTb+0x396>
 80074de:	2300      	movs	r3, #0
 80074e0:	461c      	mov	r4, r3
 80074e2:	b2e3      	uxtb	r3, r4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 81aa 	beq.w	800783e <_Z10MENU_PRINTb+0x6f2>
					entered.clear();
 80074ea:	f107 0308 	add.w	r3, r7, #8
 80074ee:	4618      	mov	r0, r3
 80074f0:	f00f fe69 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
					VARIABLES *tempi = *(variables_pointer.at(entered_int - 1));
 80074f4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80074f8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	4b4e      	ldr	r3, [pc, #312]	; (800763c <_Z10MENU_PRINTb+0x4f0>)
 8007502:	f7f8 fec1 	bl	8000288 <__aeabi_dsub>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	f7f9 fb35 	bl	8000b7c <__aeabi_d2uiz>
 8007512:	4603      	mov	r3, r0
 8007514:	4619      	mov	r1, r3
 8007516:	4841      	ldr	r0, [pc, #260]	; (800761c <_Z10MENU_PRINTb+0x4d0>)
 8007518:	f005 fdfc 	bl	800d114 <_ZN12DynamicArrayIP9VARIABLESE2atEm>
 800751c:	4603      	mov	r3, r0
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
					/**
					 *	Uncomment to print add_to_json along with variables in menu
					 */

//					both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 0, 1) + " : " + d_t_s(tempi->IS_add_to_json(), 0, 1) + " : " + tempi->GET_VAR_NAME());
					both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 6, 1) + " : " + tempi->GET_VAR_NAME());
 8007524:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 8007528:	f7fc f966 	bl	80037f8 <_ZNK9VARIABLES9GET_indexEv>
 800752c:	4603      	mov	r3, r0
 800752e:	4618      	mov	r0, r3
 8007530:	f7f8 fff8 	bl	8000524 <__aeabi_i2d>
 8007534:	4604      	mov	r4, r0
 8007536:	460d      	mov	r5, r1
 8007538:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800753c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8007540:	2201      	movs	r2, #1
 8007542:	2100      	movs	r1, #0
 8007544:	ec45 4b10 	vmov	d0, r4, r5
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 ffed 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800754e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8007552:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007556:	f207 6204 	addw	r2, r7, #1540	; 0x604
 800755a:	4931      	ldr	r1, [pc, #196]	; (8007620 <_Z10MENU_PRINTb+0x4d4>)
 800755c:	4618      	mov	r0, r3
 800755e:	f005 f9e5 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007562:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8007566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800756a:	f207 51ec 	addw	r1, r7, #1516	; 0x5ec
 800756e:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <_Z10MENU_PRINTb+0x4d8>)
 8007570:	4618      	mov	r0, r3
 8007572:	f005 fd22 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8007576:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 800757a:	f7fc f955 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800757e:	eeb0 7a40 	vmov.f32	s14, s0
 8007582:	eef0 7a60 	vmov.f32	s15, s1
 8007586:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800758a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800758e:	2201      	movs	r2, #1
 8007590:	2106      	movs	r1, #6
 8007592:	eeb0 0a47 	vmov.f32	s0, s14
 8007596:	eef0 0a67 	vmov.f32	s1, s15
 800759a:	4618      	mov	r0, r3
 800759c:	f7f9 ffc4 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80075a0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80075a4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80075a8:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 80075ac:	f207 51d4 	addw	r1, r7, #1492	; 0x5d4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f005 f940 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 80075b6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80075ba:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80075be:	f207 51bc 	addw	r1, r7, #1468	; 0x5bc
 80075c2:	4a18      	ldr	r2, [pc, #96]	; (8007624 <_Z10MENU_PRINTb+0x4d8>)
 80075c4:	4618      	mov	r0, r3
 80075c6:	f005 fcf8 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80075ca:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 80075ce:	f7fc f920 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 80075d2:	4602      	mov	r2, r0
 80075d4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80075d8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80075dc:	f207 51a4 	addw	r1, r7, #1444	; 0x5a4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f005 fde2 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80075e6:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80075ea:	4619      	mov	r1, r3
 80075ec:	480e      	ldr	r0, [pc, #56]	; (8007628 <_Z10MENU_PRINTb+0x4dc>)
 80075ee:	f7fe feb7 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80075f2:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80075f6:	4618      	mov	r0, r3
 80075f8:	f00f fd7d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80075fc:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 8007600:	4618      	mov	r0, r3
 8007602:	f00f fd78 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007606:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 800760a:	4618      	mov	r0, r3
 800760c:	f00f fd73 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007610:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8007614:	4618      	mov	r0, r3
 8007616:	f00f fd6e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800761a:	e011      	b.n	8007640 <_Z10MENU_PRINTb+0x4f4>
 800761c:	20000144 	.word	0x20000144
 8007620:	08017e38 	.word	0x08017e38
 8007624:	08017ff4 	.word	0x08017ff4
 8007628:	200002dc 	.word	0x200002dc
 800762c:	20000140 	.word	0x20000140
 8007630:	080180e8 	.word	0x080180e8
 8007634:	08018110 	.word	0x08018110
 8007638:	08017e00 	.word	0x08017e00
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8007644:	4618      	mov	r0, r3
 8007646:	f00f fd56 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800764a:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 800764e:	4618      	mov	r0, r3
 8007650:	f00f fd51 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007654:	f207 6304 	addw	r3, r7, #1540	; 0x604
 8007658:	4618      	mov	r0, r3
 800765a:	f00f fd4c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					both_debug.Both_read_check("Enter Value", 20, "", &entered);
 800765e:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8007662:	4618      	mov	r0, r3
 8007664:	f00f fbf2 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007668:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 800766c:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8007670:	49d1      	ldr	r1, [pc, #836]	; (80079b8 <_Z10MENU_PRINTb+0x86c>)
 8007672:	4618      	mov	r0, r3
 8007674:	f010 f8a6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007678:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800767c:	4618      	mov	r0, r3
 800767e:	f00f fbe5 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007682:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8007686:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800768a:	49cc      	ldr	r1, [pc, #816]	; (80079bc <_Z10MENU_PRINTb+0x870>)
 800768c:	4618      	mov	r0, r3
 800768e:	f010 f899 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007692:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8007696:	f207 6134 	addw	r1, r7, #1588	; 0x634
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	2214      	movs	r2, #20
 80076a4:	48c6      	ldr	r0, [pc, #792]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 80076a6:	f7ff f8d7 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 80076aa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80076ae:	4618      	mov	r0, r3
 80076b0:	f00f fd21 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80076b4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80076b8:	4618      	mov	r0, r3
 80076ba:	f00f fbc9 	bl	8016e50 <_ZNSaIcED1Ev>
 80076be:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80076c2:	4618      	mov	r0, r3
 80076c4:	f00f fd17 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80076c8:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f00f fbbf 	bl	8016e50 <_ZNSaIcED1Ev>
					double entered_int_2 = s_t_d(entered);
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7f9 ffca 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80076dc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80076e0:	ed83 0b00 	vstr	d0, [r3]
					if (entered_int_2 >= 0 && !entered.empty()) {
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 80076f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f4:	f7f9 fa06 	bl	8000b04 <__aeabi_dcmpge>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <_Z10MENU_PRINTb+0x5cc>
 80076fe:	f107 0308 	add.w	r3, r7, #8
 8007702:	4618      	mov	r0, r3
 8007704:	f00f fd64 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8007708:	4603      	mov	r3, r0
 800770a:	f083 0301 	eor.w	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <_Z10MENU_PRINTb+0x5cc>
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <_Z10MENU_PRINTb+0x5ce>
 8007718:	2300      	movs	r3, #0
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 80e0 	beq.w	80078e0 <_Z10MENU_PRINTb+0x794>
						tempi->SET_VAR_VALUE_CONN(entered_int_2);
 8007720:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8007724:	ed93 0b00 	vldr	d0, [r3]
 8007728:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 800772c:	f7fc f88e 	bl	800384c <_ZN9VARIABLES18SET_VAR_VALUE_CONNEd>
//						both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 5, 1) + " : " + d_t_s(tempi->IS_add_to_json(), 0, 1) + " : " + tempi->GET_VAR_NAME());
						both_debug.Print2("\r\n" + d_t_s(tempi->GET_index(), 0, 1) + " : " + d_t_s(tempi->GET_VAR_VALUE_CONN(), 6, 1) + " : " + tempi->GET_VAR_NAME());
 8007730:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 8007734:	f7fc f860 	bl	80037f8 <_ZNK9VARIABLES9GET_indexEv>
 8007738:	4603      	mov	r3, r0
 800773a:	4618      	mov	r0, r3
 800773c:	f7f8 fef2 	bl	8000524 <__aeabi_i2d>
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 8007748:	2201      	movs	r2, #1
 800774a:	2100      	movs	r1, #0
 800774c:	ec45 4b10 	vmov	d0, r4, r5
 8007750:	4618      	mov	r0, r3
 8007752:	f7f9 fee9 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8007756:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800775a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800775e:	f207 62e4 	addw	r2, r7, #1764	; 0x6e4
 8007762:	4998      	ldr	r1, [pc, #608]	; (80079c4 <_Z10MENU_PRINTb+0x878>)
 8007764:	4618      	mov	r0, r3
 8007766:	f005 f8e1 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800776a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800776e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007772:	f207 61cc 	addw	r1, r7, #1740	; 0x6cc
 8007776:	4a94      	ldr	r2, [pc, #592]	; (80079c8 <_Z10MENU_PRINTb+0x87c>)
 8007778:	4618      	mov	r0, r3
 800777a:	f005 fc1e 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800777e:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 8007782:	f7fc f851 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 8007786:	eeb0 7a40 	vmov.f32	s14, s0
 800778a:	eef0 7a60 	vmov.f32	s15, s1
 800778e:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8007792:	2201      	movs	r2, #1
 8007794:	2106      	movs	r1, #6
 8007796:	eeb0 0a47 	vmov.f32	s0, s14
 800779a:	eef0 0a67 	vmov.f32	s1, s15
 800779e:	4618      	mov	r0, r3
 80077a0:	f7f9 fec2 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 80077a4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80077a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80077ac:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80077b0:	f207 61b4 	addw	r1, r7, #1716	; 0x6b4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f005 f83e 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 80077ba:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80077be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80077c2:	f207 619c 	addw	r1, r7, #1692	; 0x69c
 80077c6:	4a80      	ldr	r2, [pc, #512]	; (80079c8 <_Z10MENU_PRINTb+0x87c>)
 80077c8:	4618      	mov	r0, r3
 80077ca:	f005 fbf6 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80077ce:	f8d7 07c0 	ldr.w	r0, [r7, #1984]	; 0x7c0
 80077d2:	f7fc f81e 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 80077d6:	4602      	mov	r2, r0
 80077d8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80077dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80077e0:	f207 6184 	addw	r1, r7, #1668	; 0x684
 80077e4:	4618      	mov	r0, r3
 80077e6:	f005 fce0 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80077ea:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80077ee:	4619      	mov	r1, r3
 80077f0:	4873      	ldr	r0, [pc, #460]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 80077f2:	f7fe fdb5 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80077f6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80077fa:	4618      	mov	r0, r3
 80077fc:	f00f fc7b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007800:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8007804:	4618      	mov	r0, r3
 8007806:	f00f fc76 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800780a:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 800780e:	4618      	mov	r0, r3
 8007810:	f00f fc71 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007814:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8007818:	4618      	mov	r0, r3
 800781a:	f00f fc6c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800781e:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8007822:	4618      	mov	r0, r3
 8007824:	f00f fc67 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007828:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 800782c:	4618      	mov	r0, r3
 800782e:	f00f fc62 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007832:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 8007836:	4618      	mov	r0, r3
 8007838:	f00f fc5d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800783c:	e050      	b.n	80078e0 <_Z10MENU_PRINTb+0x794>
					}
				} else
					if (entered_int == variables_pointer.size()) {
 800783e:	4863      	ldr	r0, [pc, #396]	; (80079cc <_Z10MENU_PRINTb+0x880>)
 8007840:	f005 fc5c 	bl	800d0fc <_ZN12DynamicArrayIP9VARIABLESE4sizeEv>
 8007844:	4603      	mov	r3, r0
 8007846:	4618      	mov	r0, r3
 8007848:	f7f8 fe5c 	bl	8000504 <__aeabi_ui2d>
 800784c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007854:	2401      	movs	r4, #1
 8007856:	f7f9 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <_Z10MENU_PRINTb+0x718>
 8007860:	2300      	movs	r3, #0
 8007862:	461c      	mov	r4, r3
 8007864:	b2e3      	uxtb	r3, r4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01d      	beq.n	80078a6 <_Z10MENU_PRINTb+0x75a>
						both_debug.Print2("\r\nExiting");
 800786a:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 800786e:	4618      	mov	r0, r3
 8007870:	f00f faec 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007874:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8007878:	f207 7314 	addw	r3, r7, #1812	; 0x714
 800787c:	4954      	ldr	r1, [pc, #336]	; (80079d0 <_Z10MENU_PRINTb+0x884>)
 800787e:	4618      	mov	r0, r3
 8007880:	f00f ffa0 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007884:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8007888:	4619      	mov	r1, r3
 800788a:	484d      	ldr	r0, [pc, #308]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 800788c:	f7fe fd68 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007890:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8007894:	4618      	mov	r0, r3
 8007896:	f00f fc2e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800789a:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 800789e:	4618      	mov	r0, r3
 80078a0:	f00f fad6 	bl	8016e50 <_ZNSaIcED1Ev>
						break;
 80078a4:	e05c      	b.n	8007960 <_Z10MENU_PRINTb+0x814>
					} else {
						both_debug.Print2("Invalid Input");
 80078a6:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80078aa:	4618      	mov	r0, r3
 80078ac:	f00f face 	bl	8016e4c <_ZNSaIcEC1Ev>
 80078b0:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80078b4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80078b8:	4946      	ldr	r1, [pc, #280]	; (80079d4 <_Z10MENU_PRINTb+0x888>)
 80078ba:	4618      	mov	r0, r3
 80078bc:	f00f ff82 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80078c0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80078c4:	4619      	mov	r1, r3
 80078c6:	483e      	ldr	r0, [pc, #248]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 80078c8:	f7fe fd4a 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80078cc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80078d0:	4618      	mov	r0, r3
 80078d2:	f00f fc10 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80078d6:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80078da:	4618      	mov	r0, r3
 80078dc:	f00f fab8 	bl	8016e50 <_ZNSaIcED1Ev>
					}
				try_times = try_count;
 80078e0:	2305      	movs	r3, #5
 80078e2:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 80078e6:	e021      	b.n	800792c <_Z10MENU_PRINTb+0x7e0>
			} else {
				if (try_times == try_count - 1) {
 80078e8:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d11d      	bne.n	800792c <_Z10MENU_PRINTb+0x7e0>
					both_debug.Print2("\r\nExiting");
 80078f0:	f207 7364 	addw	r3, r7, #1892	; 0x764
 80078f4:	4618      	mov	r0, r3
 80078f6:	f00f faa9 	bl	8016e4c <_ZNSaIcEC1Ev>
 80078fa:	f207 7264 	addw	r2, r7, #1892	; 0x764
 80078fe:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8007902:	4933      	ldr	r1, [pc, #204]	; (80079d0 <_Z10MENU_PRINTb+0x884>)
 8007904:	4618      	mov	r0, r3
 8007906:	f00f ff5d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800790a:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800790e:	4619      	mov	r1, r3
 8007910:	482b      	ldr	r0, [pc, #172]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 8007912:	f7fe fd25 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007916:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800791a:	4618      	mov	r0, r3
 800791c:	f00f fbeb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007920:	f207 7364 	addw	r3, r7, #1892	; 0x764
 8007924:	4618      	mov	r0, r3
 8007926:	f00f fa93 	bl	8016e50 <_ZNSaIcED1Ev>
					break;
 800792a:	e019      	b.n	8007960 <_Z10MENU_PRINTb+0x814>
				};
			}
		}
	} while (entered_int != EXIT.GET_index() && try_times > 0);
 800792c:	482a      	ldr	r0, [pc, #168]	; (80079d8 <_Z10MENU_PRINTb+0x88c>)
 800792e:	f7fb ff63 	bl	80037f8 <_ZNK9VARIABLES9GET_indexEv>
 8007932:	4603      	mov	r3, r0
 8007934:	4618      	mov	r0, r3
 8007936:	f7f8 fdf5 	bl	8000524 <__aeabi_i2d>
 800793a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800793e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <_Z10MENU_PRINTb+0x80c>
 800794c:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <_Z10MENU_PRINTb+0x80c>
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <_Z10MENU_PRINTb+0x80e>
 8007958:	2300      	movs	r3, #0
 800795a:	2b00      	cmp	r3, #0
 800795c:	f47f ac2e 	bne.w	80071bc <_Z10MENU_PRINTb+0x70>
	data_packet.MAKE_META_JSON(data_packet.$CLEAR_STRING, 1);
 8007960:	2201      	movs	r2, #1
 8007962:	2101      	movs	r1, #1
 8007964:	481d      	ldr	r0, [pc, #116]	; (80079dc <_Z10MENU_PRINTb+0x890>)
 8007966:	f7ff f915 	bl	8006b94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb>
	if (data_packet.COMPARE_META_DATA_JSON(saved_json)) {
 800796a:	f107 0320 	add.w	r3, r7, #32
 800796e:	4619      	mov	r1, r3
 8007970:	481a      	ldr	r0, [pc, #104]	; (80079dc <_Z10MENU_PRINTb+0x890>)
 8007972:	f7ff fa87 	bl	8006e84 <_ZNK12JSON_HANDLER22COMPARE_META_DATA_JSONERN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d033      	beq.n	80079e4 <_Z10MENU_PRINTb+0x898>
		both_debug.Print2("\r\nBoth Same JSON\r\n");
 800797c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8007980:	4618      	mov	r0, r3
 8007982:	f00f fa63 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007986:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800798a:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800798e:	4914      	ldr	r1, [pc, #80]	; (80079e0 <_Z10MENU_PRINTb+0x894>)
 8007990:	4618      	mov	r0, r3
 8007992:	f00f ff17 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007996:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800799a:	4619      	mov	r1, r3
 800799c:	4808      	ldr	r0, [pc, #32]	; (80079c0 <_Z10MENU_PRINTb+0x874>)
 800799e:	f7fe fcdf 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80079a2:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80079a6:	4618      	mov	r0, r3
 80079a8:	f00f fba5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80079ac:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80079b0:	4618      	mov	r0, r3
 80079b2:	f00f fa4d 	bl	8016e50 <_ZNSaIcED1Ev>
 80079b6:	e048      	b.n	8007a4a <_Z10MENU_PRINTb+0x8fe>
 80079b8:	0801811c 	.word	0x0801811c
 80079bc:	08017e00 	.word	0x08017e00
 80079c0:	200002dc 	.word	0x200002dc
 80079c4:	08017e38 	.word	0x08017e38
 80079c8:	08017ff4 	.word	0x08017ff4
 80079cc:	20000144 	.word	0x20000144
 80079d0:	08018128 	.word	0x08018128
 80079d4:	08018134 	.word	0x08018134
 80079d8:	20000498 	.word	0x20000498
 80079dc:	200004c8 	.word	0x200004c8
 80079e0:	08018144 	.word	0x08018144
	} else {
		both_debug.Print2("\r\nNot Same JSON\r\n");
 80079e4:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 80079e8:	4618      	mov	r0, r3
 80079ea:	f00f fa2f 	bl	8016e4c <_ZNSaIcEC1Ev>
 80079ee:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 80079f2:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80079f6:	491c      	ldr	r1, [pc, #112]	; (8007a68 <_Z10MENU_PRINTb+0x91c>)
 80079f8:	4618      	mov	r0, r3
 80079fa:	f00f fee3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80079fe:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8007a02:	4619      	mov	r1, r3
 8007a04:	4819      	ldr	r0, [pc, #100]	; (8007a6c <_Z10MENU_PRINTb+0x920>)
 8007a06:	f7fe fcab 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007a0a:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f00f fb71 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007a14:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f00f fa19 	bl	8016e50 <_ZNSaIcED1Ev>

		data_packet.MAKE_META_JSON(data_packet.$CLEAR_STRING, 1);
 8007a1e:	2201      	movs	r2, #1
 8007a20:	2101      	movs	r1, #1
 8007a22:	4813      	ldr	r0, [pc, #76]	; (8007a70 <_Z10MENU_PRINTb+0x924>)
 8007a24:	f7ff f8b6 	bl	8006b94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb>
		write_file(config_file_name, data_packet.GET_META_JSON_STRING());
 8007a28:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007a2c:	4910      	ldr	r1, [pc, #64]	; (8007a70 <_Z10MENU_PRINTb+0x924>)
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff f9e8 	bl	8006e04 <_ZN12JSON_HANDLER20GET_META_JSON_STRINGB5cxx11Ev>
 8007a34:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007a38:	4619      	mov	r1, r3
 8007a3a:	480e      	ldr	r0, [pc, #56]	; (8007a74 <_Z10MENU_PRINTb+0x928>)
 8007a3c:	f000 f8b4 	bl	8007ba8 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>
 8007a40:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f00f fb56 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007a4a:	f107 0308 	add.w	r3, r7, #8
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f00f fb51 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007a54:	f107 0320 	add.w	r3, r7, #32
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff f83e 	bl	8006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>
 8007a5e:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08018158 	.word	0x08018158
 8007a6c:	200002dc 	.word	0x200002dc
 8007a70:	200004c8 	.word	0x200004c8
 8007a74:	20000128 	.word	0x20000128

08007a78 <_Z16save_meta_neowayv>:

#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE)
/**
 * @brief Saves configuration to neoway
 */
void save_meta_neoway() {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
	data_packet.MAKE_META_JSON(data_packet.$CLEAR_STRING, 1);
 8007a7e:	2201      	movs	r2, #1
 8007a80:	2101      	movs	r1, #1
 8007a82:	480a      	ldr	r0, [pc, #40]	; (8007aac <_Z16save_meta_neowayv+0x34>)
 8007a84:	f7ff f886 	bl	8006b94 <_ZN12JSON_HANDLER14MAKE_META_JSONENS_10clear_enumEb>
	write_file(config_file_name, data_packet.GET_META_JSON_STRING());
 8007a88:	463b      	mov	r3, r7
 8007a8a:	4908      	ldr	r1, [pc, #32]	; (8007aac <_Z16save_meta_neowayv+0x34>)
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff f9b9 	bl	8006e04 <_ZN12JSON_HANDLER20GET_META_JSON_STRINGB5cxx11Ev>
 8007a92:	463b      	mov	r3, r7
 8007a94:	4619      	mov	r1, r3
 8007a96:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <_Z16save_meta_neowayv+0x38>)
 8007a98:	f000 f886 	bl	8007ba8 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f00f fb29 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200004c8 	.word	0x200004c8
 8007ab0:	20000128 	.word	0x20000128
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>:
/**
 * @brief Updates the read configuration at startup to respective variables
 * @param[in] config_json
 */

void UPDATE_CONFIG(const StaticJsonDocument<1024> &config_json) {
 8007ab8:	b5b0      	push	{r4, r5, r7, lr}
 8007aba:	b092      	sub	sp, #72	; 0x48
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < total_menu_index; i++) {
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac4:	e05c      	b.n	8007b80 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xc8>
		VARIABLES *tempi = *(variables_pointer.at(i));
 8007ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ac8:	4835      	ldr	r0, [pc, #212]	; (8007ba0 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xe8>)
 8007aca:	f005 fb23 	bl	800d114 <_ZN12DynamicArrayIP9VARIABLESE2atEm>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	643b      	str	r3, [r7, #64]	; 0x40
		if (config_json.containsKey(tempi->GET_VAR_NAME())) {
 8007ad4:	687c      	ldr	r4, [r7, #4]
 8007ad6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007ad8:	f7fb fe9b 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 8007adc:	4603      	mov	r3, r0
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f005 fb79 	bl	800d1d8 <_ZNK11ArduinoJson7V6211HB12JsonDocument11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d041      	beq.n	8007b70 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xb8>
			tempi->SET_VAR_VALUE_CONN(s_t_d(config_json[tempi->GET_VAR_NAME()]));
 8007aec:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8007aee:	687c      	ldr	r4, [r7, #4]
 8007af0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007af2:	f7fb fe8e 	bl	8003812 <_ZNK9VARIABLES12GET_VAR_NAMEB5cxx11Ev>
 8007af6:	4603      	mov	r3, r0
 8007af8:	63bc      	str	r4, [r7, #56]	; 0x38
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
    return JsonVariantConst(_data.getMember(detail::adaptString(key)));
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	f103 0418 	add.w	r4, r3, #24
 8007b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f005 ff0c 	bl	800d926 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_13StringAdapterIT_vE13AdaptedStringERKSA_>
 8007b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b16:	4620      	mov	r0, r4
 8007b18:	f005 ff14 	bl	800d944 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_14SizedRamStringEEEPS2_T_>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fa fbe7 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	f107 020c 	add.w	r2, r7, #12
 8007b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f007 f923 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 8007b42:	bf00      	nop
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7f9 fd91 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007b4e:	eeb0 7a40 	vmov.f32	s14, s0
 8007b52:	eef0 7a60 	vmov.f32	s15, s1
 8007b56:	eeb0 0a47 	vmov.f32	s0, s14
 8007b5a:	eef0 0a67 	vmov.f32	s1, s15
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7fb fe74 	bl	800384c <_ZN9VARIABLES18SET_VAR_VALUE_CONNEd>
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f00f fac4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b6e:	e004      	b.n	8007b7a <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xc2>
		} else {
			tempi->SET_VAR_VALUE_CONN(-1);
 8007b70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007b98 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xe0>
 8007b74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007b76:	f7fb fe69 	bl	800384c <_ZN9VARIABLES18SET_VAR_VALUE_CONNEd>
	for (uint32_t i = 0; i < total_menu_index; i++) {
 8007b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b80:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xec>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d39c      	bcc.n	8007ac6 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xe>
		}
	}
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	3748      	adds	r7, #72	; 0x48
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bdb0      	pop	{r4, r5, r7, pc}
 8007b96:	bf00      	nop
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	bff00000 	.word	0xbff00000
 8007ba0:	20000144 	.word	0x20000144
 8007ba4:	20000140 	.word	0x20000140

08007ba8 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>:
/**
 * @brief Write configuration file to neoway
 * @param[in] file_name
 * @param[in] config_string
 */
void write_file(string &file_name, string config_string) {
 8007ba8:	b5b0      	push	{r4, r5, r7, lr}
 8007baa:	b0ce      	sub	sp, #312	; 0x138
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bb2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bb6:	6018      	str	r0, [r3, #0]
 8007bb8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007bc0:	6019      	str	r1, [r3, #0]

	ble_cont = $BREAK;
 8007bc2:	4b83      	ldr	r3, [pc, #524]	; (8007dd0 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x228>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
	neoway.SEND_RECIEVE("AT+FSWF=\"" + file_name + "\",0," + d_t_s(config_string.size(), 0) + ",10000", { 10000 }, 2, { ">" });
 8007bc8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8007bcc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	497f      	ldr	r1, [pc, #508]	; (8007dd4 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x22c>)
 8007bd8:	f004 fda6 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8007bdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007be0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007be4:	4a7c      	ldr	r2, [pc, #496]	; (8007dd8 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x230>)
 8007be6:	4618      	mov	r0, r3
 8007be8:	f005 f9e7 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8007bec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bf0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f00f fabb 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7f8 fc81 	bl	8000504 <__aeabi_ui2d>
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	ec45 4b10 	vmov	d0, r4, r5
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f9 fc88 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8007c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c1c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007c20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007c24:	4618      	mov	r0, r3
 8007c26:	f004 fe06 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8007c2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007c36:	4a69      	ldr	r2, [pc, #420]	; (8007ddc <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x234>)
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f005 f9be 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8007c3e:	f242 7310 	movw	r3, #10000	; 0x2710
 8007c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f00f f8f7 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007c5e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8007c62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007c66:	495e      	ldr	r1, [pc, #376]	; (8007de0 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x238>)
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f00f fdab 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c76:	2301      	movs	r3, #1
 8007c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007c80:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 8007c84:	f107 0220 	add.w	r2, r7, #32
 8007c88:	ad02      	add	r5, sp, #8
 8007c8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007c8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c96:	2302      	movs	r3, #2
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ca4:	494f      	ldr	r1, [pc, #316]	; (8007de4 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x23c>)
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7fc f8b6 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8007cac:	f107 0308 	add.w	r3, r7, #8
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f00f fa20 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007cb6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8007cba:	3418      	adds	r4, #24
 8007cbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d004      	beq.n	8007cce <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x126>
 8007cc4:	3c18      	subs	r4, #24
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f00f fa15 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007ccc:	e7f6      	b.n	8007cbc <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x114>
 8007cce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f00f f8bc 	bl	8016e50 <_ZNSaIcED1Ev>
 8007cd8:	f107 0320 	add.w	r3, r7, #32
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f00f fa0a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f00f fa05 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007cec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f00f fa00 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f00f f9fb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d04:	4618      	mov	r0, r3
 8007d06:	f00f f9f6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	neoway.SEND_RECIEVE(config_string, { 10000 }, 2, { "OK" });
 8007d0a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d12:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007d16:	6819      	ldr	r1, [r3, #0]
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f00f fd1f 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007d1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8007d22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007d2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d34:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f00f f887 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007d3e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8007d42:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007d46:	4928      	ldr	r1, [pc, #160]	; (8007de8 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x240>)
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f00f fd3b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d4e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007d52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d56:	2301      	movs	r3, #1
 8007d58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d5c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8007d60:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007d64:	ad02      	add	r5, sp, #8
 8007d66:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d72:	2302      	movs	r3, #2
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d80:	4918      	ldr	r1, [pc, #96]	; (8007de4 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x23c>)
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7fc f848 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8007d88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f00f f9b2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d92:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8007d96:	3418      	adds	r4, #24
 8007d98:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	d004      	beq.n	8007daa <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x202>
 8007da0:	3c18      	subs	r4, #24
 8007da2:	4620      	mov	r0, r4
 8007da4:	f00f f9a7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007da8:	e7f6      	b.n	8007d98 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1f0>
 8007daa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007dae:	4618      	mov	r0, r3
 8007db0:	f00f f84e 	bl	8016e50 <_ZNSaIcED1Ev>
 8007db4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f00f f99c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	ble_cont = $CONTINUE;
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <_Z10write_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x228>)
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	701a      	strb	r2, [r3, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000003 	.word	0x20000003
 8007dd4:	0801816c 	.word	0x0801816c
 8007dd8:	08018178 	.word	0x08018178
 8007ddc:	08018180 	.word	0x08018180
 8007de0:	08017f3c 	.word	0x08017f3c
 8007de4:	200001a0 	.word	0x200001a0
 8007de8:	08017ecc 	.word	0x08017ecc

08007dec <_Z11config_filev>:
#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE)
/**
 * @brief Read configuration file from neoway and update it to respective variables
 */

void config_file() {
 8007dec:	b5b0      	push	{r4, r5, r7, lr}
 8007dee:	b0b6      	sub	sp, #216	; 0xd8
 8007df0:	af04      	add	r7, sp, #16
	uint32_t file_size = get_file_size(config_file_name);
 8007df2:	485d      	ldr	r0, [pc, #372]	; (8007f68 <_Z11config_filev+0x17c>)
 8007df4:	f002 ff90 	bl	800ad18 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007df8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	if (file_size == not_found) {
 8007dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d120      	bne.n	8007e48 <_Z11config_filev+0x5c>
		neo_control = $CONTINUE;
 8007e06:	4b59      	ldr	r3, [pc, #356]	; (8007f6c <_Z11config_filev+0x180>)
 8007e08:	2202      	movs	r2, #2
 8007e0a:	701a      	strb	r2, [r3, #0]
		both_debug.Print2("\r\nNo config file found\r\n");
 8007e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e10:	4618      	mov	r0, r3
 8007e12:	f00f f81b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007e16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e1a:	f107 0318 	add.w	r3, r7, #24
 8007e1e:	4954      	ldr	r1, [pc, #336]	; (8007f70 <_Z11config_filev+0x184>)
 8007e20:	4618      	mov	r0, r3
 8007e22:	f00f fccf 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e26:	f107 0318 	add.w	r3, r7, #24
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4851      	ldr	r0, [pc, #324]	; (8007f74 <_Z11config_filev+0x188>)
 8007e2e:	f7fe fa97 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007e32:	f107 0318 	add.w	r3, r7, #24
 8007e36:	4618      	mov	r0, r3
 8007e38:	f00f f95d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e40:	4618      	mov	r0, r3
 8007e42:	f00f f805 	bl	8016e50 <_ZNSaIcED1Ev>
 8007e46:	e08b      	b.n	8007f60 <_Z11config_filev+0x174>
		return;
	}
	string json_rec = neoway.SEND_RECIEVE("AT+FSRF=\"" + config_file_name + "\",0," + d_t_s(file_size, 0), { 5000 }, 2, { "+FSRF:" });
 8007e48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e4c:	4a46      	ldr	r2, [pc, #280]	; (8007f68 <_Z11config_filev+0x17c>)
 8007e4e:	494a      	ldr	r1, [pc, #296]	; (8007f78 <_Z11config_filev+0x18c>)
 8007e50:	4618      	mov	r0, r3
 8007e52:	f004 fc69 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8007e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e5a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8007e5e:	4a47      	ldr	r2, [pc, #284]	; (8007f7c <_Z11config_filev+0x190>)
 8007e60:	4618      	mov	r0, r3
 8007e62:	f005 f8aa 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8007e66:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007e6a:	f7f8 fb4b 	bl	8000504 <__aeabi_ui2d>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	ec45 4b10 	vmov	d0, r4, r5
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fb52 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8007e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e88:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007e8c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8007e90:	4618      	mov	r0, r3
 8007e92:	f004 fcd0 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8007e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f00e ffcb 	bl	8016e4c <_ZNSaIcEC1Ev>
 8007eb6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8007eba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007ebe:	4930      	ldr	r1, [pc, #192]	; (8007f80 <_Z11config_filev+0x194>)
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f00f fc7f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007ec6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed4:	463c      	mov	r4, r7
 8007ed6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007eda:	ad02      	add	r5, sp, #8
 8007edc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ee8:	2302      	movs	r3, #2
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef6:	4923      	ldr	r1, [pc, #140]	; (8007f84 <_Z11config_filev+0x198>)
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7fb ff8d 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8007efe:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8007f02:	3418      	adds	r4, #24
 8007f04:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d004      	beq.n	8007f16 <_Z11config_filev+0x12a>
 8007f0c:	3c18      	subs	r4, #24
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f00f f8f1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f14:	e7f6      	b.n	8007f04 <_Z11config_filev+0x118>
 8007f16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f00e ff98 	bl	8016e50 <_ZNSaIcED1Ev>
 8007f20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00f f8e6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f00f f8e1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f00f f8dc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007f42:	4618      	mov	r0, r3
 8007f44:	f00f f8d7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	JSON_EXTRACTER(&json_rec, &data_packet.meta_data_json);
 8007f48:	463b      	mov	r3, r7
 8007f4a:	490f      	ldr	r1, [pc, #60]	; (8007f88 <_Z11config_filev+0x19c>)
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fff5 	bl	8008f3c <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
	UPDATE_CONFIG(data_packet.meta_data_json);
 8007f52:	480d      	ldr	r0, [pc, #52]	; (8007f88 <_Z11config_filev+0x19c>)
 8007f54:	f7ff fdb0 	bl	8007ab8 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
}
 8007f58:	463b      	mov	r3, r7
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f00f f8cb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f60:	37c8      	adds	r7, #200	; 0xc8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bdb0      	pop	{r4, r5, r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000128 	.word	0x20000128
 8007f6c:	20000000 	.word	0x20000000
 8007f70:	08018188 	.word	0x08018188
 8007f74:	200002dc 	.word	0x200002dc
 8007f78:	080181a4 	.word	0x080181a4
 8007f7c:	08018178 	.word	0x08018178
 8007f80:	080181b0 	.word	0x080181b0
 8007f84:	200001a0 	.word	0x200001a0
 8007f88:	200008f0 	.word	0x200008f0

08007f8c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
/**
 * @brief Get OTA and Meta data links from server adn save them in respective variables
 * @param[out] ota_link
 * @param[out] meta_link
 */
void GET_LINKS(string &ota_link, string &meta_link) {
 8007f8c:	b5b0      	push	{r4, r5, r7, lr}
 8007f8e:	f5ad 6de8 	sub.w	sp, sp, #1856	; 0x740
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8007f98:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8007f9c:	6018      	str	r0, [r3, #0]
 8007f9e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8007fa2:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8007fa6:	6019      	str	r1, [r3, #0]

	if (check_cont_flags()) {
 8007fa8:	f003 f800 	bl	800afac <_Z16check_cont_flagsv>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 83d0 	beq.w	8008754 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7c8>
		string meta_json_link = "56wdo5bf42tt4luxym2rcvvy5e0vrpaq.lambda-url.us-west-2.on.aws/?ws=" + d_t_s(WS.GET_VAR_VALUE_CONN(), 0);
 8007fb4:	48ee      	ldr	r0, [pc, #952]	; (8008370 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3e4>)
 8007fb6:	f7fb fc37 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 8007fba:	eeb0 7a40 	vmov.f32	s14, s0
 8007fbe:	eef0 7a60 	vmov.f32	s15, s1
 8007fc2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8007fc6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2100      	movs	r1, #0
 8007fce:	eeb0 0a47 	vmov.f32	s0, s14
 8007fd2:	eef0 0a67 	vmov.f32	s1, s15
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7f9 faa6 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8007fdc:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8007fe0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8007fe4:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8007fe8:	49e2      	ldr	r1, [pc, #904]	; (8008374 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3e8>)
 8007fea:	4618      	mov	r0, r3
 8007fec:	f004 fc9e 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007ff0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f00f f87e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		string strdata = https_req(meta_json_link, 0);
 8007ffa:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8007ffe:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f00f fba9 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800800a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800800e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8008012:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8008016:	2200      	movs	r2, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fd69 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800801e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8008022:	4618      	mov	r0, r3
 8008024:	f00f f867 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ota_break(strdata.size() < 3);
 8008028:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800802c:	4618      	mov	r0, r3
 800802e:	f00f f89f 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8008032:	4603      	mov	r3, r0
 8008034:	2b02      	cmp	r3, #2
 8008036:	bf94      	ite	ls
 8008038:	2301      	movls	r3, #1
 800803a:	2300      	movhi	r3, #0
 800803c:	b2dc      	uxtb	r4, r3
 800803e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8008042:	4618      	mov	r0, r3
 8008044:	f00e ff02 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008048:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800804c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008050:	49c9      	ldr	r1, [pc, #804]	; (8008378 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3ec>)
 8008052:	4618      	mov	r0, r3
 8008054:	f00f fbb6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008058:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800805c:	4619      	mov	r1, r3
 800805e:	4620      	mov	r0, r4
 8008060:	f002 ffc0 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008064:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008068:	4618      	mov	r0, r3
 800806a:	f00f f844 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800806e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8008072:	4618      	mov	r0, r3
 8008074:	f00e feec 	bl	8016e50 <_ZNSaIcED1Ev>
		update_ota_cont();
 8008078:	f003 fb9e 	bl	800b7b8 <_Z15update_ota_contv>
		if (check_cont_flags()) {
 800807c:	f002 ff96 	bl	800afac <_Z16check_cont_flagsv>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 8345 	beq.w	8008712 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x786>

			int32_t json_start_index = strdata.find('{');
 8008088:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800808c:	2200      	movs	r2, #0
 800808e:	217b      	movs	r1, #123	; 0x7b
 8008090:	4618      	mov	r0, r3
 8008092:	f00f fad0 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008096:	4603      	mov	r3, r0
 8008098:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
			int32_t json_end_index = strdata.find_last_of('}');
 800809c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80080a0:	f04f 32ff 	mov.w	r2, #4294967295
 80080a4:	217d      	movs	r1, #125	; 0x7d
 80080a6:	4618      	mov	r0, r3
 80080a8:	f00f fb1b 	bl	80176e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEcj>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
			strdata = strdata.substr(json_start_index, json_end_index - json_start_index + 1);
 80080b2:	f8d7 473c 	ldr.w	r4, [r7, #1852]	; 0x73c
 80080b6:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 80080ba:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	3301      	adds	r3, #1
 80080c2:	461a      	mov	r2, r3
 80080c4:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80080c8:	f5a3 700d 	sub.w	r0, r3, #564	; 0x234
 80080cc:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 80080d0:	4613      	mov	r3, r2
 80080d2:	4622      	mov	r2, r4
 80080d4:	f00f fbae 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80080d8:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 80080dc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f00f f813 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80080e8:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 80080ec:	4618      	mov	r0, r3
 80080ee:	f00f f802 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			both_debug.Print2("\r\nFound Json-->" + strdata + "<--\r\n");
 80080f2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80080f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080fa:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80080fe:	499f      	ldr	r1, [pc, #636]	; (800837c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3f0>)
 8008100:	4618      	mov	r0, r3
 8008102:	f004 fb11 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8008106:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800810a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800810e:	f207 513c 	addw	r1, r7, #1340	; 0x53c
 8008112:	4a9b      	ldr	r2, [pc, #620]	; (8008380 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3f4>)
 8008114:	4618      	mov	r0, r3
 8008116:	f004 ff50 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800811a:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800811e:	4619      	mov	r1, r3
 8008120:	4898      	ldr	r0, [pc, #608]	; (8008384 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3f8>)
 8008122:	f7fe f91d 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008126:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800812a:	4618      	mov	r0, r3
 800812c:	f00e ffe3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008130:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8008134:	4618      	mov	r0, r3
 8008136:	f00e ffde 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			ota_break(strdata.size() < 3);
 800813a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800813e:	4618      	mov	r0, r3
 8008140:	f00f f816 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8008144:	4603      	mov	r3, r0
 8008146:	2b02      	cmp	r3, #2
 8008148:	bf94      	ite	ls
 800814a:	2301      	movls	r3, #1
 800814c:	2300      	movhi	r3, #0
 800814e:	b2dc      	uxtb	r4, r3
 8008150:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 8008154:	4618      	mov	r0, r3
 8008156:	f00e fe79 	bl	8016e4c <_ZNSaIcEC1Ev>
 800815a:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 800815e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8008162:	4985      	ldr	r1, [pc, #532]	; (8008378 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3ec>)
 8008164:	4618      	mov	r0, r3
 8008166:	f00f fb2d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800816a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800816e:	4619      	mov	r1, r3
 8008170:	4620      	mov	r0, r4
 8008172:	f002 ff37 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008176:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800817a:	4618      	mov	r0, r3
 800817c:	f00e ffbb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008180:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 8008184:	4618      	mov	r0, r3
 8008186:	f00e fe63 	bl	8016e50 <_ZNSaIcED1Ev>
			if (check_cont_flags()) {
 800818a:	f002 ff0f 	bl	800afac <_Z16check_cont_flagsv>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 829e 	beq.w	80086d2 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x746>
				StaticJsonDocument < 1024 > test_json;
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	4618      	mov	r0, r3
 800819c:	f004 ff9d 	bl	800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>
				deserializeJson(test_json, strdata);
 80081a0:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f004 ffeb 	bl	800d186 <_ZN11ArduinoJson7V6211HB15deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>
 80081b0:	4b75      	ldr	r3, [pc, #468]	; (8008388 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3fc>)
 80081b2:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80081b6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80081ba:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 80081c6:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	; 0x6f4
 80081ca:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
      : _upstream(upstream), _key(key) {}
 80081ce:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 80081d2:	f8d7 26ec 	ldr.w	r2, [r7, #1772]	; 0x6ec
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 80081dc:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80081e0:	605a      	str	r2, [r3, #4]
    return {*this, key};
 80081e2:	bf00      	nop
 80081e4:	f507 648f 	add.w	r4, r7, #1144	; 0x478
 80081e8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80081ec:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80081f0:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 80081f4:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 80081f8:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80081fc:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
    return VariantAttorney::getData(derived());
 8008200:	f8d7 0704 	ldr.w	r0, [r7, #1796]	; 0x704
 8008204:	f008 fa51 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8008208:	4603      	mov	r3, r0
 800820a:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
 800820e:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8008212:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
    return variantGetMember(VariantAttorney::getData(_upstream),
 8008216:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	; 0x6fc
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
    return client.getData();
 8008220:	f8d7 06f8 	ldr.w	r0, [r7, #1784]	; 0x6f8
 8008224:	f7fa fa41 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 8008228:	4605      	mov	r5, r0
 800822a:	bf00      	nop
                            adaptString(_key));
 800822c:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	; 0x6fc
 8008230:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 8008232:	4618      	mov	r0, r3
 8008234:	f004 fc13 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8008238:	4603      	mov	r3, r0
 800823a:	4619      	mov	r1, r3
 800823c:	4628      	mov	r0, r5
 800823e:	f009 fa50 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 8008242:	4602      	mov	r2, r0
                            adaptString(_key));
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	bf00      	nop

 private:
  FORCE_INLINE ArduinoJson::JsonVariant getVariant() const;

  FORCE_INLINE ArduinoJson::JsonVariantConst getVariantConst() const {
    return ArduinoJson::JsonVariantConst(getData());
 800824a:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7fa f851 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8008256:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
    return Converter<T>::fromJson(getVariantConst());
 800825a:	4619      	mov	r1, r3
 800825c:	4620      	mov	r0, r4
 800825e:	f006 fd93 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 8008262:	bf00      	nop
				string META_UPDATE = test_json["META"];
				both_debug.Print2("\r\nMETA_UPDATE-->" + META_UPDATE + "<--\r\n");
 8008264:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008268:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800826c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8008270:	4946      	ldr	r1, [pc, #280]	; (800838c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x400>)
 8008272:	4618      	mov	r0, r3
 8008274:	f004 fa58 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8008278:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800827c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8008280:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8008284:	4a3e      	ldr	r2, [pc, #248]	; (8008380 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3f4>)
 8008286:	4618      	mov	r0, r3
 8008288:	f004 fe97 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800828c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8008290:	4619      	mov	r1, r3
 8008292:	483c      	ldr	r0, [pc, #240]	; (8008384 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3f8>)
 8008294:	f7fe f864 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008298:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800829c:	4618      	mov	r0, r3
 800829e:	f00e ff2a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082a2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80082a6:	4618      	mov	r0, r3
 80082a8:	f00e ff25 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082ac:	4b38      	ldr	r3, [pc, #224]	; (8008390 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x404>)
 80082ae:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80082b2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80082b6:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
 80082ba:	f107 0308 	add.w	r3, r7, #8
 80082be:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80082c2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 80082c6:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
      : _upstream(upstream), _key(key) {}
 80082ca:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 80082ce:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 80082d8:	f8d7 2710 	ldr.w	r2, [r7, #1808]	; 0x710
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	bf00      	nop
 80082e0:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 80082e4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80082e8:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 80082ec:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 80082f0:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80082f4:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80082f8:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
    return VariantAttorney::getData(derived());
 80082fc:	f8d7 072c 	ldr.w	r0, [r7, #1836]	; 0x72c
 8008300:	f008 f9d3 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8008304:	4603      	mov	r3, r0
 8008306:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
 800830a:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
 800830e:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
    return variantGetMember(VariantAttorney::getData(_upstream),
 8008312:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
 800831c:	f8d7 0720 	ldr.w	r0, [r7, #1824]	; 0x720
 8008320:	f7fa f9c3 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 8008324:	4605      	mov	r5, r0
 8008326:	bf00      	nop
                            adaptString(_key));
 8008328:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 800832c:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 800832e:	4618      	mov	r0, r3
 8008330:	f004 fb95 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8008334:	4603      	mov	r3, r0
 8008336:	4619      	mov	r1, r3
 8008338:	4628      	mov	r0, r5
 800833a:	f009 f9d2 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 800833e:	4602      	mov	r2, r0
                            adaptString(_key));
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 8008346:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7f9 ffd3 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8008352:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
    return Converter<T>::fromJson(getVariantConst());
 8008356:	4619      	mov	r1, r3
 8008358:	4620      	mov	r0, r4
 800835a:	f006 fd15 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 800835e:	bf00      	nop
				string OTA = test_json["OTA"];
				both_debug.Print2("OTA UPDATE -->" + OTA + "<--");
 8008360:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008364:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008368:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800836c:	e012      	b.n	8008394 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x408>
 800836e:	bf00      	nop
 8008370:	20000310 	.word	0x20000310
 8008374:	080181d8 	.word	0x080181d8
 8008378:	08017e00 	.word	0x08017e00
 800837c:	0801821c 	.word	0x0801821c
 8008380:	0801822c 	.word	0x0801822c
 8008384:	200002dc 	.word	0x200002dc
 8008388:	08018234 	.word	0x08018234
 800838c:	0801823c 	.word	0x0801823c
 8008390:	08018250 	.word	0x08018250
 8008394:	49e4      	ldr	r1, [pc, #912]	; (8008728 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x79c>)
 8008396:	4618      	mov	r0, r3
 8008398:	f004 f9c6 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800839c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80083a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083a4:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80083a8:	4ae0      	ldr	r2, [pc, #896]	; (800872c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a0>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f004 fe05 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80083b0:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80083b4:	4619      	mov	r1, r3
 80083b6:	48de      	ldr	r0, [pc, #888]	; (8008730 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a4>)
 80083b8:	f7fd ffd2 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80083bc:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f00e fe98 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083c6:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80083ca:	4618      	mov	r0, r3
 80083cc:	f00e fe93 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if (OTA == "1") {
 80083d0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80083d4:	49d7      	ldr	r1, [pc, #860]	; (8008734 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a8>)
 80083d6:	4618      	mov	r0, r3
 80083d8:	f004 fe31 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80a0 	beq.w	8008524 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x598>
					if (test_json.containsKey("LINK")) {
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	49d3      	ldr	r1, [pc, #844]	; (8008738 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7ac>)
 80083ea:	4618      	mov	r0, r3
 80083ec:	f004 ff13 	bl	800d216 <_ZNK11ArduinoJson7V6211HB12JsonDocument11containsKeyIKcEEbPT_>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8093 	beq.w	800851e <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x592>
 80083f8:	4bcf      	ldr	r3, [pc, #828]	; (8008738 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7ac>)
 80083fa:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80083fe:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8008402:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8008406:	f107 0308 	add.w	r3, r7, #8
 800840a:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800840e:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8008412:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
      : _upstream(upstream), _key(key) {}
 8008416:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 800841a:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	; 0x6c4
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8008424:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8008428:	605a      	str	r2, [r3, #4]
 800842a:	bf00      	nop
 800842c:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8008430:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8008434:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8008438:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	; 0x6e4
 800843c:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8008440:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8008444:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
    return VariantAttorney::getData(derived());
 8008448:	f8d7 06dc 	ldr.w	r0, [r7, #1756]	; 0x6dc
 800844c:	f008 f92d 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8008450:	4603      	mov	r3, r0
 8008452:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8008456:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800845a:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
    return variantGetMember(VariantAttorney::getData(_upstream),
 800845e:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8008468:	f8d7 06d0 	ldr.w	r0, [r7, #1744]	; 0x6d0
 800846c:	f7fa f91d 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 8008470:	4605      	mov	r5, r0
 8008472:	bf00      	nop
                            adaptString(_key));
 8008474:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8008478:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 800847a:	4618      	mov	r0, r3
 800847c:	f004 faef 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8008480:	4603      	mov	r3, r0
 8008482:	4619      	mov	r1, r3
 8008484:	4628      	mov	r0, r5
 8008486:	f009 f92c 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 800848a:	4602      	mov	r2, r0
                            adaptString(_key));
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 8008492:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7f9 ff2d 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800849e:	f8d7 3690 	ldr.w	r3, [r7, #1680]	; 0x690
    return Converter<T>::fromJson(getVariantConst());
 80084a2:	4619      	mov	r1, r3
 80084a4:	4620      	mov	r0, r4
 80084a6:	f006 fc6f 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 80084aa:	bf00      	nop

						string ota_link_temp = test_json["LINK"];
						ota_link = ota_link_temp;
 80084ac:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 80084b0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80084b4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80084b8:	4611      	mov	r1, r2
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	f00e fe21 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
						both_debug.Print2("\r\nFirmware url -->" + ota_link + "<--");
 80084c0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80084c4:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 80084c8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80084cc:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	499a      	ldr	r1, [pc, #616]	; (800873c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b0>)
 80084d4:	f004 f928 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80084d8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80084dc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80084e0:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80084e4:	4a91      	ldr	r2, [pc, #580]	; (800872c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a0>)
 80084e6:	4618      	mov	r0, r3
 80084e8:	f004 fd67 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80084ec:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80084f0:	4619      	mov	r1, r3
 80084f2:	488f      	ldr	r0, [pc, #572]	; (8008730 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a4>)
 80084f4:	f7fd ff34 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80084f8:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00e fdfa 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008502:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008506:	4618      	mov	r0, r3
 8008508:	f00e fdf5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
						ota_cont = $CONTINUE;
 800850c:	4b8c      	ldr	r3, [pc, #560]	; (8008740 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b4>)
 800850e:	2202      	movs	r2, #2
 8008510:	701a      	strb	r2, [r3, #0]
					} else {
 8008512:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8008516:	4618      	mov	r0, r3
 8008518:	f00e fded 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800851c:	e002      	b.n	8008524 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x598>
						ota_cont = $BREAK;
 800851e:	4b88      	ldr	r3, [pc, #544]	; (8008740 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b4>)
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
					}
				}
				if (META_UPDATE == "1") {
 8008524:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8008528:	4982      	ldr	r1, [pc, #520]	; (8008734 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a8>)
 800852a:	4618      	mov	r0, r3
 800852c:	f004 fd87 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80bd 	beq.w	80086b2 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x726>
					if (test_json.containsKey("META_LINK")) {
 8008538:	f107 0308 	add.w	r3, r7, #8
 800853c:	4981      	ldr	r1, [pc, #516]	; (8008744 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b8>)
 800853e:	4618      	mov	r0, r3
 8008540:	f004 fe69 	bl	800d216 <_ZNK11ArduinoJson7V6211HB12JsonDocument11containsKeyIKcEEbPT_>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8093 	beq.w	8008672 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6e6>
 800854c:	4b7d      	ldr	r3, [pc, #500]	; (8008744 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b8>)
 800854e:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8008552:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8008556:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 800855a:	f107 0308 	add.w	r3, r7, #8
 800855e:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8008562:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8008566:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
      : _upstream(upstream), _key(key) {}
 800856a:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 800856e:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8008578:	f8d7 2698 	ldr.w	r2, [r7, #1688]	; 0x698
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	bf00      	nop
 8008580:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 8008584:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8008588:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800858c:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8008590:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8008594:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8008598:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
    return VariantAttorney::getData(derived());
 800859c:	f8d7 06b4 	ldr.w	r0, [r7, #1716]	; 0x6b4
 80085a0:	f008 f883 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
 80085aa:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 80085ae:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
    return variantGetMember(VariantAttorney::getData(_upstream),
 80085b2:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
 80085bc:	f8d7 06a8 	ldr.w	r0, [r7, #1704]	; 0x6a8
 80085c0:	f7fa f873 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 80085c4:	4605      	mov	r5, r0
 80085c6:	bf00      	nop
                            adaptString(_key));
 80085c8:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 80085cc:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 80085ce:	4618      	mov	r0, r3
 80085d0:	f004 fa45 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80085d4:	4603      	mov	r3, r0
 80085d6:	4619      	mov	r1, r3
 80085d8:	4628      	mov	r0, r5
 80085da:	f009 f882 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 80085de:	4602      	mov	r2, r0
                            adaptString(_key));
 80085e0:	bf00      	nop
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 80085e6:	f207 6394 	addw	r3, r7, #1684	; 0x694
 80085ea:	4611      	mov	r1, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f9 fe83 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 80085f2:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
    return Converter<T>::fromJson(getVariantConst());
 80085f6:	4619      	mov	r1, r3
 80085f8:	4620      	mov	r0, r4
 80085fa:	f006 fbc5 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 80085fe:	bf00      	nop
						string meta_link_temp = test_json["META_LINK"];
						meta_link = meta_link_temp;
 8008600:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8008604:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008608:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 800860c:	4611      	mov	r1, r2
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	f00e fd77 	bl	8017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
						both_debug.Print2("\r\nMeta url -->" + meta_link + "<--");
 8008614:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008618:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 800861c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008620:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4948      	ldr	r1, [pc, #288]	; (8008748 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7bc>)
 8008628:	f004 f87e 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800862c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8008630:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008634:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8008638:	4a3c      	ldr	r2, [pc, #240]	; (800872c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a0>)
 800863a:	4618      	mov	r0, r3
 800863c:	f004 fcbd 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8008640:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8008644:	4619      	mov	r1, r3
 8008646:	483a      	ldr	r0, [pc, #232]	; (8008730 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a4>)
 8008648:	f7fd fe8a 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800864c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8008650:	4618      	mov	r0, r3
 8008652:	f00e fd50 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008656:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800865a:	4618      	mov	r0, r3
 800865c:	f00e fd4b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
						ota_cont = $CONTINUE;
 8008660:	4b37      	ldr	r3, [pc, #220]	; (8008740 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b4>)
 8008662:	2202      	movs	r2, #2
 8008664:	701a      	strb	r2, [r3, #0]
					} else {
 8008666:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800866a:	4618      	mov	r0, r3
 800866c:	f00e fd43 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008670:	e01f      	b.n	80086b2 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x726>
						both_debug.Print2("\r\nMeta url -->NO KEY<--\r\n");
 8008672:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8008676:	4618      	mov	r0, r3
 8008678:	f00e fbe8 	bl	8016e4c <_ZNSaIcEC1Ev>
 800867c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8008680:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8008684:	4931      	ldr	r1, [pc, #196]	; (800874c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7c0>)
 8008686:	4618      	mov	r0, r3
 8008688:	f00f f89c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800868c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8008690:	4619      	mov	r1, r3
 8008692:	4827      	ldr	r0, [pc, #156]	; (8008730 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a4>)
 8008694:	f7fd fe64 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008698:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800869c:	4618      	mov	r0, r3
 800869e:	f00e fd2a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086a2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80086a6:	4618      	mov	r0, r3
 80086a8:	f00e fbd2 	bl	8016e50 <_ZNSaIcED1Ev>
						ota_cont = $BREAK;
 80086ac:	4b24      	ldr	r3, [pc, #144]	; (8008740 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b4>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
					}
				}
			} else {
 80086b2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80086b6:	4618      	mov	r0, r3
 80086b8:	f00e fd1d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086bc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80086c0:	4618      	mov	r0, r3
 80086c2:	f00e fd18 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086c6:	f107 0308 	add.w	r3, r7, #8
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe fa05 	bl	8006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>
 80086d0:	e01f      	b.n	8008712 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x786>
				both_debug.Print2("\r\nNO JSON FOUND\r\n");
 80086d2:	f207 6384 	addw	r3, r7, #1668	; 0x684
 80086d6:	4618      	mov	r0, r3
 80086d8:	f00e fbb8 	bl	8016e4c <_ZNSaIcEC1Ev>
 80086dc:	f207 6284 	addw	r2, r7, #1668	; 0x684
 80086e0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80086e4:	491a      	ldr	r1, [pc, #104]	; (8008750 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7c4>)
 80086e6:	4618      	mov	r0, r3
 80086e8:	f00f f86c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80086ec:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80086f0:	4619      	mov	r1, r3
 80086f2:	480f      	ldr	r0, [pc, #60]	; (8008730 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7a4>)
 80086f4:	f7fd fe34 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80086f8:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00e fcfa 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008702:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8008706:	4618      	mov	r0, r3
 8008708:	f00e fba2 	bl	8016e50 <_ZNSaIcED1Ev>
				ota_cont = $BREAK;
 800870c:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b4>)
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
			}
		}
	} else {
 8008712:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008716:	4618      	mov	r0, r3
 8008718:	f00e fced 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800871c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8008720:	4618      	mov	r0, r3
 8008722:	f00e fce8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ota_cont = $BREAK;
		ota_link = "NO LINK";
		meta_link = "NO LINK";
	}
}
 8008726:	e028      	b.n	800877a <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7ee>
 8008728:	08018254 	.word	0x08018254
 800872c:	08017ff0 	.word	0x08017ff0
 8008730:	200002dc 	.word	0x200002dc
 8008734:	08018264 	.word	0x08018264
 8008738:	08018268 	.word	0x08018268
 800873c:	08018270 	.word	0x08018270
 8008740:	20000001 	.word	0x20000001
 8008744:	08018284 	.word	0x08018284
 8008748:	08018290 	.word	0x08018290
 800874c:	080182a0 	.word	0x080182a0
 8008750:	080182bc 	.word	0x080182bc
		ota_cont = $BREAK;
 8008754:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7f8>)
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
		ota_link = "NO LINK";
 800875a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800875e:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8008762:	4909      	ldr	r1, [pc, #36]	; (8008788 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7fc>)
 8008764:	6818      	ldr	r0, [r3, #0]
 8008766:	f00e fe7c 	bl	8017462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		meta_link = "NO LINK";
 800876a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800876e:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8008772:	4905      	ldr	r1, [pc, #20]	; (8008788 <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7fc>)
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f00e fe74 	bl	8017462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 800877a:	bf00      	nop
 800877c:	f507 67e8 	add.w	r7, r7, #1856	; 0x740
 8008780:	46bd      	mov	sp, r7
 8008782:	bdb0      	pop	{r4, r5, r7, pc}
 8008784:	20000001 	.word	0x20000001
 8008788:	080182d0 	.word	0x080182d0

0800878c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_>:
 * @brief Add the certificate to neoway
 * @param[in] cert_name
 * @param[in] *certificate
 */

void add_certificate(string cert_name, string *certificate) {
 800878c:	b5b0      	push	{r4, r5, r7, lr}
 800878e:	b0dc      	sub	sp, #368	; 0x170
 8008790:	af04      	add	r7, sp, #16
 8008792:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008796:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800879a:	6018      	str	r0, [r3, #0]
 800879c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80087a0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80087a4:	6019      	str	r1, [r3, #0]
	both_debug.Print2("\r\nAdding Certificate-->" + cert_name + "<-- ");
 80087a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80087aa:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80087ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80087b2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	499a      	ldr	r1, [pc, #616]	; (8008a24 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x298>)
 80087ba:	f003 ffb5 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80087be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80087c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80087c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80087ca:	4a97      	ldr	r2, [pc, #604]	; (8008a28 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x29c>)
 80087cc:	4618      	mov	r0, r3
 80087ce:	f004 fbf4 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4619      	mov	r1, r3
 80087d8:	4894      	ldr	r0, [pc, #592]	; (8008a2c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2a0>)
 80087da:	f7fd fdc1 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80087de:	f107 030c 	add.w	r3, r7, #12
 80087e2:	4618      	mov	r0, r3
 80087e4:	f00e fc87 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f00e fc82 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	save_ble_print(0);
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7fb f8fc 	bl	80039f0 <_Z14save_ble_printb>
	neoway.SEND_RECIEVE("AT+CERTADD=" + cert_name + "," + d_t_s(certificate->length()), { 5000 }, 1, { "CONNECT" });
 80087f8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80087fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008800:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	498a      	ldr	r1, [pc, #552]	; (8008a30 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2a4>)
 8008808:	f003 ff8e 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800880c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008810:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8008814:	4a87      	ldr	r2, [pc, #540]	; (8008a34 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2a8>)
 8008816:	4618      	mov	r0, r3
 8008818:	f004 fbcf 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800881c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008820:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	f00e fca5 	bl	8017174 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800882a:	4603      	mov	r3, r0
 800882c:	4618      	mov	r0, r3
 800882e:	f7f7 fe69 	bl	8000504 <__aeabi_ui2d>
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
 8008836:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	ec45 4b10 	vmov	d0, r4, r5
 8008842:	4618      	mov	r0, r3
 8008844:	f7f8 fe70 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8008848:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800884c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008850:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008854:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008858:	4618      	mov	r0, r3
 800885a:	f003 ffec 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800885e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008866:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800886a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800886e:	2301      	movs	r3, #1
 8008870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008874:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008878:	4618      	mov	r0, r3
 800887a:	f00e fae7 	bl	8016e4c <_ZNSaIcEC1Ev>
 800887e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008882:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008886:	496c      	ldr	r1, [pc, #432]	; (8008a38 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2ac>)
 8008888:	4618      	mov	r0, r3
 800888a:	f00e ff9b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800888e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008896:	2301      	movs	r3, #1
 8008898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800889c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088a0:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 80088a4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80088a8:	ad02      	add	r5, sp, #8
 80088aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80088ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80088b6:	2301      	movs	r3, #1
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088c4:	495d      	ldr	r1, [pc, #372]	; (8008a3c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2b0>)
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7fb faa6 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80088cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088d0:	4618      	mov	r0, r3
 80088d2:	f00e fc10 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80088d6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80088da:	3418      	adds	r4, #24
 80088dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d004      	beq.n	80088ee <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x162>
 80088e4:	3c18      	subs	r4, #24
 80088e6:	4620      	mov	r0, r4
 80088e8:	f00e fc05 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80088ec:	e7f6      	b.n	80088dc <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x150>
 80088ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f00e faac 	bl	8016e50 <_ZNSaIcED1Ev>
 80088f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088fc:	4618      	mov	r0, r3
 80088fe:	f00e fbfa 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008902:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008906:	4618      	mov	r0, r3
 8008908:	f00e fbf5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800890c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008910:	4618      	mov	r0, r3
 8008912:	f00e fbf0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008916:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800891a:	4618      	mov	r0, r3
 800891c:	f00e fbeb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	neoway.SEND_RECIEVE(*certificate, { 5000 }, 1, { "OK" });
 8008920:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008924:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008928:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800892c:	6819      	ldr	r1, [r3, #0]
 800892e:	4610      	mov	r0, r2
 8008930:	f00e ff14 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008934:	f241 3388 	movw	r3, #5000	; 0x1388
 8008938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800893c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8008940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008944:	2301      	movs	r3, #1
 8008946:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800894a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800894e:	4618      	mov	r0, r3
 8008950:	f00e fa7c 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008954:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008958:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800895c:	4938      	ldr	r1, [pc, #224]	; (8008a40 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2b4>)
 800895e:	4618      	mov	r0, r3
 8008960:	f00e ff30 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008964:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008968:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800896c:	2301      	movs	r3, #1
 800896e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008972:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8008976:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800897a:	ad02      	add	r5, sp, #8
 800897c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008980:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008984:	e885 0003 	stmia.w	r5, {r0, r1}
 8008988:	2301      	movs	r3, #1
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	4929      	ldr	r1, [pc, #164]	; (8008a3c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2b0>)
 8008998:	4620      	mov	r0, r4
 800899a:	f7fb fa3d 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800899e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80089a2:	4618      	mov	r0, r3
 80089a4:	f00e fba7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80089a8:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80089ac:	3418      	adds	r4, #24
 80089ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d004      	beq.n	80089c0 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x234>
 80089b6:	3c18      	subs	r4, #24
 80089b8:	4620      	mov	r0, r4
 80089ba:	f00e fb9c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80089be:	e7f6      	b.n	80089ae <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x222>
 80089c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80089c4:	4618      	mov	r0, r3
 80089c6:	f00e fa43 	bl	8016e50 <_ZNSaIcED1Ev>
 80089ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00e fb91 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	restore_ble_print();
 80089d4:	f7fb f822 	bl	8003a1c <_Z17restore_ble_printv>
	both_debug.Print2("DONE\r\n");
 80089d8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80089dc:	4618      	mov	r0, r3
 80089de:	f00e fa35 	bl	8016e4c <_ZNSaIcEC1Ev>
 80089e2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80089e6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80089ea:	4916      	ldr	r1, [pc, #88]	; (8008a44 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2b8>)
 80089ec:	4618      	mov	r0, r3
 80089ee:	f00e fee9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80089f2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80089f6:	4619      	mov	r1, r3
 80089f8:	480c      	ldr	r0, [pc, #48]	; (8008a2c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2a0>)
 80089fa:	f7fd fcb1 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80089fe:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8008a02:	4618      	mov	r0, r3
 8008a04:	f00e fb77 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008a08:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f00e fa1f 	bl	8016e50 <_ZNSaIcED1Ev>
	delay(1 * us_s);
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_+0x2bc>)
 8008a14:	f7fa fe4a 	bl	80036ac <_Z5delaym>

}
 8008a18:	bf00      	nop
 8008a1a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bdb0      	pop	{r4, r5, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	080182d8 	.word	0x080182d8
 8008a28:	080182f0 	.word	0x080182f0
 8008a2c:	200002dc 	.word	0x200002dc
 8008a30:	080182f8 	.word	0x080182f8
 8008a34:	08018304 	.word	0x08018304
 8008a38:	08018308 	.word	0x08018308
 8008a3c:	200001a0 	.word	0x200001a0
 8008a40:	08017ecc 	.word	0x08017ecc
 8008a44:	08018310 	.word	0x08018310
 8008a48:	000f4240 	.word	0x000f4240

08008a4c <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Delete the certificate from neoway
 * @param[in] cert_name
 * @return string
 */
string delete_certificate(string cert_name) {
 8008a4c:	b5b0      	push	{r4, r5, r7, lr}
 8008a4e:	b098      	sub	sp, #96	; 0x60
 8008a50:	af04      	add	r7, sp, #16
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
	return neoway.SEND_RECIEVE("AT+CERTDEL=" + cert_name, { 5000 }, 1, { "OK" });
 8008a56:	f107 0308 	add.w	r3, r7, #8
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	4925      	ldr	r1, [pc, #148]	; (8008af4 <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f003 fe62 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8008a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a6e:	623b      	str	r3, [r7, #32]
 8008a70:	2301      	movs	r3, #1
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
 8008a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f00e f9e7 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008a7e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a86:	491c      	ldr	r1, [pc, #112]	; (8008af8 <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac>)
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f00e fe9b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a94:	2301      	movs	r3, #1
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
 8008a98:	687c      	ldr	r4, [r7, #4]
 8008a9a:	f107 0208 	add.w	r2, r7, #8
 8008a9e:	ad02      	add	r5, sp, #8
 8008aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008aa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8008aac:	2301      	movs	r3, #1
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	4911      	ldr	r1, [pc, #68]	; (8008afc <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7fb f9ad 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8008abe:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008ac2:	3418      	adds	r4, #24
 8008ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d004      	beq.n	8008ad6 <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
 8008acc:	3c18      	subs	r4, #24
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f00e fb11 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ad4:	e7f6      	b.n	8008ac4 <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 8008ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ada:	4618      	mov	r0, r3
 8008adc:	f00e f9b8 	bl	8016e50 <_ZNSaIcED1Ev>
 8008ae0:	f107 0308 	add.w	r3, r7, #8
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f00e fb06 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008aea:	bf00      	nop
}
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	3750      	adds	r7, #80	; 0x50
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bdb0      	pop	{r4, r5, r7, pc}
 8008af4:	08018318 	.word	0x08018318
 8008af8:	08017ecc 	.word	0x08017ecc
 8008afc:	200001a0 	.word	0x200001a0

08008b00 <_Z22check_all_certificatesv>:

/**
 * @brief Check all the certificates in neoway
 */
#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE) or defined(MOHIT)
void check_all_certificates() {
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8008b06:	af02      	add	r7, sp, #8
	if (INSTALL_CERT.GET_VAR_VALUE_CONN() == 1) {
 8008b08:	48e1      	ldr	r0, [pc, #900]	; (8008e90 <_Z22check_all_certificatesv+0x390>)
 8008b0a:	f7fa fe8d 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 8008b0e:	ec51 0b10 	vmov	r0, r1, d0
 8008b12:	2301      	movs	r3, #1
 8008b14:	461c      	mov	r4, r3
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	4bde      	ldr	r3, [pc, #888]	; (8008e94 <_Z22check_all_certificatesv+0x394>)
 8008b1c:	f7f7 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <_Z22check_all_certificatesv+0x2a>
 8008b26:	2300      	movs	r3, #0
 8008b28:	461c      	mov	r4, r3
 8008b2a:	b2e3      	uxtb	r3, r4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 81fd 	beq.w	8008f2c <_Z22check_all_certificatesv+0x42c>
		string resp1 = "";
 8008b32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008b36:	4618      	mov	r0, r3
 8008b38:	f00e f988 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008b3c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008b40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b44:	49d4      	ldr	r1, [pc, #848]	; (8008e98 <_Z22check_all_certificatesv+0x398>)
 8008b46:	4618      	mov	r0, r3
 8008b48:	f00e fe3c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008b50:	4618      	mov	r0, r3
 8008b52:	f00e f97d 	bl	8016e50 <_ZNSaIcED1Ev>
		string resp2 = "";
 8008b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f00e f976 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008b60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008b64:	f107 031c 	add.w	r3, r7, #28
 8008b68:	49cb      	ldr	r1, [pc, #812]	; (8008e98 <_Z22check_all_certificatesv+0x398>)
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f00e fe2a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b74:	4618      	mov	r0, r3
 8008b76:	f00e f96b 	bl	8016e50 <_ZNSaIcED1Ev>
		string resp3 = "";
 8008b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f00e f964 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008b84:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008b88:	1d3b      	adds	r3, r7, #4
 8008b8a:	49c3      	ldr	r1, [pc, #780]	; (8008e98 <_Z22check_all_certificatesv+0x398>)
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f00e fe19 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b96:	4618      	mov	r0, r3
 8008b98:	f00e f95a 	bl	8016e50 <_ZNSaIcED1Ev>

		if (both_debug.Both_read_check("INSTALLL Certificates - Enter \"1\" to cont", 10, "1") == $EXPECTED_RESPONSE) {
 8008b9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f00e f953 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008ba6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bae:	49bb      	ldr	r1, [pc, #748]	; (8008e9c <_Z22check_all_certificatesv+0x39c>)
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f00e fe07 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008bb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f00e f946 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008bc0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8008bc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bc8:	49b5      	ldr	r1, [pc, #724]	; (8008ea0 <_Z22check_all_certificatesv+0x3a0>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f00e fdfa 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008bd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008bd8:	2200      	movs	r2, #0
 8008bda:	9200      	str	r2, [sp, #0]
 8008bdc:	220a      	movs	r2, #10
 8008bde:	48b1      	ldr	r0, [pc, #708]	; (8008ea4 <_Z22check_all_certificatesv+0x3a4>)
 8008be0:	f7fd fe3a 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	bf0c      	ite	eq
 8008bea:	2301      	moveq	r3, #1
 8008bec:	2300      	movne	r3, #0
 8008bee:	b2dc      	uxtb	r4, r3
 8008bf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f00e fa7e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008bfa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f00e f926 	bl	8016e50 <_ZNSaIcED1Ev>
 8008c04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f00e fa74 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008c12:	4618      	mov	r0, r3
 8008c14:	f00e f91c 	bl	8016e50 <_ZNSaIcED1Ev>
 8008c18:	2c00      	cmp	r4, #0
 8008c1a:	f000 8176 	beq.w	8008f0a <_Z22check_all_certificatesv+0x40a>
			if (both_debug.Both_read_check("Delete - Root CA - Enter \"1\" to cont", 10, "1") == $EXPECTED_RESPONSE) {
 8008c1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f00e f912 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008c28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008c2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008c30:	499d      	ldr	r1, [pc, #628]	; (8008ea8 <_Z22check_all_certificatesv+0x3a8>)
 8008c32:	4618      	mov	r0, r3
 8008c34:	f00e fdc6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f00e f905 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008c42:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8008c46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008c4a:	4995      	ldr	r1, [pc, #596]	; (8008ea0 <_Z22check_all_certificatesv+0x3a0>)
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f00e fdb9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008c56:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	9200      	str	r2, [sp, #0]
 8008c5e:	220a      	movs	r2, #10
 8008c60:	4890      	ldr	r0, [pc, #576]	; (8008ea4 <_Z22check_all_certificatesv+0x3a4>)
 8008c62:	f7fd fdf9 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2dc      	uxtb	r4, r3
 8008c72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008c76:	4618      	mov	r0, r3
 8008c78:	f00e fa3d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00e f8e5 	bl	8016e50 <_ZNSaIcED1Ev>
 8008c86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00e fa33 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008c94:	4618      	mov	r0, r3
 8008c96:	f00e f8db 	bl	8016e50 <_ZNSaIcED1Ev>
 8008c9a:	2c00      	cmp	r4, #0
 8008c9c:	d01c      	beq.n	8008cd8 <_Z22check_all_certificatesv+0x1d8>
				delete_certificate(neoway.rootca_name);
 8008c9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008ca2:	4982      	ldr	r1, [pc, #520]	; (8008eac <_Z22check_all_certificatesv+0x3ac>)
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f00e fd59 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008cb2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff fec7 	bl	8008a4c <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008cbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f00e fa17 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008cc8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f00e fa12 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				neo_control = $CONTINUE;
 8008cd2:	4b77      	ldr	r3, [pc, #476]	; (8008eb0 <_Z22check_all_certificatesv+0x3b0>)
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	701a      	strb	r2, [r3, #0]
			}

			if (both_debug.Both_read_check("Delete - Client Cert - Enter \"1\" to cont", 10, "1") == $EXPECTED_RESPONSE) {
 8008cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f00e f8b5 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008ce2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008ce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008cea:	4972      	ldr	r1, [pc, #456]	; (8008eb4 <_Z22check_all_certificatesv+0x3b4>)
 8008cec:	4618      	mov	r0, r3
 8008cee:	f00e fd69 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008cf2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f00e f8a8 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008cfc:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008d00:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008d04:	4966      	ldr	r1, [pc, #408]	; (8008ea0 <_Z22check_all_certificatesv+0x3a0>)
 8008d06:	4618      	mov	r0, r3
 8008d08:	f00e fd5c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d0c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008d10:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8008d14:	2200      	movs	r2, #0
 8008d16:	9200      	str	r2, [sp, #0]
 8008d18:	220a      	movs	r2, #10
 8008d1a:	4862      	ldr	r0, [pc, #392]	; (8008ea4 <_Z22check_all_certificatesv+0x3a4>)
 8008d1c:	f7fd fd9c 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	bf0c      	ite	eq
 8008d26:	2301      	moveq	r3, #1
 8008d28:	2300      	movne	r3, #0
 8008d2a:	b2dc      	uxtb	r4, r3
 8008d2c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008d30:	4618      	mov	r0, r3
 8008d32:	f00e f9e0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d36:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f00e f888 	bl	8016e50 <_ZNSaIcED1Ev>
 8008d40:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008d44:	4618      	mov	r0, r3
 8008d46:	f00e f9d6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f00e f87e 	bl	8016e50 <_ZNSaIcED1Ev>
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d01a      	beq.n	8008d8e <_Z22check_all_certificatesv+0x28e>
				delete_certificate(neoway.clientcert_name);
 8008d58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d5c:	4956      	ldr	r1, [pc, #344]	; (8008eb8 <_Z22check_all_certificatesv+0x3b8>)
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f00e fcfc 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fe6c 	bl	8008a4c <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00e f9bc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00e f9b7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				neo_control = $CONTINUE;
 8008d88:	4b49      	ldr	r3, [pc, #292]	; (8008eb0 <_Z22check_all_certificatesv+0x3b0>)
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	701a      	strb	r2, [r3, #0]
			}

			if (both_debug.Both_read_check("Delete - Client Key - Enter \"1\" to cont", 10, "1") == $EXPECTED_RESPONSE) {
 8008d8e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008d92:	4618      	mov	r0, r3
 8008d94:	f00e f85a 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008d98:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8008d9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008da0:	4946      	ldr	r1, [pc, #280]	; (8008ebc <_Z22check_all_certificatesv+0x3bc>)
 8008da2:	4618      	mov	r0, r3
 8008da4:	f00e fd0e 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008da8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00e f84d 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008db2:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8008db6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008dba:	4939      	ldr	r1, [pc, #228]	; (8008ea0 <_Z22check_all_certificatesv+0x3a0>)
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f00e fd01 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dc2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008dc6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8008dca:	2200      	movs	r2, #0
 8008dcc:	9200      	str	r2, [sp, #0]
 8008dce:	220a      	movs	r2, #10
 8008dd0:	4834      	ldr	r0, [pc, #208]	; (8008ea4 <_Z22check_all_certificatesv+0x3a4>)
 8008dd2:	f7fd fd41 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
 8008de0:	b2dc      	uxtb	r4, r3
 8008de2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008de6:	4618      	mov	r0, r3
 8008de8:	f00e f985 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008dec:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008df0:	4618      	mov	r0, r3
 8008df2:	f00e f82d 	bl	8016e50 <_ZNSaIcED1Ev>
 8008df6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f00e f97b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e00:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008e04:	4618      	mov	r0, r3
 8008e06:	f00e f823 	bl	8016e50 <_ZNSaIcED1Ev>
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d01a      	beq.n	8008e44 <_Z22check_all_certificatesv+0x344>
				delete_certificate(neoway.clientkey_name);
 8008e0e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008e12:	492b      	ldr	r1, [pc, #172]	; (8008ec0 <_Z22check_all_certificatesv+0x3c0>)
 8008e14:	4618      	mov	r0, r3
 8008e16:	f00e fca1 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008e1a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008e1e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff fe11 	bl	8008a4c <_Z18delete_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008e2a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f00e f961 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e34:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f00e f95c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				neo_control = $CONTINUE;
 8008e3e:	4b1c      	ldr	r3, [pc, #112]	; (8008eb0 <_Z22check_all_certificatesv+0x3b0>)
 8008e40:	2202      	movs	r2, #2
 8008e42:	701a      	strb	r2, [r3, #0]
			}

			if (both_debug.Both_read_check("INSTALLL NEW Certificates - Enter \"1\" to cont", 10, "1") == $EXPECTED_RESPONSE) {
 8008e44:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f00d ffff 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008e4e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8008e52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008e56:	491b      	ldr	r1, [pc, #108]	; (8008ec4 <_Z22check_all_certificatesv+0x3c4>)
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f00e fcb3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e5e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008e62:	4618      	mov	r0, r3
 8008e64:	f00d fff2 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008e68:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8008e6c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008e70:	490b      	ldr	r1, [pc, #44]	; (8008ea0 <_Z22check_all_certificatesv+0x3a0>)
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00e fca6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e78:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008e7c:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008e80:	2200      	movs	r2, #0
 8008e82:	9200      	str	r2, [sp, #0]
 8008e84:	220a      	movs	r2, #10
 8008e86:	4807      	ldr	r0, [pc, #28]	; (8008ea4 <_Z22check_all_certificatesv+0x3a4>)
 8008e88:	f7fd fce6 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 8008e8c:	e01c      	b.n	8008ec8 <_Z22check_all_certificatesv+0x3c8>
 8008e8e:	bf00      	nop
 8008e90:	20000430 	.word	0x20000430
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	08017e00 	.word	0x08017e00
 8008e9c:	08018334 	.word	0x08018334
 8008ea0:	08018264 	.word	0x08018264
 8008ea4:	200002dc 	.word	0x200002dc
 8008ea8:	08018360 	.word	0x08018360
 8008eac:	20000294 	.word	0x20000294
 8008eb0:	20000000 	.word	0x20000000
 8008eb4:	08018388 	.word	0x08018388
 8008eb8:	200002ac 	.word	0x200002ac
 8008ebc:	080183b4 	.word	0x080183b4
 8008ec0:	200002c4 	.word	0x200002c4
 8008ec4:	080183dc 	.word	0x080183dc
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	bf0c      	ite	eq
 8008ece:	2301      	moveq	r3, #1
 8008ed0:	2300      	movne	r3, #0
 8008ed2:	b2dc      	uxtb	r4, r3
 8008ed4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f00e f90c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ede:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f00d ffb4 	bl	8016e50 <_ZNSaIcED1Ev>
 8008ee8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008eec:	4618      	mov	r0, r3
 8008eee:	f00e f902 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ef2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f00d ffaa 	bl	8016e50 <_ZNSaIcED1Ev>
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	d004      	beq.n	8008f0a <_Z22check_all_certificatesv+0x40a>
				cert_add();
 8008f00:	f000 f884 	bl	800900c <_Z8cert_addv>
				neo_control = $CONTINUE;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <_Z22check_all_certificatesv+0x438>)
 8008f06:	2202      	movs	r2, #2
 8008f08:	701a      	strb	r2, [r3, #0]
			}
		}
		neo_control = $CONTINUE;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <_Z22check_all_certificatesv+0x438>)
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	701a      	strb	r2, [r3, #0]
	}
 8008f10:	1d3b      	adds	r3, r7, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f00e f8ef 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f18:	f107 031c 	add.w	r3, r7, #28
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f00e f8ea 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f26:	4618      	mov	r0, r3
 8008f28:	f00e f8e5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008f2c:	bf00      	nop
 8008f2e:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd90      	pop	{r4, r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000000 	.word	0x20000000

08008f3c <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>:
 * @brief Extract json from string and save it to the json object
 * @param[in] json_string
 * @param[out] json_ret
 * @return LOOP_CONT
 */
LOOP_CONT JSON_EXTRACTER(string *json_string, StaticJsonDocument<1024> *json_ret) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b098      	sub	sp, #96	; 0x60
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]

	uint32_t json_start_index = json_string->find('{');
 8008f46:	2200      	movs	r2, #0
 8008f48:	217b      	movs	r1, #123	; 0x7b
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f00e fb73 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008f50:	65f8      	str	r0, [r7, #92]	; 0x5c
	uint32_t json_end_index = json_string->find('}');
 8008f52:	2200      	movs	r2, #0
 8008f54:	217d      	movs	r1, #125	; 0x7d
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f00e fb6d 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008f5c:	65b8      	str	r0, [r7, #88]	; 0x58

	if (json_start_index != not_found && json_end_index != not_found) {
 8008f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d049      	beq.n	8008ffa <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xbe>
 8008f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d045      	beq.n	8008ffa <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xbe>
		*json_string = json_string->substr(json_start_index, json_end_index - json_start_index + 1);
 8008f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	3301      	adds	r3, #1
 8008f76:	f107 000c 	add.w	r0, r7, #12
 8008f7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	f00e fc59 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f00e f8c0 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f8e:	f107 030c 	add.w	r3, r7, #12
 8008f92:	4618      	mov	r0, r3
 8008f94:	f00e f8af 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		deserializeJson(*json_ret, *json_string);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f004 f8f2 	bl	800d186 <_ZN11ArduinoJson7V6211HB15deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>

		both_debug.Json_print(*json_string, "Extractor");
 8008fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f00e fbd7 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008fae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f00d ff4a 	bl	8016e4c <_ZNSaIcEC1Ev>
 8008fb8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008fbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008fc0:	4910      	ldr	r1, [pc, #64]	; (8009004 <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xc8>)
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f00e fbfe 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008fc8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008fcc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	480d      	ldr	r0, [pc, #52]	; (8009008 <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xcc>)
 8008fd4:	f7fd f9f4 	bl	80063c0 <_ZN10UART_DEBUG10Json_printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_b>
 8008fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f00e f88a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f00d ff32 	bl	8016e50 <_ZNSaIcED1Ev>
 8008fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f00e f880 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		return $CONTINUE;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e000      	b.n	8008ffc <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE+0xc0>
	} else {
		return $BREAK;
 8008ffa:	2300      	movs	r3, #0
	}
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3760      	adds	r7, #96	; 0x60
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0801840c 	.word	0x0801840c
 8009008:	200002dc 	.word	0x200002dc

0800900c <_Z8cert_addv>:
#if (defined(APP_CODE) or defined(RTK) or defined(OTA_CODE) or defined(MOHIT))
/**
 * @brief Download and add certificates to neoway main function
 */

void cert_add() {
 800900c:	b5b0      	push	{r4, r5, r7, lr}
 800900e:	f5ad 6dee 	sub.w	sp, sp, #1904	; 0x770
 8009012:	af00      	add	r7, sp, #0

	string certificate_url_query = "6jnwkt47x3djv46m3cvneftqoi0unzcs.lambda-url.us-west-2.on.aws/?farmID=" + d_t_s(WS.GET_VAR_VALUE_CONN(), 0) + "&hardwareID=CWMS_1_1";
 8009014:	48ef      	ldr	r0, [pc, #956]	; (80093d4 <_Z8cert_addv+0x3c8>)
 8009016:	f7fa fc07 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800901a:	eeb0 7a40 	vmov.f32	s14, s0
 800901e:	eef0 7a60 	vmov.f32	s15, s1
 8009022:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009026:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	eeb0 0a47 	vmov.f32	s0, s14
 8009032:	eef0 0a67 	vmov.f32	s1, s15
 8009036:	4618      	mov	r0, r3
 8009038:	f7f8 fa76 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800903c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009040:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8009044:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8009048:	49e3      	ldr	r1, [pc, #908]	; (80093d8 <_Z8cert_addv+0x3cc>)
 800904a:	4618      	mov	r0, r3
 800904c:	f003 fc6e 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009050:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009054:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8009058:	f207 41ec 	addw	r1, r7, #1260	; 0x4ec
 800905c:	4adf      	ldr	r2, [pc, #892]	; (80093dc <_Z8cert_addv+0x3d0>)
 800905e:	4618      	mov	r0, r3
 8009060:	f003 ffab 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009064:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8009068:	4618      	mov	r0, r3
 800906a:	f00e f844 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800906e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8009072:	4618      	mov	r0, r3
 8009074:	f00e f83f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	https_setup();
 8009078:	f000 fb60 	bl	800973c <_Z11https_setupv>
	string json_string(1024, ' ');
 800907c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8009080:	4618      	mov	r0, r3
 8009082:	f00d fee3 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009086:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800908a:	f207 40bc 	addw	r0, r7, #1212	; 0x4bc
 800908e:	2220      	movs	r2, #32
 8009090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009094:	f00e f80c 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8009098:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800909c:	4618      	mov	r0, r3
 800909e:	f00d fed7 	bl	8016e50 <_ZNSaIcED1Ev>
	json_string = https_req(certificate_url_query, 0);
 80090a2:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 80090a6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f00e fb55 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80090b2:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80090b6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80090ba:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 80090be:	2200      	movs	r2, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fd15 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80090c6:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80090ca:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f00e f81c 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80090d6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80090da:	4618      	mov	r0, r3
 80090dc:	f00e f80b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090e0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80090e4:	4618      	mov	r0, r3
 80090e6:	f00e f806 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StaticJsonDocument < 1024 > cert_json;
 80090ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80090ee:	4618      	mov	r0, r3
 80090f0:	f003 fff3 	bl	800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>
	if (JSON_EXTRACTER(&json_string, &cert_json) == $CONTINUE) {
 80090f4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80090f8:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff ff1c 	bl	8008f3c <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
 8009104:	4603      	mov	r3, r0
 8009106:	2b02      	cmp	r3, #2
 8009108:	bf0c      	ite	eq
 800910a:	2301      	moveq	r3, #1
 800910c:	2300      	movne	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 8268 	beq.w	80095e6 <_Z8cert_addv+0x5da>
 8009116:	4bb2      	ldr	r3, [pc, #712]	; (80093e0 <_Z8cert_addv+0x3d4>)
 8009118:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 800911c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009120:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
 8009124:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009128:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 800912c:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8009130:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
      : _upstream(upstream), _key(key) {}
 8009134:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8009138:	f8d7 26fc 	ldr.w	r2, [r7, #1788]	; 0x6fc
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8009142:	f8d7 26f8 	ldr.w	r2, [r7, #1784]	; 0x6f8
 8009146:	605a      	str	r2, [r3, #4]
 8009148:	bf00      	nop
 800914a:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800914e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009152:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8009156:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 800915a:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
 800915e:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8009162:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
    return VariantAttorney::getData(derived());
 8009166:	f8d7 0714 	ldr.w	r0, [r7, #1812]	; 0x714
 800916a:	f007 fa9e 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800916e:	4603      	mov	r3, r0
 8009170:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 8009174:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8009178:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
    return variantGetMember(VariantAttorney::getData(_upstream),
 800917c:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 8009186:	f8d7 0708 	ldr.w	r0, [r7, #1800]	; 0x708
 800918a:	f7f9 fa8e 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 800918e:	4605      	mov	r5, r0
 8009190:	bf00      	nop
                            adaptString(_key));
 8009192:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8009196:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 8009198:	4618      	mov	r0, r3
 800919a:	f003 fc60 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800919e:	4603      	mov	r3, r0
 80091a0:	4619      	mov	r1, r3
 80091a2:	4628      	mov	r0, r5
 80091a4:	f008 fa9d 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 80091a8:	4602      	mov	r2, r0
                            adaptString(_key));
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 80091b0:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f9 f89e 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 80091bc:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	; 0x6f4
    return Converter<T>::fromJson(getVariantConst());
 80091c0:	4619      	mov	r1, r3
 80091c2:	4620      	mov	r0, r4
 80091c4:	f005 fde0 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 80091c8:	bf00      	nop
 80091ca:	4b86      	ldr	r3, [pc, #536]	; (80093e4 <_Z8cert_addv+0x3d8>)
 80091cc:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 80091d0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80091d4:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
 80091d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80091dc:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 80091e0:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 80091e4:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
      : _upstream(upstream), _key(key) {}
 80091e8:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
 80091ec:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
 80091f6:	f8d7 2720 	ldr.w	r2, [r7, #1824]	; 0x720
 80091fa:	605a      	str	r2, [r3, #4]
 80091fc:	bf00      	nop
 80091fe:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8009202:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8009206:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 800920a:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 800920e:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
 8009212:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 8009216:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
    return VariantAttorney::getData(derived());
 800921a:	f8d7 073c 	ldr.w	r0, [r7, #1852]	; 0x73c
 800921e:	f007 fa44 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8009222:	4603      	mov	r3, r0
 8009224:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
 8009228:	f8d7 3738 	ldr.w	r3, [r7, #1848]	; 0x738
 800922c:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
    return variantGetMember(VariantAttorney::getData(_upstream),
 8009230:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 800923a:	f8d7 0730 	ldr.w	r0, [r7, #1840]	; 0x730
 800923e:	f7f9 fa34 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 8009242:	4605      	mov	r5, r0
 8009244:	bf00      	nop
                            adaptString(_key));
 8009246:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 800924a:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 800924c:	4618      	mov	r0, r3
 800924e:	f003 fc06 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8009252:	4603      	mov	r3, r0
 8009254:	4619      	mov	r1, r3
 8009256:	4628      	mov	r0, r5
 8009258:	f008 fa43 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 800925c:	4602      	mov	r2, r0
                            adaptString(_key));
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 8009264:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7f9 f844 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8009270:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
    return Converter<T>::fromJson(getVariantConst());
 8009274:	4619      	mov	r1, r3
 8009276:	4620      	mov	r0, r4
 8009278:	f005 fd86 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 800927c:	bf00      	nop
 800927e:	4b5a      	ldr	r3, [pc, #360]	; (80093e8 <_Z8cert_addv+0x3dc>)
 8009280:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8009284:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009288:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
 800928c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009290:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8009294:	f8d7 3754 	ldr.w	r3, [r7, #1876]	; 0x754
 8009298:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
      : _upstream(upstream), _key(key) {}
 800929c:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 80092a0:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 80092aa:	f8d7 2748 	ldr.w	r2, [r7, #1864]	; 0x748
 80092ae:	605a      	str	r2, [r3, #4]
 80092b0:	bf00      	nop
 80092b2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80092b6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80092ba:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80092be:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 80092c2:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
 80092c6:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 80092ca:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
    return VariantAttorney::getData(derived());
 80092ce:	f8d7 0764 	ldr.w	r0, [r7, #1892]	; 0x764
 80092d2:	f007 f9ea 	bl	80106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
 80092dc:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80092e0:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
    return variantGetMember(VariantAttorney::getData(_upstream),
 80092e4:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 80092ee:	f8d7 0758 	ldr.w	r0, [r7, #1880]	; 0x758
 80092f2:	f7f9 f9da 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 80092f6:	4605      	mov	r5, r0
 80092f8:	bf00      	nop
                            adaptString(_key));
 80092fa:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80092fe:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(_upstream),
 8009300:	4618      	mov	r0, r3
 8009302:	f003 fbac 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8009306:	4603      	mov	r3, r0
 8009308:	4619      	mov	r1, r3
 800930a:	4628      	mov	r0, r5
 800930c:	f008 f9e9 	bl	80116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 8009310:	4602      	mov	r2, r0
                            adaptString(_key));
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	bf00      	nop
    return ArduinoJson::JsonVariantConst(getData());
 8009318:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7f8 ffea 	bl	80022f8 <_ZN11ArduinoJson7V6211HB16JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8009324:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
    return Converter<T>::fromJson(getVariantConst());
 8009328:	4619      	mov	r1, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f005 fd2c 	bl	800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
    return as<T>();
 8009330:	bf00      	nop
		string device_cert = cert_json["device certificate"];
		string ca_cert = cert_json["CA Certificate"];
		string private_key = cert_json["private key"];

		both_debug.Print2("\r\n" + neoway.rootca_name + ": " + ca_cert);
 8009332:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009336:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800933a:	4a2c      	ldr	r2, [pc, #176]	; (80093ec <_Z8cert_addv+0x3e0>)
 800933c:	492c      	ldr	r1, [pc, #176]	; (80093f0 <_Z8cert_addv+0x3e4>)
 800933e:	4618      	mov	r0, r3
 8009340:	f003 f9f2 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009344:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009348:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800934c:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8009350:	4a28      	ldr	r2, [pc, #160]	; (80093f4 <_Z8cert_addv+0x3e8>)
 8009352:	4618      	mov	r0, r3
 8009354:	f003 fe31 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009358:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800935c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8009360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009364:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8009368:	4618      	mov	r0, r3
 800936a:	f003 ff1e 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800936e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8009372:	4619      	mov	r1, r3
 8009374:	4820      	ldr	r0, [pc, #128]	; (80093f8 <_Z8cert_addv+0x3ec>)
 8009376:	f7fc fff3 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800937a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800937e:	4618      	mov	r0, r3
 8009380:	f00d feb9 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009384:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009388:	4618      	mov	r0, r3
 800938a:	f00d feb4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800938e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8009392:	4618      	mov	r0, r3
 8009394:	f00d feaf 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		both_debug.Print2("\r\n" + neoway.clientcert_name + ": " + device_cert);
 8009398:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800939c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80093a0:	4a16      	ldr	r2, [pc, #88]	; (80093fc <_Z8cert_addv+0x3f0>)
 80093a2:	4913      	ldr	r1, [pc, #76]	; (80093f0 <_Z8cert_addv+0x3e4>)
 80093a4:	4618      	mov	r0, r3
 80093a6:	f003 f9bf 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80093aa:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80093ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80093b2:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80093b6:	4a0f      	ldr	r2, [pc, #60]	; (80093f4 <_Z8cert_addv+0x3e8>)
 80093b8:	4618      	mov	r0, r3
 80093ba:	f003 fdfe 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80093be:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80093c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80093c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80093ca:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80093ce:	4618      	mov	r0, r3
 80093d0:	e016      	b.n	8009400 <_Z8cert_addv+0x3f4>
 80093d2:	bf00      	nop
 80093d4:	20000310 	.word	0x20000310
 80093d8:	08018418 	.word	0x08018418
 80093dc:	08018460 	.word	0x08018460
 80093e0:	08018478 	.word	0x08018478
 80093e4:	0801848c 	.word	0x0801848c
 80093e8:	0801849c 	.word	0x0801849c
 80093ec:	20000294 	.word	0x20000294
 80093f0:	08017e38 	.word	0x08017e38
 80093f4:	080184a8 	.word	0x080184a8
 80093f8:	200002dc 	.word	0x200002dc
 80093fc:	200002ac 	.word	0x200002ac
 8009400:	f003 fed3 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009404:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8009408:	4619      	mov	r1, r3
 800940a:	488f      	ldr	r0, [pc, #572]	; (8009648 <_Z8cert_addv+0x63c>)
 800940c:	f7fc ffa8 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009410:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8009414:	4618      	mov	r0, r3
 8009416:	f00d fe6e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800941a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800941e:	4618      	mov	r0, r3
 8009420:	f00d fe69 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009424:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8009428:	4618      	mov	r0, r3
 800942a:	f00d fe64 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		both_debug.Print2("\r\n" + neoway.clientkey_name + ": " + private_key);
 800942e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009432:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009436:	4a85      	ldr	r2, [pc, #532]	; (800964c <_Z8cert_addv+0x640>)
 8009438:	4985      	ldr	r1, [pc, #532]	; (8009650 <_Z8cert_addv+0x644>)
 800943a:	4618      	mov	r0, r3
 800943c:	f003 f974 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009440:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009444:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009448:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800944c:	4a81      	ldr	r2, [pc, #516]	; (8009654 <_Z8cert_addv+0x648>)
 800944e:	4618      	mov	r0, r3
 8009450:	f003 fdb3 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009454:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009458:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800945c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009460:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8009464:	4618      	mov	r0, r3
 8009466:	f003 fea0 	bl	800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800946a:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800946e:	4619      	mov	r1, r3
 8009470:	4875      	ldr	r0, [pc, #468]	; (8009648 <_Z8cert_addv+0x63c>)
 8009472:	f7fc ff75 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009476:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800947a:	4618      	mov	r0, r3
 800947c:	f00d fe3b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009480:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8009484:	4618      	mov	r0, r3
 8009486:	f00d fe36 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800948a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800948e:	4618      	mov	r0, r3
 8009490:	f00d fe31 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		string cert_str1 = https_req(ca_cert, 0);
 8009494:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009498:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f00e f95c 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80094a4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80094a8:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 80094ac:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80094b0:	2200      	movs	r2, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fb1c 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80094b8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80094bc:	4618      	mov	r0, r3
 80094be:	f00d fe1a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		getcertificate(&cert_str1);
 80094c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f8cc 	bl	8009664 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

		string cert_str2 = https_req(device_cert, 0);
 80094cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80094d0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f00e f940 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80094dc:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80094e0:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80094e4:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80094e8:	2200      	movs	r2, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fb00 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80094f0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80094f4:	4618      	mov	r0, r3
 80094f6:	f00d fdfe 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		getcertificate(&cert_str2);
 80094fa:	f107 0318 	add.w	r3, r7, #24
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f8b0 	bl	8009664 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

		string cert_str3 = https_req(private_key, 0);
 8009504:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009508:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f00e f924 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009514:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8009518:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800951c:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8009520:	2200      	movs	r2, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fae4 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8009528:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800952c:	4618      	mov	r0, r3
 800952e:	f00d fde2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		getcertificate(&cert_str3);
 8009532:	463b      	mov	r3, r7
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f895 	bl	8009664 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

		add_certificate(neoway.rootca_name, &cert_str1);
 800953a:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800953e:	4946      	ldr	r1, [pc, #280]	; (8009658 <_Z8cert_addv+0x64c>)
 8009540:	4618      	mov	r0, r3
 8009542:	f00e f90b 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009546:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800954a:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff f91b 	bl	800878c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_>
 8009556:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800955a:	4618      	mov	r0, r3
 800955c:	f00d fdcb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		add_certificate(neoway.clientcert_name, &cert_str2);
 8009560:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009564:	493d      	ldr	r1, [pc, #244]	; (800965c <_Z8cert_addv+0x650>)
 8009566:	4618      	mov	r0, r3
 8009568:	f00e f8f8 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800956c:	f107 0218 	add.w	r2, r7, #24
 8009570:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff f908 	bl	800878c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_>
 800957c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009580:	4618      	mov	r0, r3
 8009582:	f00d fdb8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		add_certificate(neoway.clientkey_name, &cert_str3);
 8009586:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800958a:	4930      	ldr	r1, [pc, #192]	; (800964c <_Z8cert_addv+0x640>)
 800958c:	4618      	mov	r0, r3
 800958e:	f00e f8e5 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009592:	463a      	mov	r2, r7
 8009594:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff f8f6 	bl	800878c <_Z15add_certificateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_>
 80095a0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80095a4:	4618      	mov	r0, r3
 80095a6:	f00d fda6 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	} else {
 80095aa:	463b      	mov	r3, r7
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00d fda2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095b2:	f107 0318 	add.w	r3, r7, #24
 80095b6:	4618      	mov	r0, r3
 80095b8:	f00d fd9d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00d fd98 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095ca:	4618      	mov	r0, r3
 80095cc:	f00d fd93 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80095d4:	4618      	mov	r0, r3
 80095d6:	f00d fd8e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80095de:	4618      	mov	r0, r3
 80095e0:	f00d fd89 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095e4:	e01c      	b.n	8009620 <_Z8cert_addv+0x614>
		both_debug.Print2("\r\nNo Json Extracted");
 80095e6:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00d fc2e 	bl	8016e4c <_ZNSaIcEC1Ev>
 80095f0:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80095f4:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80095f8:	4919      	ldr	r1, [pc, #100]	; (8009660 <_Z8cert_addv+0x654>)
 80095fa:	4618      	mov	r0, r3
 80095fc:	f00e f8e2 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009600:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8009604:	4619      	mov	r1, r3
 8009606:	4810      	ldr	r0, [pc, #64]	; (8009648 <_Z8cert_addv+0x63c>)
 8009608:	f7fc feaa 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800960c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8009610:	4618      	mov	r0, r3
 8009612:	f00d fd70 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009616:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800961a:	4618      	mov	r0, r3
 800961c:	f00d fc18 	bl	8016e50 <_ZNSaIcED1Ev>
	}

}
 8009620:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd fa58 	bl	8006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>
 800962a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800962e:	4618      	mov	r0, r3
 8009630:	f00d fd61 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009634:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8009638:	4618      	mov	r0, r3
 800963a:	f00d fd5c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800963e:	f507 67ee 	add.w	r7, r7, #1904	; 0x770
 8009642:	46bd      	mov	sp, r7
 8009644:	bdb0      	pop	{r4, r5, r7, pc}
 8009646:	bf00      	nop
 8009648:	200002dc 	.word	0x200002dc
 800964c:	200002c4 	.word	0x200002c4
 8009650:	08017e38 	.word	0x08017e38
 8009654:	080184a8 	.word	0x080184a8
 8009658:	20000294 	.word	0x20000294
 800965c:	200002ac 	.word	0x200002ac
 8009660:	080184ac 	.word	0x080184ac

08009664 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Extract certificate from string
 * @param[in] cert_string
 */

void getcertificate(string *cert_string) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b09e      	sub	sp, #120	; 0x78
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	string find_str = "---";
 800966c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009670:	4618      	mov	r0, r3
 8009672:	f00d fbeb 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009676:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800967a:	f107 030c 	add.w	r3, r7, #12
 800967e:	492b      	ldr	r1, [pc, #172]	; (800972c <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8009680:	4618      	mov	r0, r3
 8009682:	f00e f89f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f00d fbe0 	bl	8016e50 <_ZNSaIcED1Ev>
	uint32_t start_index = cert_string->find(find_str);
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	2200      	movs	r2, #0
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f00d ffb7 	bl	801760c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 800969e:	6778      	str	r0, [r7, #116]	; 0x74
	uint32_t end_index = 2 + cert_string->find_last_of(find_str);
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	f04f 32ff 	mov.w	r2, #4294967295
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f00e f804 	bl	80176b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofERKS4_j>
 80096b0:	4603      	mov	r3, r0
 80096b2:	3302      	adds	r3, #2
 80096b4:	673b      	str	r3, [r7, #112]	; 0x70
	*cert_string = cert_string->substr(start_index, end_index - start_index);
 80096b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80096c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	f00e f8b6 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80096c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f00d fd1d 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80096d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096d8:	4618      	mov	r0, r3
 80096da:	f00d fd0c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	both_debug.Print2("\r\nCertificate -->" + *cert_string + "<--\r\n");
 80096de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	4912      	ldr	r1, [pc, #72]	; (8009730 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>)
 80096e6:	4618      	mov	r0, r3
 80096e8:	f003 f81e 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80096ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80096f4:	4a0f      	ldr	r2, [pc, #60]	; (8009734 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 80096f6:	4618      	mov	r0, r3
 80096f8:	f003 fc5f 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80096fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009700:	4619      	mov	r1, r3
 8009702:	480d      	ldr	r0, [pc, #52]	; (8009738 <_Z14getcertificatePNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 8009704:	f7fc fe2c 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800970c:	4618      	mov	r0, r3
 800970e:	f00d fcf2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009716:	4618      	mov	r0, r3
 8009718:	f00d fced 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800971c:	f107 030c 	add.w	r3, r7, #12
 8009720:	4618      	mov	r0, r3
 8009722:	f00d fce8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009726:	3778      	adds	r7, #120	; 0x78
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	080184c0 	.word	0x080184c0
 8009730:	080184c4 	.word	0x080184c4
 8009734:	0801822c 	.word	0x0801822c
 8009738:	200002dc 	.word	0x200002dc

0800973c <_Z11https_setupv>:
#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE) or defined(MOHIT)
/**
 * @brief Configure HTTPS parameters
 */

void https_setup() {
 800973c:	b5b0      	push	{r4, r5, r7, lr}
 800973e:	b0f0      	sub	sp, #448	; 0x1c0
 8009740:	af04      	add	r7, sp, #16
	neoway.SEND_RECIEVE("AT+HTTPSCFG=sslversion,3", { 5000 }, 5, { "OK" });
 8009742:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009746:	4618      	mov	r0, r3
 8009748:	f00d fb80 	bl	8016e4c <_ZNSaIcEC1Ev>
 800974c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009750:	f107 031c 	add.w	r3, r7, #28
 8009754:	49df      	ldr	r1, [pc, #892]	; (8009ad4 <_Z11https_setupv+0x398>)
 8009756:	4618      	mov	r0, r3
 8009758:	f00e f834 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800975c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8009760:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009764:	f241 3288 	movw	r2, #5000	; 0x1388
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800976e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009772:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800977c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009780:	2201      	movs	r2, #1
 8009782:	605a      	str	r2, [r3, #4]
 8009784:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009788:	4618      	mov	r0, r3
 800978a:	f00d fb5f 	bl	8016e4c <_ZNSaIcEC1Ev>
 800978e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009796:	49d0      	ldr	r1, [pc, #832]	; (8009ad8 <_Z11https_setupv+0x39c>)
 8009798:	4618      	mov	r0, r3
 800979a:	f00e f813 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800979e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80097a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80097a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80097b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80097b4:	2201      	movs	r2, #1
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80097bc:	f5a3 74d6 	sub.w	r4, r3, #428	; 0x1ac
 80097c0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80097c4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80097c8:	f107 051c 	add.w	r5, r7, #28
 80097cc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80097d0:	f5a2 71b6 	sub.w	r1, r2, #364	; 0x16c
 80097d4:	aa02      	add	r2, sp, #8
 80097d6:	c903      	ldmia	r1, {r0, r1}
 80097d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80097dc:	2205      	movs	r2, #5
 80097de:	9201      	str	r2, [sp, #4]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	9200      	str	r2, [sp, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	462a      	mov	r2, r5
 80097e8:	49bc      	ldr	r1, [pc, #752]	; (8009adc <_Z11https_setupv+0x3a0>)
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7fa fb14 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f00d fc7f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097f8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80097fc:	3418      	adds	r4, #24
 80097fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009802:	429c      	cmp	r4, r3
 8009804:	d004      	beq.n	8009810 <_Z11https_setupv+0xd4>
 8009806:	3c18      	subs	r4, #24
 8009808:	4620      	mov	r0, r4
 800980a:	f00d fc74 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800980e:	e7f6      	b.n	80097fe <_Z11https_setupv+0xc2>
 8009810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009814:	4618      	mov	r0, r3
 8009816:	f00d fb1b 	bl	8016e50 <_ZNSaIcED1Ev>
 800981a:	f107 031c 	add.w	r3, r7, #28
 800981e:	4618      	mov	r0, r3
 8009820:	f00d fc69 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009828:	4618      	mov	r0, r3
 800982a:	f00d fb11 	bl	8016e50 <_ZNSaIcED1Ev>
	neoway.SEND_RECIEVE("AT+HTTPSCFG=authmode,0", { 5000 }, 5, { "OK" });
 800982e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009832:	4618      	mov	r0, r3
 8009834:	f00d fb0a 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009838:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800983c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009840:	49a7      	ldr	r1, [pc, #668]	; (8009ae0 <_Z11https_setupv+0x3a4>)
 8009842:	4618      	mov	r0, r3
 8009844:	f00d ffbe 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009848:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800984c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009850:	f241 3288 	movw	r2, #5000	; 0x1388
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800985a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800985e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8009868:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800986c:	2201      	movs	r2, #1
 800986e:	605a      	str	r2, [r3, #4]
 8009870:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009874:	4618      	mov	r0, r3
 8009876:	f00d fae9 	bl	8016e4c <_ZNSaIcEC1Ev>
 800987a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800987e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009882:	4995      	ldr	r1, [pc, #596]	; (8009ad8 <_Z11https_setupv+0x39c>)
 8009884:	4618      	mov	r0, r3
 8009886:	f00d ff9d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800988a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009892:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a0:	2201      	movs	r2, #1
 80098a2:	605a      	str	r2, [r3, #4]
 80098a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80098a8:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 80098ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80098b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80098b4:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80098b8:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80098bc:	f5a2 7184 	sub.w	r1, r2, #264	; 0x108
 80098c0:	aa02      	add	r2, sp, #8
 80098c2:	c903      	ldmia	r1, {r0, r1}
 80098c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80098c8:	2205      	movs	r2, #5
 80098ca:	9201      	str	r2, [sp, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	9200      	str	r2, [sp, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	462a      	mov	r2, r5
 80098d4:	4981      	ldr	r1, [pc, #516]	; (8009adc <_Z11https_setupv+0x3a0>)
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7fa fa9e 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80098dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80098e0:	4618      	mov	r0, r3
 80098e2:	f00d fc08 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098e6:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 80098ea:	3418      	adds	r4, #24
 80098ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80098f0:	429c      	cmp	r4, r3
 80098f2:	d004      	beq.n	80098fe <_Z11https_setupv+0x1c2>
 80098f4:	3c18      	subs	r4, #24
 80098f6:	4620      	mov	r0, r4
 80098f8:	f00d fbfd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098fc:	e7f6      	b.n	80098ec <_Z11https_setupv+0x1b0>
 80098fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009902:	4618      	mov	r0, r3
 8009904:	f00d faa4 	bl	8016e50 <_ZNSaIcED1Ev>
 8009908:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800990c:	4618      	mov	r0, r3
 800990e:	f00d fbf2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009912:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009916:	4618      	mov	r0, r3
 8009918:	f00d fa9a 	bl	8016e50 <_ZNSaIcED1Ev>
	neoway.SEND_RECIEVE("AT+HTTPSCFG?", { 3000 }, 5, { "+HTTPSCFG:", "OK" });
 800991c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009920:	4618      	mov	r0, r3
 8009922:	f00d fa93 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009926:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800992a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800992e:	496d      	ldr	r1, [pc, #436]	; (8009ae4 <_Z11https_setupv+0x3a8>)
 8009930:	4618      	mov	r0, r3
 8009932:	f00d ff47 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009936:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800993a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800993e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009942:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009946:	2301      	movs	r3, #1
 8009948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800994c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009950:	4618      	mov	r0, r3
 8009952:	f00d fa7b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009956:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800995a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800995e:	4962      	ldr	r1, [pc, #392]	; (8009ae8 <_Z11https_setupv+0x3ac>)
 8009960:	4618      	mov	r0, r3
 8009962:	f00d ff2f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009966:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800996a:	4618      	mov	r0, r3
 800996c:	f00d fa6e 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009970:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009974:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009978:	3318      	adds	r3, #24
 800997a:	4957      	ldr	r1, [pc, #348]	; (8009ad8 <_Z11https_setupv+0x39c>)
 800997c:	4618      	mov	r0, r3
 800997e:	f00d ff21 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009982:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800998a:	2302      	movs	r3, #2
 800998c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009990:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8009994:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8009998:	ad02      	add	r5, sp, #8
 800999a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800999e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80099a6:	2305      	movs	r3, #5
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80099b4:	4949      	ldr	r1, [pc, #292]	; (8009adc <_Z11https_setupv+0x3a0>)
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7fa fa2e 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 80099bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80099c0:	4618      	mov	r0, r3
 80099c2:	f00d fb98 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099c6:	f507 748a 	add.w	r4, r7, #276	; 0x114
 80099ca:	3430      	adds	r4, #48	; 0x30
 80099cc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80099d0:	429c      	cmp	r4, r3
 80099d2:	d004      	beq.n	80099de <_Z11https_setupv+0x2a2>
 80099d4:	3c18      	subs	r4, #24
 80099d6:	4620      	mov	r0, r4
 80099d8:	f00d fb8d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099dc:	e7f6      	b.n	80099cc <_Z11https_setupv+0x290>
 80099de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099e2:	4618      	mov	r0, r3
 80099e4:	f00d fa34 	bl	8016e50 <_ZNSaIcED1Ev>
 80099e8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80099ec:	4618      	mov	r0, r3
 80099ee:	f00d fa2f 	bl	8016e50 <_ZNSaIcED1Ev>
 80099f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80099f6:	4618      	mov	r0, r3
 80099f8:	f00d fb7d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009a00:	4618      	mov	r0, r3
 8009a02:	f00d fa25 	bl	8016e50 <_ZNSaIcED1Ev>
	neoway.SEND_RECIEVE("AT+HTTPSPARA=port,443", { 5000 }, 5, { "OK" });
 8009a06:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f00d fa1e 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009a10:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8009a14:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8009a18:	4934      	ldr	r1, [pc, #208]	; (8009aec <_Z11https_setupv+0x3b0>)
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f00d fed2 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a20:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8009a28:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009a2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009a30:	2301      	movs	r3, #1
 8009a32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009a36:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00d fa06 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009a40:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8009a44:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8009a48:	4923      	ldr	r1, [pc, #140]	; (8009ad8 <_Z11https_setupv+0x39c>)
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f00d feba 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a50:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8009a54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8009a5e:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 8009a62:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8009a66:	ad02      	add	r5, sp, #8
 8009a68:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a74:	2305      	movs	r3, #5
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009a82:	4916      	ldr	r1, [pc, #88]	; (8009adc <_Z11https_setupv+0x3a0>)
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7fa f9c7 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8009a8a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f00d fb31 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a94:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 8009a98:	3418      	adds	r4, #24
 8009a9a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8009a9e:	429c      	cmp	r4, r3
 8009aa0:	d004      	beq.n	8009aac <_Z11https_setupv+0x370>
 8009aa2:	3c18      	subs	r4, #24
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f00d fb26 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009aaa:	e7f6      	b.n	8009a9a <_Z11https_setupv+0x35e>
 8009aac:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f00d f9cd 	bl	8016e50 <_ZNSaIcED1Ev>
 8009ab6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00d fb1b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ac0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f00d f9c3 	bl	8016e50 <_ZNSaIcED1Ev>

}
 8009aca:	bf00      	nop
 8009acc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ad4:	080184d8 	.word	0x080184d8
 8009ad8:	08017ecc 	.word	0x08017ecc
 8009adc:	200001a0 	.word	0x200001a0
 8009ae0:	080184f4 	.word	0x080184f4
 8009ae4:	0801850c 	.word	0x0801850c
 8009ae8:	0801851c 	.word	0x0801851c
 8009aec:	08018528 	.word	0x08018528

08009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:
 * makes http request to the link with choosable action mode
 * @param string link - https link without https://
 * @param uint action_mode - HTTPACTION mode choice
 * @retval string
 */
string https_req(string link, uint16_t action_mode) {
 8009af0:	b5b0      	push	{r4, r5, r7, lr}
 8009af2:	b0ea      	sub	sp, #424	; 0x1a8
 8009af4:	af04      	add	r7, sp, #16
 8009af6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009afa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009afe:	6018      	str	r0, [r3, #0]
 8009b00:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b08:	6019      	str	r1, [r3, #0]
 8009b0a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b0e:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8009b12:	801a      	strh	r2, [r3, #0]
//	both_debug.Print2("\r\nHTTPS LINK :" + link + "\r\n");
	neoway.SEND_RECIEVE("AT+HTTPSPARA=url," + link, { 5000 }, 1, { "OK" });
 8009b14:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b18:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8009b1c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	49c7      	ldr	r1, [pc, #796]	; (8009e44 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x354>)
 8009b28:	f002 fdfe 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009b2c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009b42:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b4c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009b50:	2201      	movs	r2, #1
 8009b52:	605a      	str	r2, [r3, #4]
 8009b54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f00d f977 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009b5e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b66:	49b8      	ldr	r1, [pc, #736]	; (8009e48 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x358>)
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f00d fe2b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b6e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b72:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b84:	2201      	movs	r2, #1
 8009b86:	605a      	str	r2, [r3, #4]
 8009b88:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b8c:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 8009b90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b94:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009b98:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8009b9c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009ba0:	f5a2 71a4 	sub.w	r1, r2, #328	; 0x148
 8009ba4:	aa02      	add	r2, sp, #8
 8009ba6:	c903      	ldmia	r1, {r0, r1}
 8009ba8:	e882 0003 	stmia.w	r2, {r0, r1}
 8009bac:	2201      	movs	r2, #1
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	9200      	str	r2, [sp, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	49a4      	ldr	r1, [pc, #656]	; (8009e4c <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x35c>)
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7fa f92c 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8009bc0:	f107 0314 	add.w	r3, r7, #20
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f00d fa96 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009bca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009bce:	3418      	adds	r4, #24
 8009bd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d004      	beq.n	8009be2 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xf2>
 8009bd8:	3c18      	subs	r4, #24
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f00d fa8b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009be0:	e7f6      	b.n	8009bd0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xe0>
 8009be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009be6:	4618      	mov	r0, r3
 8009be8:	f00d f932 	bl	8016e50 <_ZNSaIcED1Ev>
 8009bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f00d fa80 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	neoway.SEND_RECIEVE("AT+HTTPSSETUP", { 1000, 10000 }, 1, { "HTTPSSETUP", "OK" });
 8009bf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f00d f926 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009c00:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009c04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009c08:	4991      	ldr	r1, [pc, #580]	; (8009e50 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x360>)
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f00d fdda 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009c10:	4a90      	ldr	r2, [pc, #576]	; (8009e54 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x364>)
 8009c12:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c26:	2302      	movs	r3, #2
 8009c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f00d f90b 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009c36:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009c3e:	4986      	ldr	r1, [pc, #536]	; (8009e58 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x368>)
 8009c40:	4618      	mov	r0, r3
 8009c42:	f00d fdbf 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009c46:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f00d f8fe 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009c50:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009c54:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009c58:	3318      	adds	r3, #24
 8009c5a:	497b      	ldr	r1, [pc, #492]	; (8009e48 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x358>)
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f00d fdb1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009c62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c70:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009c74:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 8009c78:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009c7c:	ad02      	add	r5, sp, #8
 8009c7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009c82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c86:	e885 0003 	stmia.w	r5, {r0, r1}
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c98:	496c      	ldr	r1, [pc, #432]	; (8009e4c <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x35c>)
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7fa f8bc 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8009ca0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f00d fa26 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009caa:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8009cae:	3430      	adds	r4, #48	; 0x30
 8009cb0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d004      	beq.n	8009cc2 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x1d2>
 8009cb8:	3c18      	subs	r4, #24
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f00d fa1b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009cc0:	e7f6      	b.n	8009cb0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x1c0>
 8009cc2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f00d f8c2 	bl	8016e50 <_ZNSaIcED1Ev>
 8009ccc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f00d f8bd 	bl	8016e50 <_ZNSaIcED1Ev>
 8009cd6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f00d fa0b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f00d f8b3 	bl	8016e50 <_ZNSaIcED1Ev>
	delay(1 * us_s);
 8009cea:	485c      	ldr	r0, [pc, #368]	; (8009e5c <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x36c>)
 8009cec:	f7f9 fcde 	bl	80036ac <_Z5delaym>
	string response = neoway.SEND_RECIEVE("AT+HTTPSACTION=" + d_t_s(action_mode, 0), { 5000, 5000, 1000 }, 1, { "OK", "HTTPSCLOSED", "" });
 8009cf0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009cf4:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f6 fc02 	bl	8000504 <__aeabi_ui2d>
 8009d00:	4604      	mov	r4, r0
 8009d02:	460d      	mov	r5, r1
 8009d04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	ec45 4b10 	vmov	d0, r4, r5
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7f7 fc09 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8009d16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009d1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009d1e:	4950      	ldr	r1, [pc, #320]	; (8009e60 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x370>)
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 fe03 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009d26:	4a4f      	ldr	r2, [pc, #316]	; (8009e64 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x374>)
 8009d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009d40:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009d44:	4618      	mov	r0, r3
 8009d46:	f00d f881 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009d4a:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8009d4e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009d52:	493d      	ldr	r1, [pc, #244]	; (8009e48 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x358>)
 8009d54:	4618      	mov	r0, r3
 8009d56:	f00d fd35 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f00d f874 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009d64:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009d68:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009d6c:	3318      	adds	r3, #24
 8009d6e:	493e      	ldr	r1, [pc, #248]	; (8009e68 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x378>)
 8009d70:	4618      	mov	r0, r3
 8009d72:	f00d fd27 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d76:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f00d f866 	bl	8016e4c <_ZNSaIcEC1Ev>
 8009d80:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8009d84:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009d88:	3330      	adds	r3, #48	; 0x30
 8009d8a:	4938      	ldr	r1, [pc, #224]	; (8009e6c <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x37c>)
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f00d fd19 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d92:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009d96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009da0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009da4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009da8:	681c      	ldr	r4, [r3, #0]
 8009daa:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009dae:	ad02      	add	r5, sp, #8
 8009db0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009db4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dca:	4920      	ldr	r1, [pc, #128]	; (8009e4c <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x35c>)
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7fa f823 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 8009dd2:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 8009dd6:	3448      	adds	r4, #72	; 0x48
 8009dd8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	d004      	beq.n	8009dea <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2fa>
 8009de0:	3c18      	subs	r4, #24
 8009de2:	4620      	mov	r0, r4
 8009de4:	f00d f987 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009de8:	e7f6      	b.n	8009dd8 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2e8>
 8009dea:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8009dee:	4618      	mov	r0, r3
 8009df0:	f00d f82e 	bl	8016e50 <_ZNSaIcED1Ev>
 8009df4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f00d f829 	bl	8016e50 <_ZNSaIcED1Ev>
 8009dfe:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009e02:	4618      	mov	r0, r3
 8009e04:	f00d f824 	bl	8016e50 <_ZNSaIcED1Ev>
 8009e08:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f00d f972 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00d f96d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//	both_debug.Print2("\r\nRaw Response-->\r\n" + response + "\r\n<--Raw Response\r\n\r\n");
	return response;
 8009e1c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009e24:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009e28:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8009e2c:	6812      	ldr	r2, [r2, #0]
 8009e2e:	601a      	str	r2, [r3, #0]

}
 8009e30:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bdb0      	pop	{r4, r5, r7, pc}
 8009e42:	bf00      	nop
 8009e44:	08018540 	.word	0x08018540
 8009e48:	08017ecc 	.word	0x08017ecc
 8009e4c:	200001a0 	.word	0x200001a0
 8009e50:	08018554 	.word	0x08018554
 8009e54:	0801858c 	.word	0x0801858c
 8009e58:	08018564 	.word	0x08018564
 8009e5c:	000f4240 	.word	0x000f4240
 8009e60:	08018570 	.word	0x08018570
 8009e64:	08018594 	.word	0x08018594
 8009e68:	08018580 	.word	0x08018580
 8009e6c:	08017e00 	.word	0x08017e00

08009e70 <_ZNKSt16initializer_listIhE5beginEv>:

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE>:
 * @brief Printing format for time
 * @param[in] name_time name to print along time
 * @param[in] name_time List of values in order { Hours, Minutes, Seconds, Date, Month, Year }
 */

void print_time(string name_time, initializer_list<uint8_t> list) {
 8009e88:	b5b0      	push	{r4, r5, r7, lr}
 8009e8a:	b0f6      	sub	sp, #472	; 0x1d8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009e92:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009e96:	6018      	str	r0, [r3, #0]
 8009e98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009e9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009ea0:	e883 0006 	stmia.w	r3, {r1, r2}
	both_debug.Print2("\r\n" + name_time + " - " + d_t_s(*(list.begin() + 0), 0, 1) + ":" + d_t_s(*(list.begin() + 1), 0, 1) + ":" + d_t_s(*(list.begin() + 2), 0, 1) + "  " + d_t_s(*(list.begin() + 3), 0, 1) + "/" + d_t_s(*(list.begin() + 4), 0, 1) + "/" + d_t_s(*(list.begin() + 5), 0, 1));
 8009ea4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009ea8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009eac:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	49b1      	ldr	r1, [pc, #708]	; (800a178 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x2f0>)
 8009eb4:	f002 fc38 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009eb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ebc:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8009ec0:	4aae      	ldr	r2, [pc, #696]	; (800a17c <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x2f4>)
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f003 f879 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009ec8:	1d3b      	adds	r3, r7, #4
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff ffd0 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f6 fb15 	bl	8000504 <__aeabi_ui2d>
 8009eda:	4604      	mov	r4, r0
 8009edc:	460d      	mov	r5, r1
 8009ede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	ec45 4b10 	vmov	d0, r4, r5
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f7 fb1c 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8009ef0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009ef4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ef8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8009efc:	4618      	mov	r0, r3
 8009efe:	f002 fc9a 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009f02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009f06:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8009f0a:	4a9d      	ldr	r2, [pc, #628]	; (800a180 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x2f8>)
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f003 f854 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009f12:	1d3b      	adds	r3, r7, #4
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff ffab 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f6 faef 	bl	8000504 <__aeabi_ui2d>
 8009f26:	4604      	mov	r4, r0
 8009f28:	460d      	mov	r5, r1
 8009f2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009f2e:	2201      	movs	r2, #1
 8009f30:	2100      	movs	r1, #0
 8009f32:	ec45 4b10 	vmov	d0, r4, r5
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f7 faf6 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8009f3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f44:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8009f48:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f002 fc72 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009f52:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f5a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8009f5e:	4a88      	ldr	r2, [pc, #544]	; (800a180 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x2f8>)
 8009f60:	4618      	mov	r0, r3
 8009f62:	f003 f82a 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff ff81 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	3302      	adds	r3, #2
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f6 fac5 	bl	8000504 <__aeabi_ui2d>
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	460d      	mov	r5, r1
 8009f7e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009f82:	2201      	movs	r2, #1
 8009f84:	2100      	movs	r1, #0
 8009f86:	ec45 4b10 	vmov	d0, r4, r5
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f7 facc 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8009f90:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009f94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009f98:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8009f9c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f002 fc48 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009fa6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009faa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009fae:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8009fb2:	4a74      	ldr	r2, [pc, #464]	; (800a184 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x2fc>)
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f003 f800 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff ff57 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f6 fa9b 	bl	8000504 <__aeabi_ui2d>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	2100      	movs	r1, #0
 8009fda:	ec45 4b10 	vmov	d0, r4, r5
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7f7 faa2 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 8009fe4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009fe8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009fec:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009ff0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 fc1e 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009ffa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8009ffe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800a002:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800a006:	4a60      	ldr	r2, [pc, #384]	; (800a188 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x300>)
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 ffd6 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a00e:	1d3b      	adds	r3, r7, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff ff2d 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 800a016:	4603      	mov	r3, r0
 800a018:	3304      	adds	r3, #4
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7f6 fa71 	bl	8000504 <__aeabi_ui2d>
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
 800a026:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800a02a:	2201      	movs	r2, #1
 800a02c:	2100      	movs	r1, #0
 800a02e:	ec45 4b10 	vmov	d0, r4, r5
 800a032:	4618      	mov	r0, r3
 800a034:	f7f7 fa78 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800a038:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a03c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a040:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800a044:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 fbf4 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800a04e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a056:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a05a:	4a4b      	ldr	r2, [pc, #300]	; (800a188 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x300>)
 800a05c:	4618      	mov	r0, r3
 800a05e:	f002 ffac 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a062:	1d3b      	adds	r3, r7, #4
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff ff03 	bl	8009e70 <_ZNKSt16initializer_listIhE5beginEv>
 800a06a:	4603      	mov	r3, r0
 800a06c:	3305      	adds	r3, #5
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f7f6 fa47 	bl	8000504 <__aeabi_ui2d>
 800a076:	4604      	mov	r4, r0
 800a078:	460d      	mov	r5, r1
 800a07a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800a07e:	2201      	movs	r2, #1
 800a080:	2100      	movs	r1, #0
 800a082:	ec45 4b10 	vmov	d0, r4, r5
 800a086:	4618      	mov	r0, r3
 800a088:	f7f7 fa4e 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800a08c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a090:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800a094:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800a098:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a09c:	4618      	mov	r0, r3
 800a09e:	f002 fbca 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800a0a2:	f107 0310 	add.w	r3, r7, #16
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4838      	ldr	r0, [pc, #224]	; (800a18c <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE+0x304>)
 800a0aa:	f7fc f959 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a0ae:	f107 0310 	add.w	r3, r7, #16
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f00d f81f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0b8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f00d f81a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f00d f815 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f00d f810 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f00d f80b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f00d f806 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f00d f801 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0f4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f00c fffc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a102:	4618      	mov	r0, r3
 800a104:	f00c fff7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a108:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f00c fff2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a112:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a116:	4618      	mov	r0, r3
 800a118:	f00c ffed 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a11c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a120:	4618      	mov	r0, r3
 800a122:	f00c ffe8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a126:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f00c ffe3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a130:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a134:	4618      	mov	r0, r3
 800a136:	f00c ffde 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a13a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a13e:	4618      	mov	r0, r3
 800a140:	f00c ffd9 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a144:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a148:	4618      	mov	r0, r3
 800a14a:	f00c ffd4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a14e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a152:	4618      	mov	r0, r3
 800a154:	f00c ffcf 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a158:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a15c:	4618      	mov	r0, r3
 800a15e:	f00c ffca 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a166:	4618      	mov	r0, r3
 800a168:	f00c ffc5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800a16c:	bf00      	nop
 800a16e:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 800a172:	46bd      	mov	sp, r7
 800a174:	bdb0      	pop	{r4, r5, r7, pc}
 800a176:	bf00      	nop
 800a178:	08017e38 	.word	0x08017e38
 800a17c:	080185ac 	.word	0x080185ac
 800a180:	080185b0 	.word	0x080185b0
 800a184:	080185b4 	.word	0x080185b4
 800a188:	080185b8 	.word	0x080185b8
 800a18c:	200002dc 	.word	0x200002dc

0800a190 <_Z15Print_save_timev>:
/**
 * @brief Print date and time saved in RTC
 */

void Print_save_time() {
 800a190:	b580      	push	{r7, lr}
 800a192:	b092      	sub	sp, #72	; 0x48
 800a194:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime_saved = { 0 };
 800a196:	f107 0308 	add.w	r3, r7, #8
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	609a      	str	r2, [r3, #8]
 800a1a2:	60da      	str	r2, [r3, #12]
 800a1a4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate_saved = { 0 };
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	607b      	str	r3, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &sTime_saved, RTC_FORMAT_BIN);
 800a1aa:	f107 0308 	add.w	r3, r7, #8
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4821      	ldr	r0, [pc, #132]	; (800a238 <_Z15Print_save_timev+0xa8>)
 800a1b4:	f00b fbf3 	bl	801599e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate_saved, RTC_FORMAT_BIN);
 800a1b8:	1d3b      	adds	r3, r7, #4
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4619      	mov	r1, r3
 800a1be:	481e      	ldr	r0, [pc, #120]	; (800a238 <_Z15Print_save_timev+0xa8>)
 800a1c0:	f00b fcd0 	bl	8015b64 <HAL_RTC_GetDate>
	print_time("curtime", { sTime_saved.Hours, sTime_saved.Minutes, sTime_saved.Seconds, sDate_saved.Date, sDate_saved.Month, sDate_saved.Year });
 800a1c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f00c fe3f 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a1ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a1d2:	f107 031c 	add.w	r3, r7, #28
 800a1d6:	4919      	ldr	r1, [pc, #100]	; (800a23c <_Z15Print_save_timev+0xac>)
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f00d faf3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1de:	7a3b      	ldrb	r3, [r7, #8]
 800a1e0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a1e4:	7a7b      	ldrb	r3, [r7, #9]
 800a1e6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a1ea:	7abb      	ldrb	r3, [r7, #10]
 800a1ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1f0:	79bb      	ldrb	r3, [r7, #6]
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	797b      	ldrb	r3, [r7, #5]
 800a1f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a206:	63bb      	str	r3, [r7, #56]	; 0x38
 800a208:	2306      	movs	r3, #6
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a20c:	f107 001c 	add.w	r0, r7, #28
 800a210:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a214:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a218:	f7ff fe36 	bl	8009e88 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE>
 800a21c:	f107 031c 	add.w	r3, r7, #28
 800a220:	4618      	mov	r0, r3
 800a222:	f00c ff68 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a226:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a22a:	4618      	mov	r0, r3
 800a22c:	f00c fe10 	bl	8016e50 <_ZNSaIcED1Ev>

}
 800a230:	bf00      	nop
 800a232:	3748      	adds	r7, #72	; 0x48
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000d64 	.word	0x20000d64
 800a23c:	080185bc 	.word	0x080185bc

0800a240 <_Z13Get_save_timev>:

/**
 * @brief Fetch time from neoway and sync MCU with it
 */

void Get_save_time() {
 800a240:	b5b0      	push	{r4, r5, r7, lr}
 800a242:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800a246:	af04      	add	r7, sp, #16
	 neoway.SEND_RECIEVE("AT+SETTZ=22", { 10 * ms_s}, 2, { "OK" });
	 neoway.SEND_RECIEVE("AT+SETTZ?", { 1 * ms_s,  }, 2, { "OK" });
	 neoway.START();
	 */

	string neoway_time = neoway.SEND_RECIEVE("AT+CCLK?", { 1000 }, 10, { "+CCLK:" });
 800a248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a24c:	4618      	mov	r0, r3
 800a24e:	f00c fdfd 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a252:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800a256:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a25a:	493d      	ldr	r1, [pc, #244]	; (800a350 <_Z13Get_save_timev+0x110>)
 800a25c:	4618      	mov	r0, r3
 800a25e:	f00d fab1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a262:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a266:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a26a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a274:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800a278:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a282:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800a286:	2201      	movs	r2, #1
 800a288:	605a      	str	r2, [r3, #4]
 800a28a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800a28e:	4618      	mov	r0, r3
 800a290:	f00c fddc 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a294:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800a298:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a29c:	492d      	ldr	r1, [pc, #180]	; (800a354 <_Z13Get_save_timev+0x114>)
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f00d fa90 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a2a4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a2a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a2ac:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a2b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a2c2:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 800a2c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a2ca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800a2ce:	f107 05b4 	add.w	r5, r7, #180	; 0xb4
 800a2d2:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800a2d6:	f5a2 71a2 	sub.w	r1, r2, #324	; 0x144
 800a2da:	aa02      	add	r2, sp, #8
 800a2dc:	c903      	ldmia	r1, {r0, r1}
 800a2de:	e882 0003 	stmia.w	r2, {r0, r1}
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	9201      	str	r2, [sp, #4]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	9200      	str	r2, [sp, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	491a      	ldr	r1, [pc, #104]	; (800a358 <_Z13Get_save_timev+0x118>)
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7f9 fd91 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800a2f6:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 800a2fa:	3418      	adds	r4, #24
 800a2fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a300:	429c      	cmp	r4, r3
 800a302:	d004      	beq.n	800a30e <_Z13Get_save_timev+0xce>
 800a304:	3c18      	subs	r4, #24
 800a306:	4620      	mov	r0, r4
 800a308:	f00c fef5 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a30c:	e7f6      	b.n	800a2fc <_Z13Get_save_timev+0xbc>
 800a30e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800a312:	4618      	mov	r0, r3
 800a314:	f00c fd9c 	bl	8016e50 <_ZNSaIcED1Ev>
 800a318:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a31c:	4618      	mov	r0, r3
 800a31e:	f00c feea 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a322:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a326:	4618      	mov	r0, r3
 800a328:	f00c fd92 	bl	8016e50 <_ZNSaIcED1Ev>
	if (!neoway_time.empty() && neo_control == $CONTINUE) {
 800a32c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a330:	4618      	mov	r0, r3
 800a332:	f00c ff4d 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800a336:	4603      	mov	r3, r0
 800a338:	f083 0301 	eor.w	r3, r3, #1
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00e      	beq.n	800a360 <_Z13Get_save_timev+0x120>
 800a342:	4b06      	ldr	r3, [pc, #24]	; (800a35c <_Z13Get_save_timev+0x11c>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d109      	bne.n	800a360 <_Z13Get_save_timev+0x120>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e008      	b.n	800a362 <_Z13Get_save_timev+0x122>
 800a350:	080185c4 	.word	0x080185c4
 800a354:	080185d0 	.word	0x080185d0
 800a358:	200001a0 	.word	0x200001a0
 800a35c:	20000000 	.word	0x20000000
 800a360:	2300      	movs	r3, #0
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 829a 	beq.w	800a89c <_Z13Get_save_timev+0x65c>
		uint32_t indexes = neoway_time.find('"') + 1;
 800a368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a36c:	2200      	movs	r2, #0
 800a36e:	2122      	movs	r1, #34	; 0x22
 800a370:	4618      	mov	r0, r3
 800a372:	f00d f960 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a376:	4603      	mov	r3, r0
 800a378:	3301      	adds	r3, #1
 800a37a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		uint32_t indexes2 = neoway_time.find('/', indexes);
 800a37e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a382:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a386:	212f      	movs	r1, #47	; 0x2f
 800a388:	4618      	mov	r0, r3
 800a38a:	f00d f954 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a38e:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_date = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a392:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a396:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800a3a0:	f5a2 7090 	sub.w	r0, r2, #288	; 0x120
 800a3a4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a3a8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a3ac:	f00d fa42 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a3b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f7 f95b 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a3ba:	ec53 2b10 	vmov	r2, r3, d0
 800a3be:	4610      	mov	r0, r2
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f7f6 fbdb 	bl	8000b7c <__aeabi_d2uiz>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800a3cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00c fe90 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		indexes = indexes2 + 1;
 800a3d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a3da:	3301      	adds	r3, #1
 800a3dc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		indexes2 = neoway_time.find('/', indexes);
 800a3e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a3e4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a3e8:	212f      	movs	r1, #47	; 0x2f
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f00d f923 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a3f0:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_month = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a3f4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a3f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800a402:	f5a2 7084 	sub.w	r0, r2, #264	; 0x108
 800a406:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a40a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a40e:	f00d fa11 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a416:	4618      	mov	r0, r3
 800a418:	f7f7 f92a 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a41c:	ec53 2b10 	vmov	r2, r3, d0
 800a420:	4610      	mov	r0, r2
 800a422:	4619      	mov	r1, r3
 800a424:	f7f6 fbaa 	bl	8000b7c <__aeabi_d2uiz>
 800a428:	4603      	mov	r3, r0
 800a42a:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 800a42e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a432:	4618      	mov	r0, r3
 800a434:	f00c fe5f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		indexes = indexes2 + 1;
 800a438:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a43c:	3301      	adds	r3, #1
 800a43e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		indexes2 = neoway_time.find(',', indexes);
 800a442:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a446:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a44a:	212c      	movs	r1, #44	; 0x2c
 800a44c:	4618      	mov	r0, r3
 800a44e:	f00d f8f2 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a452:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_year = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a456:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a45a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a464:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a468:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a46c:	f00d f9e2 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a474:	4618      	mov	r0, r3
 800a476:	f7f7 f8fb 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a47a:	ec53 2b10 	vmov	r2, r3, d0
 800a47e:	4610      	mov	r0, r2
 800a480:	4619      	mov	r1, r3
 800a482:	f7f6 fb7b 	bl	8000b7c <__aeabi_d2uiz>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800a48c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a490:	4618      	mov	r0, r3
 800a492:	f00c fe30 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		indexes = indexes2 + 1;
 800a496:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a49a:	3301      	adds	r3, #1
 800a49c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		indexes2 = neoway_time.find(':', indexes);
 800a4a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a4a4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a4a8:	213a      	movs	r1, #58	; 0x3a
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f00d f8c3 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a4b0:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_hr = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a4b4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a4b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800a4c2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a4c6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a4ca:	f00d f9b3 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a4ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7f7 f8cc 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a4d8:	ec53 2b10 	vmov	r2, r3, d0
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f7f6 fb4c 	bl	8000b7c <__aeabi_d2uiz>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
 800a4ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f00c fe01 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		indexes = indexes2 + 1;
 800a4f4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		indexes2 = neoway_time.find(':', indexes);
 800a4fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a502:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a506:	213a      	movs	r1, #58	; 0x3a
 800a508:	4618      	mov	r0, r3
 800a50a:	f00d f894 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a50e:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_min = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a512:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a516:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800a520:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a524:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a528:	f00d f984 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a52c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a530:	4618      	mov	r0, r3
 800a532:	f7f7 f89d 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a536:	ec53 2b10 	vmov	r2, r3, d0
 800a53a:	4610      	mov	r0, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	f7f6 fb1d 	bl	8000b7c <__aeabi_d2uiz>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
 800a548:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a54c:	4618      	mov	r0, r3
 800a54e:	f00c fdd2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		indexes = indexes2 + 1;
 800a552:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a556:	3301      	adds	r3, #1
 800a558:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		indexes2 = neoway_time.find('+', indexes);
 800a55c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a560:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a564:	212b      	movs	r1, #43	; 0x2b
 800a566:	4618      	mov	r0, r3
 800a568:	f00d f865 	bl	8017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a56c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		uint8_t temp_sec = s_t_d(neoway_time.substr(indexes, indexes2 - indexes));
 800a570:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800a574:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800a57e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800a582:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a586:	f00d f955 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a58a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f7 f86e 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a594:	ec53 2b10 	vmov	r2, r3, d0
 800a598:	4610      	mov	r0, r2
 800a59a:	4619      	mov	r1, r3
 800a59c:	f7f6 faee 	bl	8000b7c <__aeabi_d2uiz>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 800a5a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f00c fda3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		/*
		 Uncomment to print time
		 both_debug.Print2("\r\nNeoway time - " + temp_hr + ":" + temp_min + ":" + temp_sec + "  " + temp_date + "/" + temp_month + "/" + temp_year);
		 */

		print_time("neotime", { temp_hr, temp_min, temp_sec, temp_date, temp_month, temp_year });
 800a5b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00c fc49 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a5ba:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800a5be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800a5c2:	49bb      	ldr	r1, [pc, #748]	; (800a8b0 <_Z13Get_save_timev+0x670>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f00d f8fd 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a5ca:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800a5ce:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 800a5d2:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 800a5d6:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 800a5da:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 800a5de:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 800a5e2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800a5e6:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 800a5ea:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800a5ee:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
 800a5f2:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800a5f6:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
 800a5fa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a5fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800a602:	2306      	movs	r3, #6
 800a604:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800a608:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800a60c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800a610:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a614:	f7ff fc38 	bl	8009e88 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE>
 800a618:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00c fd6a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a622:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800a626:	4618      	mov	r0, r3
 800a628:	f00c fc12 	bl	8016e50 <_ZNSaIcED1Ev>

		/** Initialize RTC and set the Time and Date
		 */

		RTC_TimeTypeDef sTime = { 0 };
 800a62c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a630:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a634:	461a      	mov	r2, r3
 800a636:	2300      	movs	r3, #0
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	6053      	str	r3, [r2, #4]
 800a63c:	6093      	str	r3, [r2, #8]
 800a63e:	60d3      	str	r3, [r2, #12]
 800a640:	6113      	str	r3, [r2, #16]
		RTC_DateTypeDef sDate = { 0 };
 800a642:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a646:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
		sTime.Hours = temp_hr;
 800a64e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a652:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a656:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
 800a65a:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = temp_min;
 800a65c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a660:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a664:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800a668:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = temp_sec;
 800a66a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a66e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a672:	f897 2212 	ldrb.w	r2, [r7, #530]	; 0x212
 800a676:	709a      	strb	r2, [r3, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a678:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a67c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a680:	2200      	movs	r2, #0
 800a682:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a684:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a688:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a68c:	2200      	movs	r2, #0
 800a68e:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a690:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a694:	2200      	movs	r2, #0
 800a696:	4619      	mov	r1, r3
 800a698:	4886      	ldr	r0, [pc, #536]	; (800a8b4 <_Z13Get_save_timev+0x674>)
 800a69a:	f00b f8e3 	bl	8015864 <HAL_RTC_SetTime>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	bf14      	ite	ne
 800a6a4:	2301      	movne	r3, #1
 800a6a6:	2300      	moveq	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <_Z13Get_save_timev+0x472>
			Error_Handler();
 800a6ae:	f001 fe8d 	bl	800c3cc <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a6b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a6b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	701a      	strb	r2, [r3, #0]
		sDate.Month = temp_month;
 800a6be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a6c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a6c6:	f897 2216 	ldrb.w	r2, [r7, #534]	; 0x216
 800a6ca:	705a      	strb	r2, [r3, #1]
		sDate.Date = temp_date;
 800a6cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a6d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a6d4:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 800a6d8:	709a      	strb	r2, [r3, #2]
		sDate.Year = temp_year;
 800a6da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a6de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a6e2:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 800a6e6:	70da      	strb	r2, [r3, #3]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a6e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4870      	ldr	r0, [pc, #448]	; (800a8b4 <_Z13Get_save_timev+0x674>)
 800a6f2:	f00b f9b0 	bl	8015a56 <HAL_RTC_SetDate>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <_Z13Get_save_timev+0x4ca>
			Error_Handler();
 800a706:	f001 fe61 	bl	800c3cc <Error_Handler>
		}
		Print_save_time();
 800a70a:	f7ff fd41 	bl	800a190 <_Z15Print_save_timev>

		RTC_AlarmTypeDef sAlarmA = { 0 };
 800a70e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a712:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800a716:	4618      	mov	r0, r3
 800a718:	232c      	movs	r3, #44	; 0x2c
 800a71a:	461a      	mov	r2, r3
 800a71c:	2100      	movs	r1, #0
 800a71e:	f00d fa5f 	bl	8017be0 <memset>
		RTC_AlarmTypeDef sAlarmB = { 0 };
 800a722:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a726:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800a72a:	4618      	mov	r0, r3
 800a72c:	232c      	movs	r3, #44	; 0x2c
 800a72e:	461a      	mov	r2, r3
 800a730:	2100      	movs	r1, #0
 800a732:	f00d fa55 	bl	8017be0 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarmA, RTC_ALARM_A, RTC_FORMAT_BIN);
 800a736:	1d39      	adds	r1, r7, #4
 800a738:	2300      	movs	r3, #0
 800a73a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a73e:	485d      	ldr	r0, [pc, #372]	; (800a8b4 <_Z13Get_save_timev+0x674>)
 800a740:	f00b fb9a 	bl	8015e78 <HAL_RTC_GetAlarm>
		HAL_RTC_GetAlarm(&hrtc, &sAlarmB, RTC_ALARM_B, RTC_FORMAT_BIN);
 800a744:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a748:	2300      	movs	r3, #0
 800a74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74e:	4859      	ldr	r0, [pc, #356]	; (800a8b4 <_Z13Get_save_timev+0x674>)
 800a750:	f00b fb92 	bl	8015e78 <HAL_RTC_GetAlarm>

		RTC_TimeTypeDef sTime_alarmA = sAlarmA.AlarmTime;
 800a754:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a758:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800a75c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a760:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800a764:	4614      	mov	r4, r2
 800a766:	461d      	mov	r5, r3
 800a768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a76a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	6023      	str	r3, [r4, #0]
		RTC_TimeTypeDef sTime_alarmB = sAlarmB.AlarmTime;
 800a770:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a774:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800a778:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a77c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800a780:	4614      	mov	r4, r2
 800a782:	461d      	mov	r5, r3
 800a784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	6023      	str	r3, [r4, #0]
		print_time("AlAtime", { sTime_alarmA.Hours, sTime_alarmA.Minutes, sTime_alarmA.Seconds, 0, 0, 0 });
 800a78c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800a790:	4618      	mov	r0, r3
 800a792:	f00c fb5b 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a796:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800a79a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800a79e:	4946      	ldr	r1, [pc, #280]	; (800a8b8 <_Z13Get_save_timev+0x678>)
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f00d f80f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a7a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a7aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
 800a7b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a7b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1
 800a7c2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a7c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a7ca:	789b      	ldrb	r3, [r3, #2]
 800a7cc:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 31e4 	strb.w	r3, [r7, #484]	; 0x1e4
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
 800a7e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a7e6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a7ea:	2306      	movs	r3, #6
 800a7ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800a7f0:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 800a7f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a7f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a7fc:	f7ff fb44 	bl	8009e88 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE>
 800a800:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800a804:	4618      	mov	r0, r3
 800a806:	f00c fc76 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a80a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800a80e:	4618      	mov	r0, r3
 800a810:	f00c fb1e 	bl	8016e50 <_ZNSaIcED1Ev>
		print_time("AlBtime", { sTime_alarmB.Hours, sTime_alarmB.Minutes, sTime_alarmB.Seconds, 0, 0, 0 });
 800a814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a818:	4618      	mov	r0, r3
 800a81a:	f00c fb17 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a81e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a822:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a826:	4925      	ldr	r1, [pc, #148]	; (800a8bc <_Z13Get_save_timev+0x67c>)
 800a828:	4618      	mov	r0, r3
 800a82a:	f00c ffcb 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a82e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a832:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 800a83c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a840:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800a84a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800a84e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a852:	789b      	ldrb	r3, [r3, #2]
 800a854:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800a858:	2300      	movs	r3, #0
 800a85a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800a85e:	2300      	movs	r3, #0
 800a860:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 800a864:	2300      	movs	r3, #0
 800a866:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 800a86a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800a86e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800a872:	2306      	movs	r3, #6
 800a874:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800a878:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 800a87c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800a880:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a884:	f7ff fb00 	bl	8009e88 <_Z10print_timeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listIhE>
 800a888:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a88c:	4618      	mov	r0, r3
 800a88e:	f00c fc32 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a896:	4618      	mov	r0, r3
 800a898:	f00c fada 	bl	8016e50 <_ZNSaIcED1Ev>
	}
}
 800a89c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f00c fc28 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8a6:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	080185d8 	.word	0x080185d8
 800a8b4:	20000d64 	.word	0x20000d64
 800a8b8:	080185e0 	.word	0x080185e0
 800a8bc:	080185e8 	.word	0x080185e8

0800a8c0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Download File to neoway storage
 * @param[in] link	link to download file from
 */

void httpget(const string &link) {
 800a8c0:	b5b0      	push	{r4, r5, r7, lr}
 800a8c2:	b0e0      	sub	sp, #384	; 0x180
 800a8c4:	af04      	add	r7, sp, #16
 800a8c6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a8ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800a8ce:	6018      	str	r0, [r3, #0]
	neoway.SEND_RECIEVE("AT+HTTPSPARA=url," + link, { 5000 }, 5, { "OK" });
 800a8d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a8d4:	f5a3 70a8 	sub.w	r0, r3, #336	; 0x150
 800a8d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a8dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	49b1      	ldr	r1, [pc, #708]	; (800aba8 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e8>)
 800a8e4:	f001 ff20 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800a8e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a8ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a8fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a8fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a908:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a90c:	2201      	movs	r2, #1
 800a90e:	605a      	str	r2, [r3, #4]
 800a910:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a914:	4618      	mov	r0, r3
 800a916:	f00c fa99 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a91a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a91e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a922:	49a2      	ldr	r1, [pc, #648]	; (800abac <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 800a924:	4618      	mov	r0, r3
 800a926:	f00c ff4d 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a92a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a92e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a932:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a93c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a940:	2201      	movs	r2, #1
 800a942:	605a      	str	r2, [r3, #4]
 800a944:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a948:	f5a3 74b4 	sub.w	r4, r3, #360	; 0x168
 800a94c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a950:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a954:	f107 0520 	add.w	r5, r7, #32
 800a958:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800a95c:	f5a2 7196 	sub.w	r1, r2, #300	; 0x12c
 800a960:	aa02      	add	r2, sp, #8
 800a962:	c903      	ldmia	r1, {r0, r1}
 800a964:	e882 0003 	stmia.w	r2, {r0, r1}
 800a968:	2205      	movs	r2, #5
 800a96a:	9201      	str	r2, [sp, #4]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	9200      	str	r2, [sp, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	462a      	mov	r2, r5
 800a974:	498e      	ldr	r1, [pc, #568]	; (800abb0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 800a976:	4620      	mov	r0, r4
 800a978:	f7f9 fa4e 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	4618      	mov	r0, r3
 800a982:	f00c fbb8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a986:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800a98a:	3418      	adds	r4, #24
 800a98c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a990:	429c      	cmp	r4, r3
 800a992:	d004      	beq.n	800a99e <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 800a994:	3c18      	subs	r4, #24
 800a996:	4620      	mov	r0, r4
 800a998:	f00c fbad 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a99c:	e7f6      	b.n	800a98c <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>
 800a99e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f00c fa54 	bl	8016e50 <_ZNSaIcED1Ev>
 800a9a8:	f107 0320 	add.w	r3, r7, #32
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f00c fba2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	neoway.SEND_RECIEVE("AT+HTTPSSETUP", { 1000, 10000 }, 5, { "HTTPSSETUP", "OK" });
 800a9b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f00c fa48 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a9bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a9c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a9c4:	497b      	ldr	r1, [pc, #492]	; (800abb4 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f00c fefc 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a9cc:	4a7a      	ldr	r2, [pc, #488]	; (800abb8 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800a9ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a9d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9d6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a9de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f00c fa2d 	bl	8016e4c <_ZNSaIcEC1Ev>
 800a9f2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a9f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a9fa:	4970      	ldr	r1, [pc, #448]	; (800abbc <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fc>)
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f00c fee1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800aa06:	4618      	mov	r0, r3
 800aa08:	f00c fa20 	bl	8016e4c <_ZNSaIcEC1Ev>
 800aa0c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800aa10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800aa14:	3318      	adds	r3, #24
 800aa16:	4965      	ldr	r1, [pc, #404]	; (800abac <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f00c fed3 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa1e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800aa22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa26:	2302      	movs	r3, #2
 800aa28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa2c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800aa30:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 800aa34:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800aa38:	ad02      	add	r5, sp, #8
 800aa3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800aa3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa42:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa46:	2305      	movs	r3, #5
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa54:	4956      	ldr	r1, [pc, #344]	; (800abb0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7f9 f9de 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800aa5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aa60:	4618      	mov	r0, r3
 800aa62:	f00c fb48 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa66:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800aa6a:	3430      	adds	r4, #48	; 0x30
 800aa6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d004      	beq.n	800aa7e <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be>
 800aa74:	3c18      	subs	r4, #24
 800aa76:	4620      	mov	r0, r4
 800aa78:	f00c fb3d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa7c:	e7f6      	b.n	800aa6c <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>
 800aa7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800aa82:	4618      	mov	r0, r3
 800aa84:	f00c f9e4 	bl	8016e50 <_ZNSaIcED1Ev>
 800aa88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f00c f9df 	bl	8016e50 <_ZNSaIcED1Ev>
 800aa92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800aa96:	4618      	mov	r0, r3
 800aa98:	f00c fb2d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f00c f9d5 	bl	8016e50 <_ZNSaIcED1Ev>
	delay(1 * us_s);
 800aaa6:	4846      	ldr	r0, [pc, #280]	; (800abc0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x300>)
 800aaa8:	f7f8 fe00 	bl	80036ac <_Z5delaym>
	neoway.SEND_RECIEVE("AT+HTTPSGET=0", { 5000, 15000 }, 5, { "OK", "+HTTPSGETRPT: 10" });
 800aaac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800aab0:	4618      	mov	r0, r3
 800aab2:	f00c f9cb 	bl	8016e4c <_ZNSaIcEC1Ev>
 800aab6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800aaba:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800aabe:	4941      	ldr	r1, [pc, #260]	; (800abc4 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x304>)
 800aac0:	4618      	mov	r0, r3
 800aac2:	f00c fe7f 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aac6:	4a40      	ldr	r2, [pc, #256]	; (800abc8 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x308>)
 800aac8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800aacc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aad0:	e883 0003 	stmia.w	r3, {r0, r1}
 800aad4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800aad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800aadc:	2302      	movs	r3, #2
 800aade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aae2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800aae6:	4618      	mov	r0, r3
 800aae8:	f00c f9b0 	bl	8016e4c <_ZNSaIcEC1Ev>
 800aaec:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800aaf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aaf4:	492d      	ldr	r1, [pc, #180]	; (800abac <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f00c fe64 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aafc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800ab00:	4618      	mov	r0, r3
 800ab02:	f00c f9a3 	bl	8016e4c <_ZNSaIcEC1Ev>
 800ab06:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800ab0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab0e:	3318      	adds	r3, #24
 800ab10:	492e      	ldr	r1, [pc, #184]	; (800abcc <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30c>)
 800ab12:	4618      	mov	r0, r3
 800ab14:	f00c fe56 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ab18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ab20:	2302      	movs	r3, #2
 800ab22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ab26:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800ab2a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800ab2e:	ad02      	add	r5, sp, #8
 800ab30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab38:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab3c:	2305      	movs	r3, #5
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ab4a:	4919      	ldr	r1, [pc, #100]	; (800abb0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7f9 f963 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800ab52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ab56:	4618      	mov	r0, r3
 800ab58:	f00c facd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab5c:	f507 749c 	add.w	r4, r7, #312	; 0x138
 800ab60:	3430      	adds	r4, #48	; 0x30
 800ab62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab66:	429c      	cmp	r4, r3
 800ab68:	d004      	beq.n	800ab74 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b4>
 800ab6a:	3c18      	subs	r4, #24
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f00c fac2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab72:	e7f6      	b.n	800ab62 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a2>
 800ab74:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f00c f969 	bl	8016e50 <_ZNSaIcED1Ev>
 800ab7e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ab82:	4618      	mov	r0, r3
 800ab84:	f00c f964 	bl	8016e50 <_ZNSaIcED1Ev>
 800ab88:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f00c fab2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab92:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800ab96:	4618      	mov	r0, r3
 800ab98:	f00c f95a 	bl	8016e50 <_ZNSaIcED1Ev>
}
 800ab9c:	bf00      	nop
 800ab9e:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bdb0      	pop	{r4, r5, r7, pc}
 800aba6:	bf00      	nop
 800aba8:	08018540 	.word	0x08018540
 800abac:	08017ecc 	.word	0x08017ecc
 800abb0:	200001a0 	.word	0x200001a0
 800abb4:	08018554 	.word	0x08018554
 800abb8:	0801858c 	.word	0x0801858c
 800abbc:	08018564 	.word	0x08018564
 800abc0:	000f4240 	.word	0x000f4240
 800abc4:	08018604 	.word	0x08018604
 800abc8:	08018628 	.word	0x08018628
 800abcc:	08018614 	.word	0x08018614

0800abd0 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_>:
 * @brief Extract the file name from download link
 * @param[in] link download link
 * @param[output] file_name_temp
 * @return param
 */
void get_file_name(const string &link, string &file_name_temp) {
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b096      	sub	sp, #88	; 0x58
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
	uint32_t file_name_start = link.find_last_of("/");
 800abda:	f04f 32ff 	mov.w	r2, #4294967295
 800abde:	491f      	ldr	r1, [pc, #124]	; (800ac5c <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_+0x8c>)
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f00c fd6f 	bl	80176c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcj>
 800abe6:	6578      	str	r0, [r7, #84]	; 0x54
	if (file_name_start != 0) {
 800abe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abea:	2b00      	cmp	r3, #0
 800abec:	d032      	beq.n	800ac54 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_+0x84>
		file_name_temp = link.substr(file_name_start + 1);
 800abee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	f107 000c 	add.w	r0, r7, #12
 800abf6:	f04f 33ff 	mov.w	r3, #4294967295
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	f00c fe1a 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	4619      	mov	r1, r3
 800ac06:	6838      	ldr	r0, [r7, #0]
 800ac08:	f00c fa81 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800ac0c:	f107 030c 	add.w	r3, r7, #12
 800ac10:	4618      	mov	r0, r3
 800ac12:	f00c fa70 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		both_debug.Print2("\r\nfile name = \'" + file_name_temp + "\'\r\n");
 800ac16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	4910      	ldr	r1, [pc, #64]	; (800ac60 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_+0x90>)
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f001 fd82 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800ac24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac28:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ac2c:	4a0d      	ldr	r2, [pc, #52]	; (800ac64 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_+0x94>)
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 f9c3 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800ac34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac38:	4619      	mov	r1, r3
 800ac3a:	480b      	ldr	r0, [pc, #44]	; (800ac68 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_+0x98>)
 800ac3c:	f7fb fb90 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ac40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac44:	4618      	mov	r0, r3
 800ac46:	f00c fa56 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f00c fa51 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800ac54:	bf00      	nop
 800ac56:	3758      	adds	r7, #88	; 0x58
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	080185b8 	.word	0x080185b8
 800ac60:	08018630 	.word	0x08018630
 800ac64:	08018640 	.word	0x08018640
 800ac68:	200002dc 	.word	0x200002dc

0800ac6c <_Z19https_file_downloadRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief HTTPS file downloader to string conversion : downloads the file and saves it to a string
 * @param string link - the link to file that has to be downloaded
 * @retval string
 */
void https_file_download(string &link) {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
	delay(1 * us_s);
 800ac74:	4804      	ldr	r0, [pc, #16]	; (800ac88 <_Z19https_file_downloadRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c>)
 800ac76:	f7f8 fd19 	bl	80036ac <_Z5delaym>
	httpget(link);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fe20 	bl	800a8c0 <_Z7httpgetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
}
 800ac80:	bf00      	nop
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	000f4240 	.word	0x000f4240

0800ac8c <_Z12object_setupv>:
	MISOL_RAIN.ADD_PARA("RAIN_INTENSITY");
	both_debug.Print2("Done\r\n");
	refresh_counter();
}
#else
void object_setup() {
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
}
 800ac90:	bf00      	nop
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
	...

0800ac9c <HAL_RTC_AlarmAEventCallback>:
/**
 * @brief HAL Callback for RTC Alarm A
 * @details Used to set the flag to restart the code to bootloader once a day to check any available OTA
 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]

#if defined(OTA_CODE)
	check_ota = 1;
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	701a      	strb	r2, [r3, #0]
#endif
#if defined(APP_CODE)
	check_ota = 1;
#endif
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20000308 	.word	0x20000308

0800acbc <HAL_RTCEx_AlarmBEventCallback>:
/**
 * @brief HAL Callback for RTC Alarm B
 * @details Used to Wake up from sleep
 */

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
	HAL_PWR_DisableSleepOnExit();
 800acc4:	f009 fb60 	bl	8014388 <HAL_PWR_DisableSleepOnExit>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_RTCEx_WakeUpTimerEventCallback>:
 * @brief HAL Callback for RTC Timer
 * @details Used to refresh watchdog timer according to the flag, this is used to increase the time allowed by original watchdog timer
 * @param[in] hrtc
 */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	switch (watchdog_cont) {
 800acd8:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d006      	beq.n	800acf0 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	dc10      	bgt.n	800ad08 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00d      	beq.n	800ad06 <HAL_RTCEx_WakeUpTimerEventCallback+0x36>
 800acea:	2b01      	cmp	r3, #1
 800acec:	d007      	beq.n	800acfe <HAL_RTCEx_WakeUpTimerEventCallback+0x2e>
			break;

		case $BREAK:
			break;
	}
}
 800acee:	e00b      	b.n	800ad08 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>
			HAL_IWDG_Refresh (&hiwdg);
 800acf0:	4808      	ldr	r0, [pc, #32]	; (800ad14 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 800acf2:	f009 fb29 	bl	8014348 <HAL_IWDG_Refresh>
			watchdog_cont = $BREAK;
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]
			break;
 800acfc:	e004      	b.n	800ad08 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>
			HAL_IWDG_Refresh(&hiwdg);
 800acfe:	4805      	ldr	r0, [pc, #20]	; (800ad14 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 800ad00:	f009 fb22 	bl	8014348 <HAL_IWDG_Refresh>
			break;
 800ad04:	e000      	b.n	800ad08 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>
			break;
 800ad06:	bf00      	nop
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20000002 	.word	0x20000002
 800ad14:	20000100 	.word	0x20000100

0800ad18 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief get size of file from neoway
 * @param file_name name of file downloaded from the s3 bucket
 * @retval uint32_t
 */
uint32_t get_file_size(string &file_name) {
 800ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1a:	b0c9      	sub	sp, #292	; 0x124
 800ad1c:	af04      	add	r7, sp, #16
 800ad1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ad26:	6018      	str	r0, [r3, #0]
	if (check_cont_flags()) {
 800ad28:	f000 f940 	bl	800afac <_Z16check_cont_flagsv>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 8120 	beq.w	800af74 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x25c>
		string response_string = neoway.SEND_RECIEVE("AT+FSLIST?", { 10000 }, 3, { "OK" });
 800ad34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f00c f887 	bl	8016e4c <_ZNSaIcEC1Ev>
 800ad3e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ad42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ad46:	498f      	ldr	r1, [pc, #572]	; (800af84 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>)
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f00c fd3b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ad4e:	f242 7310 	movw	r3, #10000	; 0x2710
 800ad52:	663b      	str	r3, [r7, #96]	; 0x60
 800ad54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ad58:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad5e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ad62:	4618      	mov	r0, r3
 800ad64:	f00c f872 	bl	8016e4c <_ZNSaIcEC1Ev>
 800ad68:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ad6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ad70:	4985      	ldr	r1, [pc, #532]	; (800af88 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x270>)
 800ad72:	4618      	mov	r0, r3
 800ad74:	f00c fd26 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ad78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ad7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ad7e:	2301      	movs	r3, #1
 800ad80:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad82:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800ad86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ad8a:	ae02      	add	r6, sp, #8
 800ad8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ad90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad94:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad98:	2303      	movs	r3, #3
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ada2:	497a      	ldr	r1, [pc, #488]	; (800af8c <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x274>)
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7f9 f837 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800adaa:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800adae:	3418      	adds	r4, #24
 800adb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d004      	beq.n	800adc2 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xaa>
 800adb8:	3c18      	subs	r4, #24
 800adba:	4620      	mov	r0, r4
 800adbc:	f00c f99b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800adc0:	e7f6      	b.n	800adb0 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
 800adc2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800adc6:	4618      	mov	r0, r3
 800adc8:	f00c f842 	bl	8016e50 <_ZNSaIcED1Ev>
 800adcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800add0:	4618      	mov	r0, r3
 800add2:	f00c f990 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800add6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800adda:	4618      	mov	r0, r3
 800addc:	f00c f838 	bl	8016e50 <_ZNSaIcED1Ev>
		ota_break(response_string.size() < 3, "FSLIST");
 800ade0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f00c f9c3 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800adea:	4603      	mov	r3, r0
 800adec:	2b02      	cmp	r3, #2
 800adee:	bf94      	ite	ls
 800adf0:	2301      	movls	r3, #1
 800adf2:	2300      	movhi	r3, #0
 800adf4:	b2dc      	uxtb	r4, r3
 800adf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f00c f826 	bl	8016e4c <_ZNSaIcEC1Ev>
 800ae00:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ae04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ae08:	4961      	ldr	r1, [pc, #388]	; (800af90 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x278>)
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f00c fcda 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ae10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ae14:	4619      	mov	r1, r3
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f8e4 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ae1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ae20:	4618      	mov	r0, r3
 800ae22:	f00c f968 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ae26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f00c f810 	bl	8016e50 <_ZNSaIcED1Ev>
		if (check_cont_flags()) {
 800ae30:	f000 f8bc 	bl	800afac <_Z16check_cont_flagsv>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8094 	beq.w	800af64 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>
			uint32_t file_index = response_string.find(file_name.c_str());
 800ae3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f00c fbab 	bl	80175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae50:	2200      	movs	r2, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f00c fbe0 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800ae58:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			if (file_index == not_found) {
 800ae5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d124      	bne.n	800aeb0 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x198>
				both_debug.Print2("\r\nFILE NOT FOUND : " + file_name + "\r\n");
 800ae66:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800ae6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	4947      	ldr	r1, [pc, #284]	; (800af94 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x27c>)
 800ae76:	f001 fc57 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800ae7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ae7e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800ae82:	4a45      	ldr	r2, [pc, #276]	; (800af98 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x280>)
 800ae84:	4618      	mov	r0, r3
 800ae86:	f002 f898 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800ae8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4842      	ldr	r0, [pc, #264]	; (800af9c <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x284>)
 800ae92:	f7fb fa65 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ae96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f00c f92b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aea0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00c f926 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				return not_found;
 800aeaa:	f04f 35ff 	mov.w	r5, #4294967295
 800aeae:	e057      	b.n	800af60 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x248>
			}
			uint32_t n_index = response_string.find("\r", file_index);
 800aeb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800aeb8:	4939      	ldr	r1, [pc, #228]	; (800afa0 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x288>)
 800aeba:	4618      	mov	r0, r3
 800aebc:	f00c fbac 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800aec0:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
			uint32_t size_index = file_index + file_name.size() + 1;
 800aec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aec8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f00c f94f 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800aed2:	4602      	mov	r2, r0
 800aed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aed8:	4413      	add	r3, r2
 800aeda:	3301      	adds	r3, #1
 800aedc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			string file_size = response_string.substr(size_index, n_index - size_index);
 800aee0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800aeee:	f5a2 7082 	sub.w	r0, r2, #260	; 0x104
 800aef2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800aef6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800aefa:	f00c fc9b 	bl	8017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
			both_debug.Print2("\r\nFile size in = \'" + file_size + "\'\r\n");
 800aefe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800af02:	f107 020c 	add.w	r2, r7, #12
 800af06:	4927      	ldr	r1, [pc, #156]	; (800afa4 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28c>)
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 fc0d 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800af0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800af12:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800af16:	4a24      	ldr	r2, [pc, #144]	; (800afa8 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x290>)
 800af18:	4618      	mov	r0, r3
 800af1a:	f002 f84e 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800af1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800af22:	4619      	mov	r1, r3
 800af24:	481d      	ldr	r0, [pc, #116]	; (800af9c <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x284>)
 800af26:	f7fb fa1b 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800af2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800af2e:	4618      	mov	r0, r3
 800af30:	f00c f8e1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800af38:	4618      	mov	r0, r3
 800af3a:	f00c f8dc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			return s_t_d(file_size);
 800af3e:	f107 030c 	add.w	r3, r7, #12
 800af42:	4618      	mov	r0, r3
 800af44:	f7f6 fb94 	bl	8001670 <_Z5s_t_dRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800af48:	ec53 2b10 	vmov	r2, r3, d0
 800af4c:	4610      	mov	r0, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	f7f5 fe14 	bl	8000b7c <__aeabi_d2uiz>
 800af54:	4605      	mov	r5, r0
		}
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4618      	mov	r0, r3
 800af5c:	f00c f8cb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af60:	2400      	movs	r4, #0
 800af62:	e000      	b.n	800af66 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24e>
	}
 800af64:	2401      	movs	r4, #1
 800af66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f00c f8c3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af70:	2c01      	cmp	r4, #1
 800af72:	d101      	bne.n	800af78 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
	return not_found;
 800af74:	f04f 35ff 	mov.w	r5, #4294967295
}
 800af78:	462b      	mov	r3, r5
 800af7a:	4618      	mov	r0, r3
 800af7c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800af80:	46bd      	mov	sp, r7
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	080186e4 	.word	0x080186e4
 800af88:	08017ecc 	.word	0x08017ecc
 800af8c:	200001a0 	.word	0x200001a0
 800af90:	080186f0 	.word	0x080186f0
 800af94:	080186f8 	.word	0x080186f8
 800af98:	08017e38 	.word	0x08017e38
 800af9c:	200002dc 	.word	0x200002dc
 800afa0:	0801870c 	.word	0x0801870c
 800afa4:	08018710 	.word	0x08018710
 800afa8:	08018640 	.word	0x08018640

0800afac <_Z16check_cont_flagsv>:
 * @brief checks neo_control and ota_control flags to report it back
 * @details details
 * @return bool
 */

bool check_cont_flags() {
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
	bool a = ota_cont == $CONTINUE && neo_control == $CONTINUE;
 800afb2:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <_Z16check_cont_flagsv+0x30>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d106      	bne.n	800afca <_Z16check_cont_flagsv+0x1e>
 800afbc:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <_Z16check_cont_flagsv+0x34>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d101      	bne.n	800afca <_Z16check_cont_flagsv+0x1e>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <_Z16check_cont_flagsv+0x20>
 800afca:	2300      	movs	r3, #0
 800afcc:	71fb      	strb	r3, [r7, #7]
	return a;
 800afce:	79fb      	ldrb	r3, [r7, #7]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	20000001 	.word	0x20000001
 800afe0:	20000000 	.word	0x20000000

0800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 * @brief Used to stop OTA if conditions are not fulfiled, conditions are provided in OTA code
 * @param[in] bool
 * @param[in] string
 */

void ota_break(bool cond, string a) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	6039      	str	r1, [r7, #0]
 800afee:	71fb      	strb	r3, [r7, #7]
	if (cond) {
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d014      	beq.n	800b020 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
		ota_cont = $BREAK;
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
		both_debug.Print2("\r\n\tOTA BREAK FUNC : " + a);
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	490a      	ldr	r1, [pc, #40]	; (800b02c <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
 800b004:	4618      	mov	r0, r3
 800b006:	f001 fb8f 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	4619      	mov	r1, r3
 800b010:	4807      	ldr	r0, [pc, #28]	; (800b030 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800b012:	f7fb f9a5 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f00c f86b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800b020:	bf00      	nop
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20000001 	.word	0x20000001
 800b02c:	08018724 	.word	0x08018724
 800b030:	200002dc 	.word	0x200002dc

0800b034 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>:
 * Takes in file name and file size to copy the file from neoway to internal memory
 * @param[in] string
 * @param[in] uint32_t
 */

void ota_proc(string &file_name, uint32_t file_size) {
 800b034:	b5b0      	push	{r4, r5, r7, lr}
 800b036:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800b03a:	af04      	add	r7, sp, #16
 800b03c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b040:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800b044:	6018      	str	r0, [r3, #0]
 800b046:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b04a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b04e:	6019      	str	r1, [r3, #0]
	refresh_counter();
 800b050:	f7f8 fb54 	bl	80036fc <_Z15refresh_counterv>
	string write_string(5000, ' ');
 800b054:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b058:	4618      	mov	r0, r3
 800b05a:	f00b fef7 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b05e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b062:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800b066:	2220      	movs	r2, #32
 800b068:	f241 3188 	movw	r1, #5000	; 0x1388
 800b06c:	f00c f820 	bl	80170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800b070:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b074:	4618      	mov	r0, r3
 800b076:	f00b feeb 	bl	8016e50 <_ZNSaIcED1Ev>
	string command, skip_size;
 800b07a:	f107 0320 	add.w	r3, r7, #32
 800b07e:	4618      	mov	r0, r3
 800b080:	f00c f808 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800b084:	f107 0308 	add.w	r3, r7, #8
 800b088:	4618      	mov	r0, r3
 800b08a:	f00c f803 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	both_debug.Print2("\r\nSTARTING OTA");
 800b08e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b092:	4618      	mov	r0, r3
 800b094:	f00b feda 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b098:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800b09c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b0a0:	49b1      	ldr	r1, [pc, #708]	; (800b368 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x334>)
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f00c fb8e 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b0a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	48af      	ldr	r0, [pc, #700]	; (800b36c <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x338>)
 800b0b0:	f7fb f956 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b0b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f00c f81c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b0be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f00b fec4 	bl	8016e50 <_ZNSaIcED1Ev>
	save_ble_print(0);
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f7f8 fc91 	bl	80039f0 <_Z14save_ble_printb>
	uint32_t string_size = 2048 * 2;
 800b0ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0d2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	uint32_t low_addr, no_of_bytes;

	for (uint32_t var = 0; var < (file_size / string_size) + 1; var++) {
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800b0dc:	e1e6      	b.n	800b4ac <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x478>
		if (check_cont_flags()) {
 800b0de:	f7ff ff65 	bl	800afac <_Z16check_cont_flagsv>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 81f1 	beq.w	800b4cc <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x498>
			low_addr = (var * string_size);
 800b0ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800b0ee:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800b0f2:	fb02 f303 	mul.w	r3, r2, r3
 800b0f6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
			if (low_addr + string_size < file_size) {
 800b0fa:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800b0fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b102:	4413      	add	r3, r2
 800b104:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800b108:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 800b10c:	6812      	ldr	r2, [r2, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d904      	bls.n	800b11c <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe8>
				no_of_bytes = string_size;
 800b112:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b116:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800b11a:	e009      	b.n	800b130 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xfc>
			} else {
				no_of_bytes = file_size - low_addr;
 800b11c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b120:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			}
			command = "AT+FSRF=\"" + file_name + "\",1," + d_t_s(no_of_bytes, 0) + "," + d_t_s(low_addr, 0);
 800b130:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b134:	f5a3 70a8 	sub.w	r0, r3, #336	; 0x150
 800b138:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b13c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	498b      	ldr	r1, [pc, #556]	; (800b370 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x33c>)
 800b144:	f001 faf0 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800b148:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b14c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800b150:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800b154:	4a87      	ldr	r2, [pc, #540]	; (800b374 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x340>)
 800b156:	4618      	mov	r0, r3
 800b158:	f001 ff2f 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800b15c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800b160:	f7f5 f9d0 	bl	8000504 <__aeabi_ui2d>
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b16c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b170:	2200      	movs	r2, #0
 800b172:	2100      	movs	r1, #0
 800b174:	ec45 4b10 	vmov	d0, r4, r5
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f6 f9d5 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800b17e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b182:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800b186:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800b18a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b18e:	4618      	mov	r0, r3
 800b190:	f001 fb51 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800b194:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b198:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800b19c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800b1a0:	4a75      	ldr	r2, [pc, #468]	; (800b378 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x344>)
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f001 ff09 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800b1a8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800b1ac:	f7f5 f9aa 	bl	8000504 <__aeabi_ui2d>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b1b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	ec45 4b10 	vmov	d0, r4, r5
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f6 f9af 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800b1ca:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b1ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800b1d2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b1d6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 fb2b 	bl	800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800b1e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b1e4:	f107 0320 	add.w	r3, r7, #32
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f00b ff8f 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b1f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f00b ff7e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b1fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b1fe:	4618      	mov	r0, r3
 800b200:	f00b ff79 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b204:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b208:	4618      	mov	r0, r3
 800b20a:	f00b ff74 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b20e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b212:	4618      	mov	r0, r3
 800b214:	f00b ff6f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b218:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800b21c:	4618      	mov	r0, r3
 800b21e:	f00b ff6a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b222:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b226:	4618      	mov	r0, r3
 800b228:	f00b ff65 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b22c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b230:	4618      	mov	r0, r3
 800b232:	f00b ff60 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			skip_size = "\r\n+FSRF: " + d_t_s(no_of_bytes, 0) + ",";
 800b236:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800b23a:	f7f5 f963 	bl	8000504 <__aeabi_ui2d>
 800b23e:	4604      	mov	r4, r0
 800b240:	460d      	mov	r5, r1
 800b242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b246:	2200      	movs	r2, #0
 800b248:	2100      	movs	r1, #0
 800b24a:	ec45 4b10 	vmov	d0, r4, r5
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f6 f96a 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800b254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b258:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b25c:	4947      	ldr	r1, [pc, #284]	; (800b37c <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x348>)
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 fb64 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800b264:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800b270:	4a41      	ldr	r2, [pc, #260]	; (800b378 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x344>)
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fea1 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800b278:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b27c:	f107 0308 	add.w	r3, r7, #8
 800b280:	4611      	mov	r1, r2
 800b282:	4618      	mov	r0, r3
 800b284:	f00b ff43 	bl	801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b288:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b28c:	4618      	mov	r0, r3
 800b28e:	f00b ff32 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b296:	4618      	mov	r0, r3
 800b298:	f00b ff2d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b29c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f00b ff28 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			write_string.clear();
 800b2a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f00b ff8b 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
			neoway.SEND_RECIEVE_POINTER(command, { 5 * ms_s }, 1, { "OK" }, write_string);
 800b2b0:	f107 0220 	add.w	r2, r7, #32
 800b2b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f00c fa4e 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b2c0:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800b2c8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b2cc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800b2d6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f00b fdb6 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b2e0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b2e4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b2e8:	4925      	ldr	r1, [pc, #148]	; (800b380 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x34c>)
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f00c fa6a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b2f0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b2f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800b2fe:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 800b302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b306:	9303      	str	r3, [sp, #12]
 800b308:	aa01      	add	r2, sp, #4
 800b30a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800b30e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b312:	e882 0003 	stmia.w	r2, {r0, r1}
 800b316:	2301      	movs	r3, #1
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b31e:	cb0c      	ldmia	r3, {r2, r3}
 800b320:	4621      	mov	r1, r4
 800b322:	4818      	ldr	r0, [pc, #96]	; (800b384 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x350>)
 800b324:	f7f9 f99c 	bl	8004660 <_ZN6NEOWAY20SEND_RECIEVE_POINTERENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_ERS5_>
 800b328:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 800b32c:	3418      	adds	r4, #24
 800b32e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b332:	429c      	cmp	r4, r3
 800b334:	d004      	beq.n	800b340 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x30c>
 800b336:	3c18      	subs	r4, #24
 800b338:	4620      	mov	r0, r4
 800b33a:	f00b fedc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b33e:	e7f6      	b.n	800b32e <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x2fa>
 800b340:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b344:	4618      	mov	r0, r3
 800b346:	f00b fd83 	bl	8016e50 <_ZNSaIcED1Ev>
 800b34a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800b34e:	4618      	mov	r0, r3
 800b350:	f00b fed1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			if (check_cont_flags()) {
 800b354:	f7ff fe2a 	bl	800afac <_Z16check_cont_flagsv>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 80a1 	beq.w	800b4a2 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x46e>
				for (int var = 0; var < 6; var++) {
 800b360:	2300      	movs	r3, #0
 800b362:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800b366:	e019      	b.n	800b39c <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x368>
 800b368:	0801873c 	.word	0x0801873c
 800b36c:	200002dc 	.word	0x200002dc
 800b370:	080181a4 	.word	0x080181a4
 800b374:	0801874c 	.word	0x0801874c
 800b378:	08018304 	.word	0x08018304
 800b37c:	08018754 	.word	0x08018754
 800b380:	08017ecc 	.word	0x08017ecc
 800b384:	200001a0 	.word	0x200001a0
					write_string.pop_back();
 800b388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b38c:	4618      	mov	r0, r3
 800b38e:	f00b ff7f 	bl	8017290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
				for (int var = 0; var < 6; var++) {
 800b392:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b396:	3301      	adds	r3, #1
 800b398:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800b39c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	ddf1      	ble.n	800b388 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x354>
				}
				write_string.erase(0, skip_size.size());
 800b3a4:	f107 0308 	add.w	r3, r7, #8
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f00b fee1 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f00b ff4c 	bl	8017254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
				ota_break(write_string.size() != no_of_bytes, "NO of bytes not equal");
 800b3bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f00b fed5 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	bf14      	ite	ne
 800b3d0:	2301      	movne	r3, #1
 800b3d2:	2300      	moveq	r3, #0
 800b3d4:	b2dc      	uxtb	r4, r3
 800b3d6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f00b fd36 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b3e0:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800b3e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800b3e8:	4943      	ldr	r1, [pc, #268]	; (800b4f8 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x4c4>)
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f00c f9ea 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b3f0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7ff fdf4 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b3fc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800b400:	4618      	mov	r0, r3
 800b402:	f00b fe78 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b406:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f00b fd20 	bl	8016e50 <_ZNSaIcED1Ev>
				if (check_cont_flags()) {
 800b410:	f7ff fdcc 	bl	800afac <_Z16check_cont_flagsv>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d043      	beq.n	800b4a2 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x46e>
					both_debug.Print2("Writing " + d_t_s(write_string.size(), 0) + " bytes");
 800b41a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b41e:	4618      	mov	r0, r3
 800b420:	f00b fea6 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b424:	4603      	mov	r3, r0
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 f86c 	bl	8000504 <__aeabi_ui2d>
 800b42c:	4604      	mov	r4, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800b434:	2200      	movs	r2, #0
 800b436:	2100      	movs	r1, #0
 800b438:	ec45 4b10 	vmov	d0, r4, r5
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f6 f873 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800b442:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800b446:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800b44a:	492c      	ldr	r1, [pc, #176]	; (800b4fc <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x4c8>)
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fa6d 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800b452:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800b456:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 800b45a:	4a29      	ldr	r2, [pc, #164]	; (800b500 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x4cc>)
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 fdac 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800b462:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800b466:	4619      	mov	r1, r3
 800b468:	4826      	ldr	r0, [pc, #152]	; (800b504 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x4d0>)
 800b46a:	f7fa ff79 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b46e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800b472:	4618      	mov	r0, r3
 800b474:	f00b fe3f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b478:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800b47c:	4618      	mov	r0, r3
 800b47e:	f00b fe3a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b482:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800b486:	4618      	mov	r0, r3
 800b488:	f00b fe35 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					write_data_to_flash_app(write_string, 1);
 800b48c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b490:	2101      	movs	r1, #1
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fd30 	bl	800bef8 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
					write_string.clear();
 800b498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b49c:	4618      	mov	r0, r3
 800b49e:	f00b fe92 	bl	80171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	for (uint32_t var = 0; var < (file_size / string_size) + 1; var++) {
 800b4a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800b4ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b4b0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4be:	3301      	adds	r3, #1
 800b4c0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f4ff ae0a 	bcc.w	800b0de <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xaa>
 800b4ca:	e000      	b.n	800b4ce <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x49a>
				}
			}
		} else {
			break;
 800b4cc:	bf00      	nop
		}
	}
	restore_ble_print();
 800b4ce:	f7f8 faa5 	bl	8003a1c <_Z17restore_ble_printv>

}
 800b4d2:	f107 0308 	add.w	r3, r7, #8
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f00b fe0d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b4dc:	f107 0320 	add.w	r3, r7, #32
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f00b fe08 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b4e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f00b fe03 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b4f0:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bdb0      	pop	{r4, r5, r7, pc}
 800b4f8:	08018760 	.word	0x08018760
 800b4fc:	08018778 	.word	0x08018778
 800b500:	08018784 	.word	0x08018784
 800b504:	200002dc 	.word	0x200002dc

0800b508 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Used to delete OTA file in Neoway
 * @param[in] string
 */

void neoway_delete_file(string &file_name) {
 800b508:	b5b0      	push	{r4, r5, r7, lr}
 800b50a:	b0d6      	sub	sp, #344	; 0x158
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b512:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b516:	6018      	str	r0, [r3, #0]
	neoway.SEND_RECIEVE("AT+FSLIST?", { 10000 }, 5, { "OK" });
 800b518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b51c:	4618      	mov	r0, r3
 800b51e:	f00b fc95 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b522:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b526:	f107 0320 	add.w	r3, r7, #32
 800b52a:	499e      	ldr	r1, [pc, #632]	; (800b7a4 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29c>)
 800b52c:	4618      	mov	r0, r3
 800b52e:	f00c f949 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b532:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b53a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b544:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b548:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b552:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b556:	2201      	movs	r2, #1
 800b558:	605a      	str	r2, [r3, #4]
 800b55a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b55e:	4618      	mov	r0, r3
 800b560:	f00b fc74 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b564:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b568:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b56c:	498e      	ldr	r1, [pc, #568]	; (800b7a8 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a0>)
 800b56e:	4618      	mov	r0, r3
 800b570:	f00c f928 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b574:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b578:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b57c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b586:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b58a:	2201      	movs	r2, #1
 800b58c:	605a      	str	r2, [r3, #4]
 800b58e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b592:	f5a3 74a0 	sub.w	r4, r3, #320	; 0x140
 800b596:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b59a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b59e:	f107 0520 	add.w	r5, r7, #32
 800b5a2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b5a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b5aa:	aa02      	add	r2, sp, #8
 800b5ac:	c903      	ldmia	r1, {r0, r1}
 800b5ae:	e882 0003 	stmia.w	r2, {r0, r1}
 800b5b2:	2205      	movs	r2, #5
 800b5b4:	9201      	str	r2, [sp, #4]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	9200      	str	r2, [sp, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	462a      	mov	r2, r5
 800b5be:	497b      	ldr	r1, [pc, #492]	; (800b7ac <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a4>)
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7f8 fc29 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800b5c6:	f107 0308 	add.w	r3, r7, #8
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f00b fd93 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b5d0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800b5d4:	3418      	adds	r4, #24
 800b5d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	d004      	beq.n	800b5e8 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 800b5de:	3c18      	subs	r4, #24
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f00b fd88 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b5e6:	e7f6      	b.n	800b5d6 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
 800b5e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f00b fc2f 	bl	8016e50 <_ZNSaIcED1Ev>
 800b5f2:	f107 0320 	add.w	r3, r7, #32
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f00b fd7d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b5fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b600:	4618      	mov	r0, r3
 800b602:	f00b fc25 	bl	8016e50 <_ZNSaIcED1Ev>
	neoway.SEND_RECIEVE("AT+FSDF=\"" + file_name + "\"", { 10000 }, 5, { "OK" });
 800b606:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800b60a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b60e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4966      	ldr	r1, [pc, #408]	; (800b7b0 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a8>)
 800b616:	f001 f887 	bl	800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800b61a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b61e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800b622:	4a64      	ldr	r2, [pc, #400]	; (800b7b4 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ac>)
 800b624:	4618      	mov	r0, r3
 800b626:	f001 fcc8 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800b62a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b62e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b632:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b63a:	2301      	movs	r3, #1
 800b63c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b640:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800b644:	4618      	mov	r0, r3
 800b646:	f00b fc01 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b64a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b64e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800b652:	4955      	ldr	r1, [pc, #340]	; (800b7a8 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a0>)
 800b654:	4618      	mov	r0, r3
 800b656:	f00c f8b5 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b65a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800b65e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b662:	2301      	movs	r3, #1
 800b664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b668:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800b66c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800b670:	ad02      	add	r5, sp, #8
 800b672:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b67a:	e885 0003 	stmia.w	r5, {r0, r1}
 800b67e:	2305      	movs	r3, #5
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b68c:	4947      	ldr	r1, [pc, #284]	; (800b7ac <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a4>)
 800b68e:	4620      	mov	r0, r4
 800b690:	f7f8 fbc2 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800b694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b698:	4618      	mov	r0, r3
 800b69a:	f00b fd2c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b69e:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800b6a2:	3418      	adds	r4, #24
 800b6a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	d004      	beq.n	800b6b6 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ae>
 800b6ac:	3c18      	subs	r4, #24
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f00b fd21 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b6b4:	e7f6      	b.n	800b6a4 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19c>
 800b6b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f00b fbc8 	bl	8016e50 <_ZNSaIcED1Ev>
 800b6c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f00b fd16 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b6ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f00b fd11 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	neoway.SEND_RECIEVE("AT+FSLIST?", { 10000 }, 5, { "OK" });
 800b6d4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f00b fbb7 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b6de:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800b6e2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800b6e6:	492f      	ldr	r1, [pc, #188]	; (800b7a4 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29c>)
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f00c f86b 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b6ee:	f242 7310 	movw	r3, #10000	; 0x2710
 800b6f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b6f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b6fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b6fe:	2301      	movs	r3, #1
 800b700:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b704:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b708:	4618      	mov	r0, r3
 800b70a:	f00b fb9f 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b70e:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800b712:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b716:	4924      	ldr	r1, [pc, #144]	; (800b7a8 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a0>)
 800b718:	4618      	mov	r0, r3
 800b71a:	f00c f853 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b71e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b726:	2301      	movs	r3, #1
 800b728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b72c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 800b730:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800b734:	ad02      	add	r5, sp, #8
 800b736:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b73a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b73e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b742:	2305      	movs	r3, #5
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b750:	4916      	ldr	r1, [pc, #88]	; (800b7ac <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a4>)
 800b752:	4620      	mov	r0, r4
 800b754:	f7f8 fb60 	bl	8003e18 <_ZN6NEOWAY12SEND_RECIEVEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt16initializer_listImEtS6_IS5_E>
 800b758:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b75c:	4618      	mov	r0, r3
 800b75e:	f00b fcca 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b762:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800b766:	3418      	adds	r4, #24
 800b768:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b76c:	429c      	cmp	r4, r3
 800b76e:	d004      	beq.n	800b77a <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x272>
 800b770:	3c18      	subs	r4, #24
 800b772:	4620      	mov	r0, r4
 800b774:	f00b fcbf 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b778:	e7f6      	b.n	800b768 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
 800b77a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b77e:	4618      	mov	r0, r3
 800b780:	f00b fb66 	bl	8016e50 <_ZNSaIcED1Ev>
 800b784:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800b788:	4618      	mov	r0, r3
 800b78a:	f00b fcb4 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b78e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b792:	4618      	mov	r0, r3
 800b794:	f00b fb5c 	bl	8016e50 <_ZNSaIcED1Ev>
}
 800b798:	bf00      	nop
 800b79a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	080186e4 	.word	0x080186e4
 800b7a8:	08017ecc 	.word	0x08017ecc
 800b7ac:	200001a0 	.word	0x200001a0
 800b7b0:	0801878c 	.word	0x0801878c
 800b7b4:	08017ec8 	.word	0x08017ec8

0800b7b8 <_Z15update_ota_contv>:
#if defined(APP_CODE) or defined(RTK) or defined(OTA_CODE)
/**
 * @brief Used to sync ota_cont to neo_cont to stop ota function if neoway malfunctions
 */

void update_ota_cont() {
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
	if (neo_control == $BREAK) {
 800b7bc:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <_Z15update_ota_contv+0x28>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bf0c      	ite	eq
 800b7c6:	2301      	moveq	r3, #1
 800b7c8:	2300      	movne	r3, #0
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <_Z15update_ota_contv+0x1e>
		ota_cont = $BREAK;
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <_Z15update_ota_contv+0x2c>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	20000000 	.word	0x20000000
 800b7e4:	20000001 	.word	0x20000001

0800b7e8 <_Z12OTA_FUNCTIONv>:
 * Downloads the file to neoway
 * Erases the existing code from memory
 * Reports to ota_proc() to copy it to memory
 * Updates on cloud if OTA is done correctly
 */
void OTA_FUNCTION() {
 800b7e8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ea:	b0fa      	sub	sp, #488	; 0x1e8
 800b7ec:	af02      	add	r7, sp, #8
//#define OTA_ASK
	if (both_debug.Both_read_check("Enter 0 to skip ota", 15, "0") != $EXPECTED_RESPONSE) {
 800b7ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f00b fb2a 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b7f8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800b7fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b800:	49c0      	ldr	r1, [pc, #768]	; (800bb04 <_Z12OTA_FUNCTIONv+0x31c>)
 800b802:	4618      	mov	r0, r3
 800b804:	f00b ffde 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b808:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f00b fb1d 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b812:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b816:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b81a:	49bb      	ldr	r1, [pc, #748]	; (800bb08 <_Z12OTA_FUNCTIONv+0x320>)
 800b81c:	4618      	mov	r0, r3
 800b81e:	f00b ffd1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b822:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b826:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800b82a:	2200      	movs	r2, #0
 800b82c:	9200      	str	r2, [sp, #0]
 800b82e:	220f      	movs	r2, #15
 800b830:	48b6      	ldr	r0, [pc, #728]	; (800bb0c <_Z12OTA_FUNCTIONv+0x324>)
 800b832:	f7fb f811 	bl	8006858 <_ZN10UART_DEBUG15Both_read_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS5_PS5_>
 800b836:	4603      	mov	r3, r0
 800b838:	2b02      	cmp	r3, #2
 800b83a:	bf14      	ite	ne
 800b83c:	2301      	movne	r3, #1
 800b83e:	2300      	moveq	r3, #0
 800b840:	b2dc      	uxtb	r4, r3
 800b842:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b846:	4618      	mov	r0, r3
 800b848:	f00b fc55 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b84c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800b850:	4618      	mov	r0, r3
 800b852:	f00b fafd 	bl	8016e50 <_ZNSaIcED1Ev>
 800b856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b85a:	4618      	mov	r0, r3
 800b85c:	f00b fc4b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b860:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b864:	4618      	mov	r0, r3
 800b866:	f00b faf3 	bl	8016e50 <_ZNSaIcED1Ev>
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	f000 8243 	beq.w	800bcf6 <_Z12OTA_FUNCTIONv+0x50e>
#if defined(OTA_ASK)
		if (both_debug.Both_read_check("Perform OTA NEW - Enter \"0\" to cont", 10, "0") == $EXPECTED_RESPONSE) {
#endif
		if (check_cont_flags()) {
 800b870:	f7ff fb9c 	bl	800afac <_Z16check_cont_flagsv>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 823d 	beq.w	800bcf6 <_Z12OTA_FUNCTIONv+0x50e>
			https_setup();
 800b87c:	f7fd ff5e 	bl	800973c <_Z11https_setupv>
			update_ota_cont();
 800b880:	f7ff ff9a 	bl	800b7b8 <_Z15update_ota_contv>

			string ota_link, meta_link;
 800b884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b888:	4618      	mov	r0, r3
 800b88a:	f00b fc03 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800b88e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b892:	4618      	mov	r0, r3
 800b894:	f00b fbfe 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

			GET_LINKS(ota_link, meta_link);
 800b898:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b89c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fc fb72 	bl	8007f8c <_Z9GET_LINKSRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
			/**
			 *	both_debug.Print2("\r\nLINK OTA - " + ota_link);
			 *	both_debug.Print2("\r\nLINK META - " + meta_link);
			 */

			bool ota_bool = (ota_link.find("NO") == 0XFFFFFFFF) && (!ota_link.empty());  //if not found - true
 800b8a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4998      	ldr	r1, [pc, #608]	; (800bb10 <_Z12OTA_FUNCTIONv+0x328>)
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f00b feb1 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8bc:	d10c      	bne.n	800b8d8 <_Z12OTA_FUNCTIONv+0xf0>
 800b8be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f00b fc84 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f083 0301 	eor.w	r3, r3, #1
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <_Z12OTA_FUNCTIONv+0xf0>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e000      	b.n	800b8da <_Z12OTA_FUNCTIONv+0xf2>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
			bool meta_bool = (meta_link.find("NO") == 0XFFFFFFFF) && (!meta_link.empty());  //if not found - true
 800b8de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	498a      	ldr	r1, [pc, #552]	; (800bb10 <_Z12OTA_FUNCTIONv+0x328>)
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f00b fe96 	bl	8017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f2:	d10c      	bne.n	800b90e <_Z12OTA_FUNCTIONv+0x126>
 800b8f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f00b fc69 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f083 0301 	eor.w	r3, r3, #1
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <_Z12OTA_FUNCTIONv+0x126>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <_Z12OTA_FUNCTIONv+0x128>
 800b90e:	2300      	movs	r3, #0
 800b910:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de

			ota_break(!ota_bool && !meta_bool, "No link");  //if found cancel ota
 800b914:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b918:	f083 0301 	eor.w	r3, r3, #1
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d008      	beq.n	800b934 <_Z12OTA_FUNCTIONv+0x14c>
 800b922:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800b926:	f083 0301 	eor.w	r3, r3, #1
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <_Z12OTA_FUNCTIONv+0x14c>
 800b930:	2401      	movs	r4, #1
 800b932:	e000      	b.n	800b936 <_Z12OTA_FUNCTIONv+0x14e>
 800b934:	2400      	movs	r4, #0
 800b936:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b93a:	4618      	mov	r0, r3
 800b93c:	f00b fa86 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b940:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800b944:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b948:	4972      	ldr	r1, [pc, #456]	; (800bb14 <_Z12OTA_FUNCTIONv+0x32c>)
 800b94a:	4618      	mov	r0, r3
 800b94c:	f00b ff3a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b950:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b954:	4619      	mov	r1, r3
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff fb44 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b95c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b960:	4618      	mov	r0, r3
 800b962:	f00b fbc8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b966:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b96a:	4618      	mov	r0, r3
 800b96c:	f00b fa70 	bl	8016e50 <_ZNSaIcED1Ev>

			if (check_cont_flags()) {
 800b970:	f7ff fb1c 	bl	800afac <_Z16check_cont_flagsv>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 8196 	beq.w	800bca8 <_Z12OTA_FUNCTIONv+0x4c0>
				string meta_json_link = "56wdo5bf42tt4luxym2rcvvy5e0vrpaq.lambda-url.us-west-2.on.aws/?ws=" + d_t_s(WS.GET_VAR_VALUE_CONN(), 0);
 800b97c:	4866      	ldr	r0, [pc, #408]	; (800bb18 <_Z12OTA_FUNCTIONv+0x330>)
 800b97e:	f7f7 ff53 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800b982:	eeb0 7a40 	vmov.f32	s14, s0
 800b986:	eef0 7a60 	vmov.f32	s15, s1
 800b98a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b98e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b992:	2200      	movs	r2, #0
 800b994:	2100      	movs	r1, #0
 800b996:	eeb0 0a47 	vmov.f32	s0, s14
 800b99a:	eef0 0a67 	vmov.f32	s1, s15
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f5 fdc2 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800b9a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b9a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800b9ac:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800b9b0:	495a      	ldr	r1, [pc, #360]	; (800bb1c <_Z12OTA_FUNCTIONv+0x334>)
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ffba 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800b9b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f00b fb9a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				uint32_t start_length = meta_json_link.size();
 800b9c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f00b fbd2 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b9cc:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
#if defined(OTA_ASK)
					if (both_debug.Both_read_check("\r\nDownload New File? - Enter \"0\" to cont", 10, "0") == $EXPECTED_RESPONSE) {
#endif
				if (meta_bool) {
 800b9d0:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d063      	beq.n	800baa0 <_Z12OTA_FUNCTIONv+0x2b8>
					both_debug.Print2("\r\nDownloading Meta Data");
 800b9d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f00b fa35 	bl	8016e4c <_ZNSaIcEC1Ev>
 800b9e2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b9e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800b9ea:	494d      	ldr	r1, [pc, #308]	; (800bb20 <_Z12OTA_FUNCTIONv+0x338>)
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f00b fee9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b9f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4844      	ldr	r0, [pc, #272]	; (800bb0c <_Z12OTA_FUNCTIONv+0x324>)
 800b9fa:	f7fa fcb1 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b9fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ba02:	4618      	mov	r0, r3
 800ba04:	f00b fb77 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ba08:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f00b fa1f 	bl	8016e50 <_ZNSaIcED1Ev>
					string meta_json = https_req(meta_link, 0);
 800ba12:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ba16:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f00b fe9d 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ba22:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ba26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ba2a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800ba2e:	2200      	movs	r2, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe f85d 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ba36:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f00b fb5b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					if (!meta_json.empty()) {
 800ba40:	f107 031c 	add.w	r3, r7, #28
 800ba44:	4618      	mov	r0, r3
 800ba46:	f00b fbc3 	bl	80171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f083 0301 	eor.w	r3, r3, #1
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01f      	beq.n	800ba96 <_Z12OTA_FUNCTIONv+0x2ae>
						if (JSON_EXTRACTER(&meta_json, &data_packet.meta_data_json) == $CONTINUE) {
 800ba56:	f107 031c 	add.w	r3, r7, #28
 800ba5a:	4932      	ldr	r1, [pc, #200]	; (800bb24 <_Z12OTA_FUNCTIONv+0x33c>)
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fd fa6d 	bl	8008f3c <_Z14JSON_EXTRACTERPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	bf0c      	ite	eq
 800ba68:	2301      	moveq	r3, #1
 800ba6a:	2300      	movne	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <_Z12OTA_FUNCTIONv+0x294>
							UPDATE_CONFIG(data_packet.meta_data_json);
 800ba72:	482c      	ldr	r0, [pc, #176]	; (800bb24 <_Z12OTA_FUNCTIONv+0x33c>)
 800ba74:	f7fc f820 	bl	8007ab8 <_Z13UPDATE_CONFIGRKN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEE>
							save_meta_neoway();
 800ba78:	f7fb fffe 	bl	8007a78 <_Z16save_meta_neowayv>
						}
						if (check_cont_flags()) {
 800ba7c:	f7ff fa96 	bl	800afac <_Z16check_cont_flagsv>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <_Z12OTA_FUNCTIONv+0x2aa>
							meta_json_link += "&rm=1";
 800ba86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba8a:	4927      	ldr	r1, [pc, #156]	; (800bb28 <_Z12OTA_FUNCTIONv+0x340>)
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f00b fd83 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
						}
						config_file();
 800ba92:	f7fc f9ab 	bl	8007dec <_Z11config_filev>
					}
				}
 800ba96:	f107 031c 	add.w	r3, r7, #28
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f00b fb2b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if (ota_bool) {
 800baa0:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d021      	beq.n	800baec <_Z12OTA_FUNCTIONv+0x304>
					both_debug.Print2("\r\nDownloading OTA Bin File");
 800baa8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800baac:	4618      	mov	r0, r3
 800baae:	f00b f9cd 	bl	8016e4c <_ZNSaIcEC1Ev>
 800bab2:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800bab6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800baba:	491c      	ldr	r1, [pc, #112]	; (800bb2c <_Z12OTA_FUNCTIONv+0x344>)
 800babc:	4618      	mov	r0, r3
 800babe:	f00b fe81 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bac2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800bac6:	4619      	mov	r1, r3
 800bac8:	4810      	ldr	r0, [pc, #64]	; (800bb0c <_Z12OTA_FUNCTIONv+0x324>)
 800baca:	f7fa fc49 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bace:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800bad2:	4618      	mov	r0, r3
 800bad4:	f00b fb0f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bad8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800badc:	4618      	mov	r0, r3
 800bade:	f00b f9b7 	bl	8016e50 <_ZNSaIcED1Ev>
					https_file_download(ota_link);
 800bae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff f8c0 	bl	800ac6c <_Z19https_file_downloadRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
				}
#if defined(OTA_ASK)
					}
#endif
				if (check_cont_flags() && ota_bool) {
 800baec:	f7ff fa5e 	bl	800afac <_Z16check_cont_flagsv>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d01c      	beq.n	800bb30 <_Z12OTA_FUNCTIONv+0x348>
 800baf6:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d018      	beq.n	800bb30 <_Z12OTA_FUNCTIONv+0x348>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e017      	b.n	800bb32 <_Z12OTA_FUNCTIONv+0x34a>
 800bb02:	bf00      	nop
 800bb04:	08018798 	.word	0x08018798
 800bb08:	08017dd4 	.word	0x08017dd4
 800bb0c:	200002dc 	.word	0x200002dc
 800bb10:	080187ac 	.word	0x080187ac
 800bb14:	080187b0 	.word	0x080187b0
 800bb18:	20000310 	.word	0x20000310
 800bb1c:	080181d8 	.word	0x080181d8
 800bb20:	080187b8 	.word	0x080187b8
 800bb24:	200008f0 	.word	0x200008f0
 800bb28:	080187d0 	.word	0x080187d0
 800bb2c:	080187d8 	.word	0x080187d8
 800bb30:	2300      	movs	r3, #0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8089 	beq.w	800bc4a <_Z12OTA_FUNCTIONv+0x462>
					string file_name = "";
 800bb38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f00b f985 	bl	8016e4c <_ZNSaIcEC1Ev>
 800bb42:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800bb46:	1d3b      	adds	r3, r7, #4
 800bb48:	496d      	ldr	r1, [pc, #436]	; (800bd00 <_Z12OTA_FUNCTIONv+0x518>)
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f00b fe3a 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb54:	4618      	mov	r0, r3
 800bb56:	f00b f97b 	bl	8016e50 <_ZNSaIcED1Ev>
					get_file_name(ota_link, file_name);
 800bb5a:	1d3a      	adds	r2, r7, #4
 800bb5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bb60:	4611      	mov	r1, r2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff f834 	bl	800abd0 <_Z13get_file_nameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_>
					uint32_t file_size = get_file_size(file_name);
 800bb68:	1d3b      	adds	r3, r7, #4
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff f8d4 	bl	800ad18 <_Z13get_file_sizeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bb70:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
					both_debug.Print2("\r\nFile size out = " + d_t_s(file_size));
 800bb74:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800bb78:	f7f4 fcc4 	bl	8000504 <__aeabi_ui2d>
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bb84:	2200      	movs	r2, #0
 800bb86:	2100      	movs	r1, #0
 800bb88:	ec45 4b10 	vmov	d0, r4, r5
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7f5 fccb 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800bb92:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bb96:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800bb9a:	495a      	ldr	r1, [pc, #360]	; (800bd04 <_Z12OTA_FUNCTIONv+0x51c>)
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 fec5 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800bba2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bba6:	4619      	mov	r1, r3
 800bba8:	4857      	ldr	r0, [pc, #348]	; (800bd08 <_Z12OTA_FUNCTIONv+0x520>)
 800bbaa:	f7fa fbd9 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bbae:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f00b fa9f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bbb8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f00b fa9a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					if (check_cont_flags()) {
 800bbc2:	f7ff f9f3 	bl	800afac <_Z16check_cont_flagsv>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d03a      	beq.n	800bc42 <_Z12OTA_FUNCTIONv+0x45a>
						FLASH_ERASE2(62, 65);  // (start from, no of pages)
 800bbcc:	2141      	movs	r1, #65	; 0x41
 800bbce:	203e      	movs	r0, #62	; 0x3e
 800bbd0:	f000 f90a 	bl	800bde8 <_Z12FLASH_ERASE2mm>
						if (check_cont_flags()) {
 800bbd4:	f7ff f9ea 	bl	800afac <_Z16check_cont_flagsv>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d031      	beq.n	800bc42 <_Z12OTA_FUNCTIONv+0x45a>
							ota_proc(file_name, file_size);
 800bbde:	1d3b      	adds	r3, r7, #4
 800bbe0:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff fa25 	bl	800b034 <_Z8ota_procRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
#if defined(OTA_ASK)
								if (both_debug.Both_read_check("\r\nDelete File? - Enter \"0\" to cont", 10, "0") == $EXPECTED_RESPONSE) {
#endif
							neoway_delete_file(file_name);
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fc8b 	bl	800b508 <_Z18neoway_delete_fileRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
							if (check_cont_flags()) {
 800bbf2:	f7ff f9db 	bl	800afac <_Z16check_cont_flagsv>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <_Z12OTA_FUNCTIONv+0x420>
								meta_json_link += "&ro=1";
 800bbfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bc00:	4942      	ldr	r1, [pc, #264]	; (800bd0c <_Z12OTA_FUNCTIONv+0x524>)
 800bc02:	4618      	mov	r0, r3
 800bc04:	f00b fcc8 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
							}
#if defined(OTA_ASK)
								}
#endif
							both_debug.Print2("\r\nOTA DONE");
 800bc08:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f00b f91d 	bl	8016e4c <_ZNSaIcEC1Ev>
 800bc12:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800bc16:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800bc1a:	493d      	ldr	r1, [pc, #244]	; (800bd10 <_Z12OTA_FUNCTIONv+0x528>)
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f00b fdd1 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bc22:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800bc26:	4619      	mov	r1, r3
 800bc28:	4837      	ldr	r0, [pc, #220]	; (800bd08 <_Z12OTA_FUNCTIONv+0x520>)
 800bc2a:	f7fa fb99 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bc2e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800bc32:	4618      	mov	r0, r3
 800bc34:	f00b fa5f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bc38:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f00b f907 	bl	8016e50 <_ZNSaIcED1Ev>
						}
					}
				}
 800bc42:	1d3b      	adds	r3, r7, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f00b fa56 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if (meta_json_link.size() > start_length) {
 800bc4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f00b fa8e 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800bc54:	4602      	mov	r2, r0
 800bc56:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	bf34      	ite	cc
 800bc5e:	2301      	movcc	r3, #1
 800bc60:	2300      	movcs	r3, #0
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d019      	beq.n	800bc9c <_Z12OTA_FUNCTIONv+0x4b4>
					https_req(meta_json_link, 0);
 800bc68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bc6c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f00b fd72 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800bc78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800bc7c:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800bc80:	2200      	movs	r2, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd ff34 	bl	8009af0 <_Z9https_reqNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800bc88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f00b fa32 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bc92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800bc96:	4618      	mov	r0, r3
 800bc98:	f00b fa2d 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				}
			} else {
 800bc9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bca0:	4618      	mov	r0, r3
 800bca2:	f00b fa28 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bca6:	e01c      	b.n	800bce2 <_Z12OTA_FUNCTIONv+0x4fa>
				both_debug.Print2("\r\nLink not available");
 800bca8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f00b f8cd 	bl	8016e4c <_ZNSaIcEC1Ev>
 800bcb2:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800bcb6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bcba:	4916      	ldr	r1, [pc, #88]	; (800bd14 <_Z12OTA_FUNCTIONv+0x52c>)
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f00b fd81 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bcc2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	480f      	ldr	r0, [pc, #60]	; (800bd08 <_Z12OTA_FUNCTIONv+0x520>)
 800bcca:	f7fa fb49 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bcce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f00b fa0f 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bcd8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f00b f8b7 	bl	8016e50 <_ZNSaIcED1Ev>
			}
		}
 800bce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bce6:	4618      	mov	r0, r3
 800bce8:	f00b fa05 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bcec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f00b fa00 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
#if defined(OTA_ASK)
	}
#endif
}
 800bcf6:	bf00      	nop
 800bcf8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bdb0      	pop	{r4, r5, r7, pc}
 800bd00:	08017e00 	.word	0x08017e00
 800bd04:	080187f4 	.word	0x080187f4
 800bd08:	200002dc 	.word	0x200002dc
 800bd0c:	08018808 	.word	0x08018808
 800bd10:	08018810 	.word	0x08018810
 800bd14:	0801881c 	.word	0x0801881c

0800bd18 <_Z11if_in_rangeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>:
 * @brief check if index is in range of string  length
 * @param data string to be converted
 * @param index start from index of string
 * @retval uint8_t
 */
uint8_t if_in_range(string &data, uint32_t index) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	if (index < data.size()) {
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f00b fa24 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	bf34      	ite	cc
 800bd30:	2301      	movcc	r3, #1
 800bd32:	2300      	movcs	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d006      	beq.n	800bd48 <_Z11if_in_rangeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x30>
		return data[index];
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f00b fa4f 	bl	80171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800bd42:	4603      	mov	r3, r0
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	e000      	b.n	800bd4a <_Z11if_in_rangeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x32>
	} else
		return 0;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <_Z9str_to_64RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>:
 * @brief convert 8 string char to 64 bit uint
 * @param data string to be converted
 * @param index start from index of string
 * @retval uint64_t
 */
uint64_t str_to_64(string &data, uint32_t index) {
 800bd52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd56:	b089      	sub	sp, #36	; 0x24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
	uint64_t ret2 = 0;
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (volatile uint32_t var = 0; var < 8; var++) {
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	e02a      	b.n	800bdc6 <_Z9str_to_64RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x74>
		uint64_t byte = if_in_range(data, index + var);
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff ffcd 	bl	800bd18 <_Z11if_in_rangeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2200      	movs	r2, #0
 800bd84:	469a      	mov	sl, r3
 800bd86:	4693      	mov	fp, r2
 800bd88:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		ret2 = ret2 + (byte << (8 * var));
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	00d9      	lsls	r1, r3, #3
 800bd90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd94:	f1a1 0620 	sub.w	r6, r1, #32
 800bd98:	f1c1 0020 	rsb	r0, r1, #32
 800bd9c:	fa03 f501 	lsl.w	r5, r3, r1
 800bda0:	fa02 f606 	lsl.w	r6, r2, r6
 800bda4:	4335      	orrs	r5, r6
 800bda6:	fa22 f000 	lsr.w	r0, r2, r0
 800bdaa:	4305      	orrs	r5, r0
 800bdac:	fa02 f401 	lsl.w	r4, r2, r1
 800bdb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bdb4:	eb12 0804 	adds.w	r8, r2, r4
 800bdb8:	eb43 0905 	adc.w	r9, r3, r5
 800bdbc:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (volatile uint32_t var = 0; var < 8; var++) {
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b07      	cmp	r3, #7
 800bdca:	bf94      	ite	ls
 800bdcc:	2301      	movls	r3, #1
 800bdce:	2300      	movhi	r3, #0
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1cc      	bne.n	800bd70 <_Z9str_to_64RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x1e>
	}
	return ret2;
 800bdd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800bdda:	4610      	mov	r0, r2
 800bddc:	4619      	mov	r1, r3
 800bdde:	3724      	adds	r7, #36	; 0x24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bde8 <_Z12FLASH_ERASE2mm>:
 * @details
 * No need to erase every time. Erase only the first time.
 * @param[in] uint32_t
 * @param[in] uint32_t
 */
void FLASH_ERASE2(uint32_t Page_tmp, uint32_t NbPages_tmp) {
 800bde8:	b590      	push	{r4, r7, lr}
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]

	both_debug.Print2("Erasing the Flash memory...\r\n");
 800bdf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f00b f828 	bl	8016e4c <_ZNSaIcEC1Ev>
 800bdfc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800be00:	f107 031c 	add.w	r3, r7, #28
 800be04:	4938      	ldr	r1, [pc, #224]	; (800bee8 <_Z12FLASH_ERASE2mm+0x100>)
 800be06:	4618      	mov	r0, r3
 800be08:	f00b fcdc 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800be0c:	f107 031c 	add.w	r3, r7, #28
 800be10:	4619      	mov	r1, r3
 800be12:	4836      	ldr	r0, [pc, #216]	; (800beec <_Z12FLASH_ERASE2mm+0x104>)
 800be14:	f7fa faa4 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800be18:	f107 031c 	add.w	r3, r7, #28
 800be1c:	4618      	mov	r0, r3
 800be1e:	f00b f96a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800be22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be26:	4618      	mov	r0, r3
 800be28:	f00b f812 	bl	8016e50 <_ZNSaIcED1Ev>
//Erase the Flash
	refresh_counter();
 800be2c:	f7f7 fc66 	bl	80036fc <_Z15refresh_counterv>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Page = Page_tmp;  // 0x3E;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages = NbPages_tmp;  // 65; //erase 65 sectors(62->127)
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks = FLASH_BANK_1;
 800be40:	2301      	movs	r3, #1
 800be42:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 800be44:	f007 fe70 	bl	8013b28 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800be48:	f107 0208 	add.w	r2, r7, #8
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	4611      	mov	r1, r2
 800be52:	4618      	mov	r0, r3
 800be54:	f007 ff4e 	bl	8013cf4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800be58:	f007 fe88 	bl	8013b6c <HAL_FLASH_Lock>

//	delay(1000);
	ota_break(SectorError != 0xFFFFFFFF, "Sector error");
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be62:	bf14      	ite	ne
 800be64:	2301      	movne	r3, #1
 800be66:	2300      	moveq	r3, #0
 800be68:	b2dc      	uxtb	r4, r3
 800be6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be6e:	4618      	mov	r0, r3
 800be70:	f00a ffec 	bl	8016e4c <_ZNSaIcEC1Ev>
 800be74:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800be78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be7c:	491c      	ldr	r1, [pc, #112]	; (800bef0 <_Z12FLASH_ERASE2mm+0x108>)
 800be7e:	4618      	mov	r0, r3
 800be80:	f00b fca0 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800be84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be88:	4619      	mov	r1, r3
 800be8a:	4620      	mov	r0, r4
 800be8c:	f7ff f8aa 	bl	800afe4 <_Z9ota_breakbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800be90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be94:	4618      	mov	r0, r3
 800be96:	f00b f92e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800be9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be9e:	4618      	mov	r0, r3
 800bea0:	f00a ffd6 	bl	8016e50 <_ZNSaIcED1Ev>
	both_debug.Print2("Successfully Erased Memory\r\n");
 800bea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bea8:	4618      	mov	r0, r3
 800beaa:	f00a ffcf 	bl	8016e4c <_ZNSaIcEC1Ev>
 800beae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800beb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800beb6:	490f      	ldr	r1, [pc, #60]	; (800bef4 <_Z12FLASH_ERASE2mm+0x10c>)
 800beb8:	4618      	mov	r0, r3
 800beba:	f00b fc83 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bec2:	4619      	mov	r1, r3
 800bec4:	4809      	ldr	r0, [pc, #36]	; (800beec <_Z12FLASH_ERASE2mm+0x104>)
 800bec6:	f7fa fa4b 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800beca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bece:	4618      	mov	r0, r3
 800bed0:	f00b f911 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bed4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bed8:	4618      	mov	r0, r3
 800beda:	f00a ffb9 	bl	8016e50 <_ZNSaIcED1Ev>
}
 800bede:	bf00      	nop
 800bee0:	3774      	adds	r7, #116	; 0x74
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd90      	pop	{r4, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	08018834 	.word	0x08018834
 800beec:	200002dc 	.word	0x200002dc
 800bef0:	08018854 	.word	0x08018854
 800bef4:	08018864 	.word	0x08018864

0800bef8 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
 * @param data data to be written
 * @param data_len data length
 * @is_first_block true - if this is first block, false - not first block
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_flash_app(string &data, bool address_reset) {
 800bef8:	b5b0      	push	{r4, r5, r7, lr}
 800befa:	b0b2      	sub	sp, #200	; 0xc8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
	refresh_counter();
 800bf04:	f7f7 fbfa 	bl	80036fc <_Z15refresh_counterv>
	HAL_StatusTypeDef ret;
	static uint32_t current_addr_offset = 0;
	static bool address_reset_2 = address_reset;
 800bf08:	4b81      	ldr	r3, [pc, #516]	; (800c110 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x218>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f3bf 8f5b 	dmb	ish
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bf0c      	ite	eq
 800bf18:	2301      	moveq	r3, #1
 800bf1a:	2300      	movne	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d010      	beq.n	800bf44 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x4c>
 800bf22:	487b      	ldr	r0, [pc, #492]	; (800c110 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x218>)
 800bf24:	f00a ff81 	bl	8016e2a <__cxa_guard_acquire>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bf14      	ite	ne
 800bf2e:	2301      	movne	r3, #1
 800bf30:	2300      	moveq	r3, #0
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d005      	beq.n	800bf44 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x4c>
 800bf38:	4a76      	ldr	r2, [pc, #472]	; (800c114 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x21c>)
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	7013      	strb	r3, [r2, #0]
 800bf3e:	4874      	ldr	r0, [pc, #464]	; (800c110 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x218>)
 800bf40:	f00a ff7f 	bl	8016e42 <__cxa_guard_release>
	if (address_reset_2 == 1) {
 800bf44:	4b73      	ldr	r3, [pc, #460]	; (800c114 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x21c>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d105      	bne.n	800bf58 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x60>
		current_addr_offset = 0;
 800bf4c:	4b72      	ldr	r3, [pc, #456]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
		address_reset_2 = 0;
 800bf52:	4b70      	ldr	r3, [pc, #448]	; (800c114 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x21c>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
	}
	both_debug.Print2("\r\nCurrent Address : " + d_t_h_s(appadd + current_addr_offset) + "\r\n");
 800bf58:	4b6f      	ldr	r3, [pc, #444]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800bf60:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800bf64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f7f5 fa70 	bl	8001450 <_Z7d_t_h_sB5cxx11m>
 800bf70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bf78:	4968      	ldr	r1, [pc, #416]	; (800c11c <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x224>)
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fcd6 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800bf80:	f107 030c 	add.w	r3, r7, #12
 800bf84:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800bf88:	4a65      	ldr	r2, [pc, #404]	; (800c120 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x228>)
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 f815 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800bf90:	f107 030c 	add.w	r3, r7, #12
 800bf94:	4619      	mov	r1, r3
 800bf96:	4863      	ldr	r0, [pc, #396]	; (800c124 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x22c>)
 800bf98:	f7fa f9e2 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f00b f8a8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bfa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f00b f8a3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bfb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f00b f89e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//	both_debug.Print2("\r\nwriting -->" + data + "<--\r\n");
	do {
		ret = HAL_FLASH_Unlock();
 800bfba:	f007 fdb5 	bl	8013b28 <HAL_FLASH_Unlock>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		if (ret != HAL_OK) {
 800bfc4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d162      	bne.n	800c092 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x19a>
			break;
		}
		for (uint32_t i = 0; i < data.size(); i = i + 8) {
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfd2:	e044      	b.n	800c05e <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x166>
			ret = HAL_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			uint64_t write_data = str_to_64(data, i);
 800bfda:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff feb7 	bl	800bd52 <_Z9str_to_64RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
 800bfe4:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (appadd + current_addr_offset), write_data);
 800bfe8:	4b4b      	ldr	r3, [pc, #300]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800bff0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
 800bff4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800bff8:	2000      	movs	r0, #0
 800bffa:	f007 fd29 	bl	8013a50 <HAL_FLASH_Program>
 800bffe:	4603      	mov	r3, r0
 800c000:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			if (ret == HAL_OK) {
 800c004:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x120>
				//update the data count
				current_addr_offset += 8;
 800c00c:	4b42      	ldr	r3, [pc, #264]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	3308      	adds	r3, #8
 800c012:	4a41      	ldr	r2, [pc, #260]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800c014:	6013      	str	r3, [r2, #0]
 800c016:	e01d      	b.n	800c054 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x15c>
			} else {
				both_debug.Print2("Flash Write Error\r\n");
 800c018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c01c:	4618      	mov	r0, r3
 800c01e:	f00a ff15 	bl	8016e4c <_ZNSaIcEC1Ev>
 800c022:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c02a:	493f      	ldr	r1, [pc, #252]	; (800c128 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x230>)
 800c02c:	4618      	mov	r0, r3
 800c02e:	f00b fbc9 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c036:	4619      	mov	r1, r3
 800c038:	483a      	ldr	r0, [pc, #232]	; (800c124 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x22c>)
 800c03a:	f7fa f991 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c03e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c042:	4618      	mov	r0, r3
 800c044:	f00b f857 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c04c:	4618      	mov	r0, r3
 800c04e:	f00a feff 	bl	8016e50 <_ZNSaIcED1Ev>
				break;
 800c052:	e011      	b.n	800c078 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x180>
		for (uint32_t i = 0; i < data.size(); i = i + 8) {
 800c054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c058:	3308      	adds	r3, #8
 800c05a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f00b f886 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c064:	4602      	mov	r2, r0
 800c066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c06a:	4293      	cmp	r3, r2
 800c06c:	bf34      	ite	cc
 800c06e:	2301      	movcc	r3, #1
 800c070:	2300      	movcs	r3, #0
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1ad      	bne.n	800bfd4 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xdc>
			}
		}

		if (ret != HAL_OK) {
 800c078:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10a      	bne.n	800c096 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x19e>
			break;
		}

		ret = HAL_FLASH_Lock();
 800c080:	f007 fd74 	bl	8013b6c <HAL_FLASH_Lock>
 800c084:	4603      	mov	r3, r0
 800c086:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		if (ret != HAL_OK) {
 800c08a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800c08e:	2b00      	cmp	r3, #0
 800c090:	e002      	b.n	800c098 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1a0>
			break;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1a0>
			break;
 800c096:	bf00      	nop
			break;
		}
	} while (false);
	both_debug.Print2("\r\nWritten Correctly " + d_t_s(current_addr_offset - 8) + " Bytes\r\n");
 800c098:	4b1f      	ldr	r3, [pc, #124]	; (800c118 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x220>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3b08      	subs	r3, #8
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f4 fa30 	bl	8000504 <__aeabi_ui2d>
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	ec45 4b10 	vmov	d0, r4, r5
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f5 fa37 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800c0ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c0be:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800c0c2:	491a      	ldr	r1, [pc, #104]	; (800c12c <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x234>)
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fc31 	bl	800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800c0ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c0ce:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800c0d2:	4a17      	ldr	r2, [pc, #92]	; (800c130 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x238>)
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 ff70 	bl	800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800c0da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4810      	ldr	r0, [pc, #64]	; (800c124 <_ZL23write_data_to_flash_appRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x22c>)
 800c0e2:	f7fa f93d 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c0e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f00b f803 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c0f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f00a fffe 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c0fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c0fe:	4618      	mov	r0, r3
 800c100:	f00a fff9 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return ret;
 800c104:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 800c108:	4618      	mov	r0, r3
 800c10a:	37c8      	adds	r7, #200	; 0xc8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bdb0      	pop	{r4, r5, r7, pc}
 800c110:	20000d60 	.word	0x20000d60
 800c114:	20000d5c 	.word	0x20000d5c
 800c118:	20000d58 	.word	0x20000d58
 800c11c:	08018884 	.word	0x08018884
 800c120:	08017e38 	.word	0x08017e38
 800c124:	200002dc 	.word	0x200002dc
 800c128:	0801889c 	.word	0x0801889c
 800c12c:	080188b0 	.word	0x080188b0
 800c130:	080188c8 	.word	0x080188c8

0800c134 <_Z12ALL_POWER_ONv>:
	V_12.SET(0, 0);
}
/**
 * @brief Power ON all modules in PCB
 */
void ALL_POWER_ON() {
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
	neoway.POWER_ON();
 800c138:	4804      	ldr	r0, [pc, #16]	; (800c14c <_Z12ALL_POWER_ONv+0x18>)
 800c13a:	f7f9 fbc1 	bl	80058c0 <_ZN6NEOWAY8POWER_ONEv>
	V_12.SET(1, 1);
 800c13e:	2201      	movs	r2, #1
 800c140:	2101      	movs	r1, #1
 800c142:	4803      	ldr	r0, [pc, #12]	; (800c150 <_Z12ALL_POWER_ONv+0x1c>)
 800c144:	f7f7 fbb8 	bl	80038b8 <_ZN7PWR_PIN3SETEbm>
}
 800c148:	bf00      	nop
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	200001a0 	.word	0x200001a0
 800c150:	20000d50 	.word	0x20000d50

0800c154 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b095      	sub	sp, #84	; 0x54
 800c158:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c15a:	f006 fbfa 	bl	8012952 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c15e:	f000 f8d3 	bl	800c308 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c162:	f7f4 ffb3 	bl	80010cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800c166:	f006 fab3 	bl	80126d0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800c16a:	f7f4 fec3 	bl	8000ef4 <MX_ADC1_Init>
	MX_LPUART1_UART_Init();
 800c16e:	f006 fa53 	bl	8012618 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 800c172:	f006 fa7d 	bl	8012670 <MX_USART1_UART_Init>
	MX_RTC_Init();
 800c176:	f006 f881 	bl	801227c <MX_RTC_Init>
	MX_IWDG_Init();
 800c17a:	f7f5 f89f 	bl	80012bc <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
 800c17e:	2204      	movs	r2, #4
 800c180:	2105      	movs	r1, #5
 800c182:	4857      	ldr	r0, [pc, #348]	; (800c2e0 <main+0x18c>)
 800c184:	f00a f84e 	bl	8016224 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bf14      	ite	ne
 800c18e:	2301      	movne	r3, #1
 800c190:	2300      	moveq	r3, #0
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <main+0x48>
		Error_Handler();
 800c198:	f000 f918 	bl	800c3cc <Error_Handler>
	}
	object_setup();
 800c19c:	f7fe fd76 	bl	800ac8c <_Z12object_setupv>

#if defined(UL1_ON)
		LED_1.SET(1, 500);
#endif

		ALL_POWER_ON();
 800c1a0:	f7ff ffc8 	bl	800c134 <_Z12ALL_POWER_ONv>
//		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
		neoway.POWER_ON();
 800c1a4:	484f      	ldr	r0, [pc, #316]	; (800c2e4 <main+0x190>)
 800c1a6:	f7f9 fb8b 	bl	80058c0 <_ZN6NEOWAY8POWER_ONEv>

		config_file();
 800c1aa:	f7fb fe1f 	bl	8007dec <_Z11config_filev>

#if defined(BLE_ON)
		neoway.BLE_SETUP(d_t_s(WS.GET_VAR_VALUE_CONN()));
 800c1ae:	484e      	ldr	r0, [pc, #312]	; (800c2e8 <main+0x194>)
 800c1b0:	f7f7 fb3a 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800c1b4:	eeb0 7a40 	vmov.f32	s14, s0
 800c1b8:	eef0 7a60 	vmov.f32	s15, s1
 800c1bc:	463b      	mov	r3, r7
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	eeb0 0a47 	vmov.f32	s0, s14
 800c1c6:	eef0 0a67 	vmov.f32	s1, s15
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f5 f9ac 	bl	8001528 <_Z5d_t_sB5cxx11dib>
 800c1d0:	463b      	mov	r3, r7
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4843      	ldr	r0, [pc, #268]	; (800c2e4 <main+0x190>)
 800c1d6:	f7f8 fe83 	bl	8004ee0 <_ZN6NEOWAY9BLE_SETUPENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c1da:	463b      	mov	r3, r7
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f00a ff8a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
#endif

		if (PRINT.GET_VAR_VALUE_CONN() == 1) {
 800c1e2:	4842      	ldr	r0, [pc, #264]	; (800c2ec <main+0x198>)
 800c1e4:	f7f7 fb20 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800c1e8:	ec51 0b10 	vmov	r0, r1, d0
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	461c      	mov	r4, r3
 800c1f0:	f04f 0200 	mov.w	r2, #0
 800c1f4:	4b3e      	ldr	r3, [pc, #248]	; (800c2f0 <main+0x19c>)
 800c1f6:	f7f4 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <main+0xb0>
 800c200:	2300      	movs	r3, #0
 800c202:	461c      	mov	r4, r3
 800c204:	b2e3      	uxtb	r3, r4
 800c206:	2b00      	cmp	r3, #0
 800c208:	d021      	beq.n	800c24e <main+0xfa>
			set_both_print(1);
 800c20a:	2001      	movs	r0, #1
 800c20c:	f7f7 fba2 	bl	8003954 <_Z14set_both_printb>
			both_debug.Print2("\r\nPRINT ON\r\n");
 800c210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c214:	4618      	mov	r0, r3
 800c216:	f00a fe19 	bl	8016e4c <_ZNSaIcEC1Ev>
 800c21a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c21e:	f107 0318 	add.w	r3, r7, #24
 800c222:	4934      	ldr	r1, [pc, #208]	; (800c2f4 <main+0x1a0>)
 800c224:	4618      	mov	r0, r3
 800c226:	f00b facd 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c22a:	f107 0318 	add.w	r3, r7, #24
 800c22e:	4619      	mov	r1, r3
 800c230:	4831      	ldr	r0, [pc, #196]	; (800c2f8 <main+0x1a4>)
 800c232:	f7fa f895 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c236:	f107 0318 	add.w	r3, r7, #24
 800c23a:	4618      	mov	r0, r3
 800c23c:	f00a ff5b 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c244:	4618      	mov	r0, r3
 800c246:	f00a fe03 	bl	8016e50 <_ZNSaIcED1Ev>
			config_file();
 800c24a:	f7fb fdcf 	bl	8007dec <_Z11config_filev>
		}

		neoway.INIT();
 800c24e:	4825      	ldr	r0, [pc, #148]	; (800c2e4 <main+0x190>)
 800c250:	f7f9 fc8c 	bl	8005b6c <_ZN6NEOWAY4INITEv>
		Get_save_time();
 800c254:	f7fd fff4 	bl	800a240 <_Z13Get_save_timev>

		PassAuthen();
 800c258:	f7fa fea8 	bl	8006fac <_Z10PassAuthenv>

		both_debug.Print2("\r\nIn OTA CODE  " __TIME__ " - " __DATE__ "\r\n");
 800c25c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c260:	4618      	mov	r0, r3
 800c262:	f00a fdf3 	bl	8016e4c <_ZNSaIcEC1Ev>
 800c266:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c26a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c26e:	4923      	ldr	r1, [pc, #140]	; (800c2fc <main+0x1a8>)
 800c270:	4618      	mov	r0, r3
 800c272:	f00b faa7 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c27a:	4619      	mov	r1, r3
 800c27c:	481e      	ldr	r0, [pc, #120]	; (800c2f8 <main+0x1a4>)
 800c27e:	f7fa f86f 	bl	8006360 <_ZN10UART_DEBUG6Print2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c286:	4618      	mov	r0, r3
 800c288:	f00a ff35 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c28c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c290:	4618      	mov	r0, r3
 800c292:	f00a fddd 	bl	8016e50 <_ZNSaIcED1Ev>

		MENU_PRINT(is_any_print());
 800c296:	f7f7 fbf3 	bl	8003a80 <_Z12is_any_printv>
 800c29a:	4603      	mov	r3, r0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fa ff55 	bl	800714c <_Z10MENU_PRINTb>
//			uint32_t alarmtim_temp = ALARM_TIME.GET_VAR_VALUE_CONN();
//			RTC_TimeTypeDef alarmtime = { alarmtim_temp / 100, alarmtim_temp % 100 };
//			Set_RTC_ALARM(alarmtime, RTC_ALARM_A);
//		}

		if (WS.GET_VAR_VALUE_CONN() == -1) {
 800c2a2:	4811      	ldr	r0, [pc, #68]	; (800c2e8 <main+0x194>)
 800c2a4:	f7f7 fac0 	bl	8003828 <_ZNK9VARIABLES18GET_VAR_VALUE_CONNEv>
 800c2a8:	ec51 0b10 	vmov	r0, r1, d0
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	461c      	mov	r4, r3
 800c2b0:	f04f 0200 	mov.w	r2, #0
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <main+0x1ac>)
 800c2b6:	f7f4 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <main+0x170>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	461c      	mov	r4, r3
 800c2c4:	b2e3      	uxtb	r3, r4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <main+0x17a>
			NVIC_SystemReset();
 800c2ca:	f7f5 f815 	bl	80012f8 <__NVIC_SystemReset>
		}

//#define TEST

//		STOPPER("Enter \"1\" to go to OTA_FUCNTION", "1");
		check_all_certificates();
 800c2ce:	f7fc fc17 	bl	8008b00 <_Z22check_all_certificatesv>
		OTA_FUNCTION();
 800c2d2:	f7ff fa89 	bl	800b7e8 <_Z12OTA_FUNCTIONv>
//		STOPPER("Enter \"1\" to go to application", "1");
//		GO_TO_SLEEP();
		go2app(appadd);
 800c2d6:	480b      	ldr	r0, [pc, #44]	; (800c304 <main+0x1b0>)
 800c2d8:	f7fa fde6 	bl	8006ea8 <_Z6go2appm>
//		STOPPER("Enter \"1\" to Exit", "1");
		NVIC_SystemReset();
 800c2dc:	f7f5 f80c 	bl	80012f8 <__NVIC_SystemReset>
 800c2e0:	20000d64 	.word	0x20000d64
 800c2e4:	200001a0 	.word	0x200001a0
 800c2e8:	20000310 	.word	0x20000310
 800c2ec:	200003d0 	.word	0x200003d0
 800c2f0:	3ff00000 	.word	0x3ff00000
 800c2f4:	08018954 	.word	0x08018954
 800c2f8:	200002dc 	.word	0x200002dc
 800c2fc:	08018964 	.word	0x08018964
 800c300:	bff00000 	.word	0xbff00000
 800c304:	0801f000 	.word	0x0801f000

0800c308 <_Z18SystemClock_Configv>:

/*
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b096      	sub	sp, #88	; 0x58
 800c30c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c30e:	f107 0314 	add.w	r3, r7, #20
 800c312:	2244      	movs	r2, #68	; 0x44
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f00b fc62 	bl	8017be0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c31c:	463b      	mov	r3, r7
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	605a      	str	r2, [r3, #4]
 800c324:	609a      	str	r2, [r3, #8]
 800c326:	60da      	str	r2, [r3, #12]
 800c328:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800c32a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c32e:	f008 f849 	bl	80143c4 <HAL_PWREx_ControlVoltageScaling>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	bf14      	ite	ne
 800c338:	2301      	movne	r3, #1
 800c33a:	2300      	moveq	r3, #0
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <_Z18SystemClock_Configv+0x3e>
		Error_Handler();
 800c342:	f000 f843 	bl	800c3cc <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800c346:	f008 f80f 	bl	8014368 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800c34a:	4b1f      	ldr	r3, [pc, #124]	; (800c3c8 <_Z18SystemClock_Configv+0xc0>)
 800c34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c350:	4a1d      	ldr	r2, [pc, #116]	; (800c3c8 <_Z18SystemClock_Configv+0xc0>)
 800c352:	f023 0318 	bic.w	r3, r3, #24
 800c356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800c35a:	2306      	movs	r3, #6
 800c35c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c35e:	2301      	movs	r3, #1
 800c360:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c362:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c366:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c368:	2310      	movs	r3, #16
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c36c:	2300      	movs	r3, #0
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c370:	f107 0314 	add.w	r3, r7, #20
 800c374:	4618      	mov	r0, r3
 800c376:	f008 f87b 	bl	8014470 <HAL_RCC_OscConfig>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	bf14      	ite	ne
 800c380:	2301      	movne	r3, #1
 800c382:	2300      	moveq	r3, #0
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <_Z18SystemClock_Configv+0x86>
		Error_Handler();
 800c38a:	f000 f81f 	bl	800c3cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c38e:	230f      	movs	r3, #15
 800c390:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c392:	2301      	movs	r3, #1
 800c394:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c396:	2300      	movs	r3, #0
 800c398:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800c3a2:	463b      	mov	r3, r7
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f008 fc76 	bl	8014c98 <HAL_RCC_ClockConfig>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bf14      	ite	ne
 800c3b2:	2301      	movne	r3, #1
 800c3b4:	2300      	moveq	r3, #0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <_Z18SystemClock_Configv+0xb8>
		Error_Handler();
 800c3bc:	f000 f806 	bl	800c3cc <Error_Handler>
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	3758      	adds	r7, #88	; 0x58
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	40021000 	.word	0x40021000

0800c3cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c3d0:	b672      	cpsid	i
}
 800c3d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800c3d4:	e7fe      	b.n	800c3d4 <Error_Handler+0x8>

0800c3d6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 800c3d6:	b480      	push	{r7}
 800c3d8:	b087      	sub	sp, #28
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	fb03 f303 	mul.w	r3, r3, r3
 800c3ea:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	fb02 f303 	mul.w	r3, r2, r3
 800c3fe:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	429a      	cmp	r2, r3
 800c406:	d201      	bcs.n	800c40c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	e01d      	b.n	800c448 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	429a      	cmp	r2, r3
 800c412:	d202      	bcs.n	800c41a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	3301      	adds	r3, #1
 800c418:	e016      	b.n	800c448 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d202      	bcs.n	800c428 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	3302      	adds	r3, #2
 800c426:	e00f      	b.n	800c448 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d202      	bcs.n	800c436 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	3303      	adds	r3, #3
 800c434:	e008      	b.n	800c448 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43e:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	3304      	adds	r3, #4
 800c444:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 800c446:	e7db      	b.n	800c400 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 800c448:	4618      	mov	r0, r3
 800c44a:	371c      	adds	r7, #28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 800c454:	b480      	push	{r7}
 800c456:	b089      	sub	sp, #36	; 0x24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	3b01      	subs	r3, #1
 800c464:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800c466:	e024      	b.n	800c4b2 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	4b23      	ldr	r3, [pc, #140]	; (800c4f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800c46c:	fba3 1302 	umull	r1, r3, r3, r2
 800c470:	095b      	lsrs	r3, r3, #5
 800c472:	2164      	movs	r1, #100	; 0x64
 800c474:	fb01 f303 	mul.w	r3, r1, r3
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a1d      	ldr	r2, [pc, #116]	; (800c4f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	095b      	lsrs	r3, r3, #5
 800c488:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	440b      	add	r3, r1
 800c494:	4919      	ldr	r1, [pc, #100]	; (800c4fc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c496:	5c8a      	ldrb	r2, [r1, r2]
 800c498:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	4916      	ldr	r1, [pc, #88]	; (800c4fc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	440a      	add	r2, r1
 800c4a8:	7812      	ldrb	r2, [r2, #0]
 800c4aa:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	3b02      	subs	r3, #2
 800c4b0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b63      	cmp	r3, #99	; 0x63
 800c4b6:	d8d7      	bhi.n	800c468 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b09      	cmp	r3, #9
 800c4bc:	d910      	bls.n	800c4e0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	490b      	ldr	r1, [pc, #44]	; (800c4fc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c4ce:	5c8a      	ldrb	r2, [r1, r2]
 800c4d0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800c4d2:	4a0a      	ldr	r2, [pc, #40]	; (800c4fc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	781a      	ldrb	r2, [r3, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 800c4de:	e005      	b.n	800c4ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	3330      	adds	r3, #48	; 0x30
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	701a      	strb	r2, [r3, #0]
    }
 800c4ec:	bf00      	nop
 800c4ee:	3724      	adds	r7, #36	; 0x24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	51eb851f 	.word	0x51eb851f
 800c4fc:	08018a20 	.word	0x08018a20

0800c500 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 800c500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c504:	b08c      	sub	sp, #48	; 0x30
 800c506:	af00      	add	r7, sp, #0
 800c508:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800c50c:	617a      	str	r2, [r7, #20]
      unsigned __n = 1;
 800c50e:	2301      	movs	r3, #1
 800c510:	62fb      	str	r3, [r7, #44]	; 0x2c
      const unsigned __b2 = __base  * __base;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	fb03 f303 	mul.w	r3, r3, r3
 800c518:	62bb      	str	r3, [r7, #40]	; 0x28
      const unsigned __b3 = __b2 * __base;
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	fb02 f303 	mul.w	r3, r2, r3
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
      const unsigned long __b4 = __b3 * __base;
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	fb02 f303 	mul.w	r3, r2, r3
 800c52c:	623b      	str	r3, [r7, #32]
	  if (__value < (unsigned)__base) return __n;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2200      	movs	r2, #0
 800c532:	461c      	mov	r4, r3
 800c534:	4615      	mov	r5, r2
 800c536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c53a:	42a2      	cmp	r2, r4
 800c53c:	41ab      	sbcs	r3, r5
 800c53e:	d201      	bcs.n	800c544 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	e039      	b.n	800c5b8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b2) return __n + 1;
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	2200      	movs	r2, #0
 800c548:	4698      	mov	r8, r3
 800c54a:	4691      	mov	r9, r2
 800c54c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c550:	4542      	cmp	r2, r8
 800c552:	eb73 0309 	sbcs.w	r3, r3, r9
 800c556:	d202      	bcs.n	800c55e <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x5e>
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	3301      	adds	r3, #1
 800c55c:	e02c      	b.n	800c5b8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b3) return __n + 2;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	2200      	movs	r2, #0
 800c562:	469a      	mov	sl, r3
 800c564:	4693      	mov	fp, r2
 800c566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c56a:	4552      	cmp	r2, sl
 800c56c:	eb73 030b 	sbcs.w	r3, r3, fp
 800c570:	d202      	bcs.n	800c578 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	3302      	adds	r3, #2
 800c576:	e01f      	b.n	800c5b8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b4) return __n + 3;
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	2200      	movs	r2, #0
 800c57c:	60bb      	str	r3, [r7, #8]
 800c57e:	60fa      	str	r2, [r7, #12]
 800c580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	428a      	cmp	r2, r1
 800c588:	68f9      	ldr	r1, [r7, #12]
 800c58a:	418b      	sbcs	r3, r1
 800c58c:	d202      	bcs.n	800c594 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x94>
 800c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c590:	3303      	adds	r3, #3
 800c592:	e011      	b.n	800c5b8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  __value /= __b4;
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	2200      	movs	r2, #0
 800c598:	603b      	str	r3, [r7, #0]
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c5a4:	f7f4 fb0a 	bl	8000bbc <__aeabi_uldivmod>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  __n += 4;
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__value < (unsigned)__base) return __n;
 800c5b6:	e7ba      	b.n	800c52e <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x2e>
    }
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3730      	adds	r7, #48	; 0x30
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c5c4 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 800c5c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5c8:	b08c      	sub	sp, #48	; 0x30
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6178      	str	r0, [r7, #20]
 800c5ce:	6139      	str	r1, [r7, #16]
 800c5d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      unsigned __pos = __len - 1;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 800c5da:	e034      	b.n	800c646 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x82>
	  auto const __num = (__val % 100) * 2;
 800c5dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5e0:	f04f 0264 	mov.w	r2, #100	; 0x64
 800c5e4:	f04f 0300 	mov.w	r3, #0
 800c5e8:	f7f4 fae8 	bl	8000bbc <__aeabi_uldivmod>
 800c5ec:	1891      	adds	r1, r2, r2
 800c5ee:	6039      	str	r1, [r7, #0]
 800c5f0:	415b      	adcs	r3, r3
 800c5f2:	607b      	str	r3, [r7, #4]
 800c5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  __val /= 100;
 800c5fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c600:	f04f 0264 	mov.w	r2, #100	; 0x64
 800c604:	f04f 0300 	mov.w	r3, #0
 800c608:	f7f4 fad8 	bl	8000bbc <__aeabi_uldivmod>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  __first[__pos] = __digits[__num + 1];
 800c614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c618:	f112 0a01 	adds.w	sl, r2, #1
 800c61c:	f143 0b00 	adc.w	fp, r3, #0
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	4413      	add	r3, r2
 800c626:	4a20      	ldr	r2, [pc, #128]	; (800c6a8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 800c628:	4452      	add	r2, sl
 800c62a:	7812      	ldrb	r2, [r2, #0]
 800c62c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	3b01      	subs	r3, #1
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	4413      	add	r3, r2
 800c636:	491c      	ldr	r1, [pc, #112]	; (800c6a8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	440a      	add	r2, r1
 800c63c:	7812      	ldrb	r2, [r2, #0]
 800c63e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c642:	3b02      	subs	r3, #2
 800c644:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 800c646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c64a:	2a64      	cmp	r2, #100	; 0x64
 800c64c:	f173 0300 	sbcs.w	r3, r3, #0
 800c650:	d2c4      	bcs.n	800c5dc <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x18>
      if (__val >= 10)
 800c652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c656:	2a0a      	cmp	r2, #10
 800c658:	f173 0300 	sbcs.w	r3, r3, #0
 800c65c:	d319      	bcc.n	800c692 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xce>
	  auto const __num = __val * 2;
 800c65e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c662:	eb12 0802 	adds.w	r8, r2, r2
 800c666:	eb43 0903 	adc.w	r9, r3, r3
 800c66a:	e9c7 8908 	strd	r8, r9, [r7, #32]
	  __first[1] = __digits[__num + 1];
 800c66e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c672:	1c54      	adds	r4, r2, #1
 800c674:	f143 0500 	adc.w	r5, r3, #0
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4a0a      	ldr	r2, [pc, #40]	; (800c6a8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 800c67e:	4422      	add	r2, r4
 800c680:	7812      	ldrb	r2, [r2, #0]
 800c682:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800c684:	4a08      	ldr	r2, [pc, #32]	; (800c6a8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	4413      	add	r3, r2
 800c68a:	781a      	ldrb	r2, [r3, #0]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	701a      	strb	r2, [r3, #0]
    }
 800c690:	e004      	b.n	800c69c <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xd8>
	__first[0] = '0' + __val;
 800c692:	7a3b      	ldrb	r3, [r7, #8]
 800c694:	3330      	adds	r3, #48	; 0x30
 800c696:	b2da      	uxtb	r2, r3
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	701a      	strb	r2, [r3, #0]
    }
 800c69c:	bf00      	nop
 800c69e:	3730      	adds	r7, #48	; 0x30
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08018aec 	.word	0x08018aec

0800c6ac <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>:
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	607a      	str	r2, [r7, #4]
 800c6b8:	72fb      	strb	r3, [r7, #11]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800c6ba:	f107 0318 	add.w	r3, r7, #24
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f00a ff71 	bl	80175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800c6c6:	f107 0314 	add.w	r3, r7, #20
 800c6ca:	f107 0218 	add.w	r2, r7, #24
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fdba 	bl	800d24a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800c6d6:	f107 0314 	add.w	r3, r7, #20
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f00a fce0 	bl	80170a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800c6e2:	f107 0314 	add.w	r3, r7, #20
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f00a fbb2 	bl	8016e50 <_ZNSaIcED1Ev>
 800c6ec:	f107 0318 	add.w	r3, r7, #24
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f00a fbad 	bl	8016e50 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      const __size_type __len = __rhs.size();
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f00a fd3a 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c6fc:	61f8      	str	r0, [r7, #28]
      __str.reserve(__len + 1);
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	3301      	adds	r3, #1
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f00a fd3f 	bl	8017188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__size_type(1), __lhs);
 800c70a:	7afb      	ldrb	r3, [r7, #11]
 800c70c:	461a      	mov	r2, r3
 800c70e:	2101      	movs	r1, #1
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f00a fe05 	bl	8017320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      __str.append(__rhs);
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f00a ff0d 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800c71e:	bf00      	nop
    }
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	3720      	adds	r7, #32
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    operator+(const _CharT* __lhs,
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
      const __size_type __len = _Traits::length(__lhs);
 800c734:	68b8      	ldr	r0, [r7, #8]
 800c736:	f7f4 fe0b 	bl	8001350 <_ZNSt11char_traitsIcE6lengthEPKc>
 800c73a:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800c73c:	f107 0318 	add.w	r3, r7, #24
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	4618      	mov	r0, r3
 800c744:	f00a ff30 	bl	80175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800c748:	f107 0314 	add.w	r3, r7, #20
 800c74c:	f107 0218 	add.w	r2, r7, #24
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fd79 	bl	800d24a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800c758:	f107 0314 	add.w	r3, r7, #20
 800c75c:	4619      	mov	r1, r3
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f00a fc9f 	bl	80170a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800c764:	f107 0314 	add.w	r3, r7, #20
 800c768:	4618      	mov	r0, r3
 800c76a:	f00a fb71 	bl	8016e50 <_ZNSaIcED1Ev>
 800c76e:	f107 0318 	add.w	r3, r7, #24
 800c772:	4618      	mov	r0, r3
 800c774:	f00a fb6c 	bl	8016e50 <_ZNSaIcED1Ev>
      __str.reserve(__len + __rhs.size());
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f00a fcf9 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c77e:	4602      	mov	r2, r0
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	4619      	mov	r1, r3
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f00a fcfe 	bl	8017188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	68b9      	ldr	r1, [r7, #8]
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f00a fedb 	bl	801754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800c796:	6879      	ldr	r1, [r7, #4]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f00a fecd 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800c79e:	bf00      	nop
    }
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c7a8:	b590      	push	{r4, r7, lr}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fd73 	bl	800d29e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	681c      	ldr	r4, [r3, #0]
 800c7bc:	6838      	ldr	r0, [r7, #0]
 800c7be:	f000 fd6e 	bl	800d29e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429c      	cmp	r4, r3
 800c7c8:	bf14      	ite	ne
 800c7ca:	2301      	movne	r3, #1
 800c7cc:	2300      	moveq	r3, #0
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd90      	pop	{r4, r7, pc}

0800c7d8 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
	return *this;
 800c7ea:	687b      	ldr	r3, [r7, #4]
      }
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4618      	mov	r0, r3
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f00a ff9c 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f00a fea0 	bl	801756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800c82c:	bf00      	nop
    }
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800c836:	b590      	push	{r4, r7, lr}
 800c838:	b08b      	sub	sp, #44	; 0x2c
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 800c842:	2300      	movs	r3, #0
 800c844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 800c848:	f107 0314 	add.w	r3, r7, #20
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f4 fdf4 	bl	800143a <_ZNKSt17integral_constantIbLb1EEcvbEv>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d003      	beq.n	800c860 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c85e:	e024      	b.n	800c8aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 800c860:	f107 0318 	add.w	r3, r7, #24
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	4618      	mov	r0, r3
 800c868:	f00a fe9e 	bl	80175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800c86c:	f107 031c 	add.w	r3, r7, #28
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4618      	mov	r0, r3
 800c874:	f00a fe98 	bl	80175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800c878:	f107 021c 	add.w	r2, r7, #28
 800c87c:	f107 0318 	add.w	r3, r7, #24
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f000 fcef 	bl	800d266 <_ZSteqRKSaIcES1_>
 800c888:	4603      	mov	r3, r0
 800c88a:	461c      	mov	r4, r3
 800c88c:	f107 031c 	add.w	r3, r7, #28
 800c890:	4618      	mov	r0, r3
 800c892:	f00a fadd 	bl	8016e50 <_ZNSaIcED1Ev>
 800c896:	f107 0318 	add.w	r3, r7, #24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f00a fad8 	bl	8016e50 <_ZNSaIcED1Ev>
 800c8a0:	2c00      	cmp	r4, #0
 800c8a2:	d002      	beq.n	800c8aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 800c8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d02b      	beq.n	800c90a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 800c8b2:	68b8      	ldr	r0, [r7, #8]
 800c8b4:	f00a fc5c 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f00a fc58 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	4423      	add	r3, r4
 800c8c4:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 800c8c6:	68b8      	ldr	r0, [r7, #8]
 800c8c8:	f00a fc56 	bl	8017178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d908      	bls.n	800c8e6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f00a fc4f 	bl	8017178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d801      	bhi.n	800c8e6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00e      	beq.n	800c90a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f00a fdd3 	bl	801749c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 fcdb 	bl	800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4619      	mov	r1, r3
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f00a fbdd 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800c908:	e00c      	b.n	800c924 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 800c90a:	6879      	ldr	r1, [r7, #4]
 800c90c:	68b8      	ldr	r0, [r7, #8]
 800c90e:	f00a fe13 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800c912:	4603      	mov	r3, r0
 800c914:	4618      	mov	r0, r3
 800c916:	f000 fccd 	bl	800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4619      	mov	r1, r3
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f00a fbcf 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	372c      	adds	r7, #44	; 0x2c
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}

0800c92c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	2100      	movs	r1, #0
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f00a fdb7 	bl	80174b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800c942:	4603      	mov	r3, r0
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fcb5 	bl	800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800c94a:	4603      	mov	r3, r0
 800c94c:	4619      	mov	r1, r3
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f00a fbb7 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800c964:	2110      	movs	r1, #16
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7f5 fb82 	bl	8002070 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10allocRightEj>
 800c96c:	4603      	mov	r3, r0
  }
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <_ZN11ArduinoJson7V6211HB6detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	60f8      	str	r0, [r7, #12]
 800c97e:	60b9      	str	r1, [r7, #8]
 800c980:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fc9e 	bl	800d2ca <_ZN11ArduinoJson7V6211HB6detail18SizedStringAdapterIPcvE5adaptEPKcj>
 800c98e:	bf00      	nop
}
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>:
  const char* findString(const TAdaptedString& str) const {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
    size_t n = str.size();
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f7f5 f8d8 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 800c9a8:	6138      	str	r0, [r7, #16]
    for (char* next = _begin; next + n < _left; ++next) {
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	e027      	b.n	800ca02 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x6a>
      if (next[n] == '\0' && stringEquals(str, adaptString(next, n)))
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d112      	bne.n	800c9e4 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	6979      	ldr	r1, [r7, #20]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff ffd5 	bl	800c976 <_ZN11ArduinoJson7V6211HB6detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	f107 0308 	add.w	r3, r7, #8
 800c9d2:	cb0c      	ldmia	r3, {r2, r3}
 800c9d4:	c903      	ldmia	r1, {r0, r1}
 800c9d6:	f000 fc87 	bl	800d2e8 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e000      	b.n	800c9e6 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4e>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d004      	beq.n	800c9f4 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x5c>
        return next;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	e011      	b.n	800ca12 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x7a>
        ++next;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	617b      	str	r3, [r7, #20]
      while (*next)
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1f8      	bne.n	800c9ee <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x56>
    for (char* next = _begin; next + n < _left; ++next) {
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	441a      	add	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d3d0      	bcc.n	800c9b2 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x1a>
    return 0;
 800ca10:	2300      	movs	r3, #0
  }
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <_ZN11ArduinoJson7V6211HB6detailneINS0_16JsonVariantConstEEEbRKT_S3_>:
  template <typename T>
  friend bool operator!=(T* lhs, TVariant rhs) {
    return compare(rhs, lhs) != COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend bool operator!=(const T& lhs, TVariant rhs) {
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	6039      	str	r1, [r7, #0]
    return compare(rhs, lhs) != COMPARE_RESULT_EQUAL;
 800ca24:	6879      	ldr	r1, [r7, #4]
 800ca26:	6838      	ldr	r0, [r7, #0]
 800ca28:	f000 fc9f 	bl	800d36a <_ZN11ArduinoJson7V6211HB6detail7compareINS0_16JsonVariantConstEEENS1_13CompareResultES3_RKT_>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	bf14      	ite	ne
 800ca32:	2301      	movne	r3, #1
 800ca34:	2300      	moveq	r3, #0
 800ca36:	b2db      	uxtb	r3, r3
  }
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>:
typename StringAdapter<TString>::AdaptedString adaptString(const TString& s) {
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  return StringAdapter<TString>::adapt(s);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f5 f94a 	bl	8001ce8 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800ca54:	bf00      	nop
}
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7f5 f843 	bl	8001af2 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterIPKcvE5adaptES4_>
 800ca6c:	4603      	mov	r3, r0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <_ZN11ArduinoJson7V6211HB13serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Produces a minified JSON document.
// https://arduinojson.org/v6/api/json/serializejson/
template <typename TDestination>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b082      	sub	sp, #8
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fca6 	bl	800d3d4 <_ZN11ArduinoJson7V6211HB6detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 800ca88:	4603      	mov	r3, r0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_>:

 private:
  template <typename TComparer>
  CompareResult accept(TComparer& comparer) {
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fcaa 	bl	800d3fc <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_13ArrayComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d002      	beq.n	800cab8 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_+0x26>
 800cab2:	2b04      	cmp	r3, #4
 800cab4:	d002      	beq.n	800cabc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_+0x2a>
 800cab6:	e003      	b.n	800cac0 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_+0x2e>
      case COMPARE_RESULT_GREATER:
        return COMPARE_RESULT_LESS;
 800cab8:	2304      	movs	r3, #4
 800caba:	e002      	b.n	800cac2 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_+0x30>
      case COMPARE_RESULT_LESS:
        return COMPARE_RESULT_GREATER;
 800cabc:	2302      	movs	r3, #2
 800cabe:	e000      	b.n	800cac2 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_13ArrayComparerEEENS1_13CompareResultERT_+0x30>
      default:
        return reversedResult;
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
    }
  }
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800caca:	b580      	push	{r7, lr}
 800cacc:	b084      	sub	sp, #16
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fca5 	bl	800d42a <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14ObjectComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d002      	beq.n	800caf0 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_+0x26>
 800caea:	2b04      	cmp	r3, #4
 800caec:	d002      	beq.n	800caf4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_+0x2a>
 800caee:	e003      	b.n	800caf8 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800caf0:	2304      	movs	r3, #4
 800caf2:	e002      	b.n	800cafa <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800caf4:	2302      	movs	r3, #2
 800caf6:	e000      	b.n	800cafa <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_14ObjectComparerEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvEC1Ed>:
  explicit Comparer(T value) : rhs(value) {}
 800cb02:	b480      	push	{r7}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	ed87 0b00 	vstr	d0, [r7]
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb14:	e9c1 2300 	strd	r2, r3, [r1]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3714      	adds	r7, #20
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 fc8e 	bl	800d458 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIdvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d002      	beq.n	800cb4c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_+0x26>
 800cb46:	2b04      	cmp	r3, #4
 800cb48:	d002      	beq.n	800cb50 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_+0x2a>
 800cb4a:	e003      	b.n	800cb54 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cb4c:	2304      	movs	r3, #4
 800cb4e:	e002      	b.n	800cb56 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cb50:	2302      	movs	r3, #2
 800cb52:	e000      	b.n	800cb56 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIdvEEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvEC1ES4_>:
  explicit Comparer(T value) : rhs(value) {}
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 fc7a 	bl	800d486 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIPKcvEEEENT_11result_typeEPKNS1_11VariantDataERS7_>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d002      	beq.n	800cba2 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_+0x26>
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d002      	beq.n	800cba6 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_+0x2a>
 800cba0:	e003      	b.n	800cbaa <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cba2:	2304      	movs	r3, #4
 800cba4:	e002      	b.n	800cbac <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cba6:	2302      	movs	r3, #2
 800cba8:	e000      	b.n	800cbac <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIPKcvEEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fc75 	bl	800d4b4 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_11RawComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d002      	beq.n	800cbda <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_+0x26>
 800cbd4:	2b04      	cmp	r3, #4
 800cbd6:	d002      	beq.n	800cbde <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_+0x2a>
 800cbd8:	e003      	b.n	800cbe2 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cbda:	2304      	movs	r3, #4
 800cbdc:	e002      	b.n	800cbe4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cbde:	2302      	movs	r3, #2
 800cbe0:	e000      	b.n	800cbe4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_11RawComparerEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvEC1Ex>:
  explicit Comparer(T value) : rhs(value) {}
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	e9c7 2300 	strd	r2, r3, [r7]
 800cbf8:	68f9      	ldr	r1, [r7, #12]
 800cbfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbfe:	e9c1 2300 	strd	r2, r3, [r1]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fc5e 	bl	800d4e2 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIxvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800cc26:	4603      	mov	r3, r0
 800cc28:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d002      	beq.n	800cc36 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_+0x26>
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d002      	beq.n	800cc3a <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_+0x2a>
 800cc34:	e003      	b.n	800cc3e <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cc36:	2304      	movs	r3, #4
 800cc38:	e002      	b.n	800cc40 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cc3a:	2302      	movs	r3, #2
 800cc3c:	e000      	b.n	800cc40 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIxvEEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvEC1Ey>:
  explicit Comparer(T value) : rhs(value) {}
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	e9c7 2300 	strd	r2, r3, [r7]
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc5a:	e9c1 2300 	strd	r2, r3, [r1]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fc47 	bl	800d510 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIyvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d002      	beq.n	800cc92 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_+0x26>
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d002      	beq.n	800cc96 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_+0x2a>
 800cc90:	e003      	b.n	800cc9a <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cc92:	2304      	movs	r3, #4
 800cc94:	e002      	b.n	800cc9c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cc96:	2302      	movs	r3, #2
 800cc98:	e000      	b.n	800cc9c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIyvEEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvEC1Eb>:
  explicit Comparer(T value) : rhs(value) {}
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	701a      	strb	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fc32 	bl	800d53e <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d002      	beq.n	800ccea <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_+0x26>
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d002      	beq.n	800ccee <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_+0x2a>
 800cce8:	e003      	b.n	800ccf2 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800ccea:	2304      	movs	r3, #4
 800ccec:	e002      	b.n	800ccf4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	e000      	b.n	800ccf4 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_8ComparerIbvEEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
  }
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_>:
  CompareResult accept(TComparer& comparer) {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
    CompareResult reversedResult = variantAccept(rhs, comparer);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 fc2d 	bl	800d56c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_12NullComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73fb      	strb	r3, [r7, #15]
    switch (reversedResult) {
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d002      	beq.n	800cd22 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_+0x26>
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d002      	beq.n	800cd26 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_+0x2a>
 800cd20:	e003      	b.n	800cd2a <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_+0x2e>
        return COMPARE_RESULT_LESS;
 800cd22:	2304      	movs	r3, #4
 800cd24:	e002      	b.n	800cd2c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_+0x30>
        return COMPARE_RESULT_GREATER;
 800cd26:	2302      	movs	r3, #2
 800cd28:	e000      	b.n	800cd2c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer6acceptINS1_12NullComparerEEENS1_13CompareResultERT_+0x30>
        return reversedResult;
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
  }
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <_ZN11ArduinoJson7V6211HB6detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_SIGNED_INTEGER);
 800cd40:	210a      	movs	r1, #10
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7f5 fab0 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asSignedInteger = value;
 800cd48:	68f9      	ldr	r1, [r7, #12]
 800cd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <_ZN11ArduinoJson7V6211HB6detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_UNSIGNED_INTEGER);
 800cd66:	2108      	movs	r1, #8
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7f5 fa9d 	bl	80022a8 <_ZN11ArduinoJson7V6211HB6detail11VariantData7setTypeEh>
    _content.asUnsignedInteger = static_cast<JsonUInt>(value);
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd74:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 800cd84:	f04f 0000 	mov.w	r0, #0
 800cd88:	4905      	ldr	r1, [pc, #20]	; (800cda0 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE3infEv+0x20>)
 800cd8a:	f000 fc06 	bl	800d59a <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE5forgeEy>
 800cd8e:	eeb0 7a40 	vmov.f32	s14, s0
 800cd92:	eef0 7a60 	vmov.f32	s15, s1
  }
 800cd96:	eeb0 0a47 	vmov.f32	s0, s14
 800cd9a:	eef0 0a67 	vmov.f32	s1, s15
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	7ff00000 	.word	0x7ff00000

0800cda4 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	ed87 0b02 	vstr	d0, [r7, #8]
 800cdae:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dd04      	ble.n	800cdc0 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x1c>
 800cdb6:	f000 fc05 	bl	800d5c4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	e003      	b.n	800cdc8 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800cdc0:	f000 fc10 	bl	800d5e4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dc02      	bgt.n	800cdd4 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	425b      	negs	r3, r3
 800cdd2:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	75fb      	strb	r3, [r7, #23]
 800cdd8:	e01b      	b.n	800ce12 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d010      	beq.n	800ce06 <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 800cde4:	7dfa      	ldrb	r2, [r7, #23]
 800cde6:	f107 0310 	add.w	r3, r7, #16
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fc09 	bl	800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>
 800cdf2:	ec53 2b10 	vmov	r2, r3, d0
 800cdf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdfa:	f7f3 fbfd 	bl	80005f8 <__aeabi_dmul>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	105b      	asrs	r3, r3, #1
 800ce0a:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	75fb      	strb	r3, [r7, #23]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e0      	bne.n	800cdda <_ZN11ArduinoJson7V6211HB6detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 800ce18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce1c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce20:	eeb0 0a47 	vmov.f32	s0, s14
 800ce24:	eef0 0a67 	vmov.f32	s1, s15
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <_ZN12DynamicArrayI9ParameterEC1Ev>:
//	allocate pointer to new memory location , set capacity to size+1 == 1 at start
		/**
		 *@brief Constructor for Dynamic Array without any input parameter
		 *@details assigns **u_size =0** and updates **ptr** pointer to a new dynamic memory location of `size = u_size+1`
		 */
		DynamicArray() {
 800ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	601a      	str	r2, [r3, #0]
			u_size = 0;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	605a      	str	r2, [r3, #4]
			ptr = new Tda[u_size + 1];
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	1c5c      	adds	r4, r3, #1
 800ce4a:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <_ZN12DynamicArrayI9ParameterEC1Ev+0x70>)
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	d805      	bhi.n	800ce5c <_ZN12DynamicArrayI9ParameterEC1Ev+0x2c>
 800ce50:	4623      	mov	r3, r4
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	1b1b      	subs	r3, r3, r4
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	3308      	adds	r3, #8
 800ce5a:	e001      	b.n	800ce60 <_ZN12DynamicArrayI9ParameterEC1Ev+0x30>
 800ce5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce60:	4618      	mov	r0, r3
 800ce62:	f009 fff1 	bl	8016e48 <_Znaj>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461d      	mov	r5, r3
 800ce6a:	2338      	movs	r3, #56	; 0x38
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	1d2b      	adds	r3, r5, #4
 800ce70:	601c      	str	r4, [r3, #0]
 800ce72:	f105 0308 	add.w	r3, r5, #8
 800ce76:	1e62      	subs	r2, r4, #1
 800ce78:	4614      	mov	r4, r2
 800ce7a:	461e      	mov	r6, r3
 800ce7c:	e004      	b.n	800ce88 <_ZN12DynamicArrayI9ParameterEC1Ev+0x58>
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7f6 fc96 	bl	80037b0 <_ZN9ParameterC1Ev>
 800ce84:	3638      	adds	r6, #56	; 0x38
 800ce86:	3c01      	subs	r4, #1
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	daf8      	bge.n	800ce7e <_ZN12DynamicArrayI9ParameterEC1Ev+0x4e>
 800ce8c:	f105 0208 	add.w	r2, r5, #8
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	601a      	str	r2, [r3, #0]
		}
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	02492492 	.word	0x02492492

0800cea4 <_ZN12DynamicArrayI9ParameterED1Ev>:
			ptr = new Tda[u_size + 1];
		}
		/**
		 *@brief Destructor for Dynamic Array
		 */
		~DynamicArray() {
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
//		u_size = 0;
		}
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <_ZN12DynamicArrayIP9VARIABLESE9push_backES1_>:
		 * @fn void push_back(Tda value)
		 *@brief To create one extra memory location in dynamic array and assign it with input: value.
		 *@details Calling expand_1() function and Updating last index's value in updated Dynamic Array
		 *@param[in]  value  Generic Data type value to be added to expanded dynamic array.
		 */
		void push_back(Tda value) {
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	6039      	str	r1, [r7, #0]
			// create new space
			expand_1();
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fc00 	bl	800d6ca <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev>
			//add element at last
			ptr[u_size - 1] = value;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ced6:	3b01      	subs	r3, #1
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	601a      	str	r2, [r3, #0]
		}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZN12DynamicArrayIP9VARIABLESEC1Ev>:
		DynamicArray() {
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	601a      	str	r2, [r3, #0]
			u_size = 0;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	605a      	str	r2, [r3, #4]
			ptr = new Tda[u_size + 1];
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	3301      	adds	r3, #1
 800cf02:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d201      	bcs.n	800cf0e <_ZN12DynamicArrayIP9VARIABLESEC1Ev+0x26>
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	e001      	b.n	800cf12 <_ZN12DynamicArrayIP9VARIABLESEC1Ev+0x2a>
 800cf0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf12:	4618      	mov	r0, r3
 800cf14:	f009 ff98 	bl	8016e48 <_Znaj>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	601a      	str	r2, [r3, #0]
		}
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <_ZN12DynamicArrayIbEC1Ev>:
		DynamicArray() {
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]
			u_size = 0;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	605a      	str	r2, [r3, #4]
			ptr = new Tda[u_size + 1];
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	3301      	adds	r3, #1
 800cf44:	4618      	mov	r0, r3
 800cf46:	f009 ff7f 	bl	8016e48 <_Znaj>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	601a      	str	r2, [r3, #0]
		}
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZN12DynamicArrayIbE9push_backEb>:
		void push_back(Tda value) {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
			expand_1();
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fbee 	bl	800d74a <_ZN12DynamicArrayIbE8expand_1Ev>
			ptr[u_size - 1] = value;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	701a      	strb	r2, [r3, #0]
		}
 800cf7e:	bf00      	nop
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <_ZN12DynamicArrayIbE8pop_backEv>:
		 *@brief To create one extra memory location in dynamic array and assign it with input: value.
		 *@details Calling expand_1() function and Updating last index's value in updated Dynamic Array
		 *@param[in]  value  Generic Data type value to be added to expanded dynamic array.
		 */

		Tda pop_back() {
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
		    if (u_size == 0) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <_ZN12DynamicArrayIbE8pop_backEv+0x14>
		        return 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e00b      	b.n	800cfb2 <_ZN12DynamicArrayIbE8pop_backEv+0x2c>
		    }

		    // Get the last element
		    Tda popped_element = ptr[u_size - 1];
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	4413      	add	r3, r2
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	73fb      	strb	r3, [r7, #15]

		    // Contract the array
		    contract_1();
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fc03 	bl	800d7b6 <_ZN12DynamicArrayIbE10contract_1Ev>

		    return popped_element;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
		}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	60b9      	str	r1, [r7, #8]
 800cfc4:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	68b8      	ldr	r0, [r7, #8]
 800cfca:	f00a facf 	bl	801756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 f96f 	bl	800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f00a f871 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <_ZNKSt16initializer_listImE5beginEv>:
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv>:
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4618      	mov	r0, r3
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800d024:	68b9      	ldr	r1, [r7, #8]
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f00a fb98 	bl	801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f00a fa82 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800d034:	bf00      	nop
    }
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800d03e:	b580      	push	{r7, lr}
 800d040:	b082      	sub	sp, #8
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f00a fb4d 	bl	80176ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	bf0c      	ite	eq
 800d056:	2301      	moveq	r3, #1
 800d058:	2300      	movne	r3, #0
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f00a f87e 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800d074:	4604      	mov	r4, r0
 800d076:	6838      	ldr	r0, [r7, #0]
 800d078:	f00a f87a 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800d07c:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 800d07e:	429c      	cmp	r4, r3
 800d080:	d115      	bne.n	800d0ae <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f00a fa8e 	bl	80175a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800d088:	4604      	mov	r4, r0
 800d08a:	6838      	ldr	r0, [r7, #0]
 800d08c:	f00a fa8a 	bl	80175a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800d090:	4605      	mov	r5, r0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f00a f86c 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800d098:	4603      	mov	r3, r0
 800d09a:	461a      	mov	r2, r3
 800d09c:	4629      	mov	r1, r5
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f7f4 f940 	bl	8001324 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 800d0ae:	2300      	movs	r3, #0
						    __lhs.size())); }
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d0b8 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff ffba 	bl	800d03e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f083 0301 	eor.w	r3, r3, #1
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EEC1Ev>:
  static const size_t _capacity =
      detail::AddPadding<detail::Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3328      	adds	r3, #40	; 0x28
 800d0e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f7f5 fa9e 	bl	800262e <_ZN11ArduinoJson7V6211HB12JsonDocumentC1EPcj>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <_ZN12DynamicArrayIP9VARIABLESE4sizeEv>:
		uint32_t size() {
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
			return u_size;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
		}
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <_ZN12DynamicArrayIP9VARIABLESE2atEm>:
		 *@brief To return Generic Pointer pointing to a generic type value stored in corresponding input : index no.
		 *@details if(demanded index no. matches with allowable indices) then Return Generic Pointer Pointing to Corresponding Index else Return Generic Pointer Pointing to Last Index.
		 *@param[in]  index  32 bit INDEX No of this Dynamic Array  whose Generic Pointer is to be Returned .
		 *@return ptr+index a generic Pointer of type Tda ,Pointing to input index no corresponding to this  dynamic array.
		 */
		Tda* at(uint32_t index) {
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
			if (index < u_size) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d205      	bcs.n	800d134 <_ZN12DynamicArrayIP9VARIABLESE2atEm+0x20>
				return ptr + index;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	e008      	b.n	800d146 <_ZN12DynamicArrayIP9VARIABLESE2atEm+0x32>
			} else {
				return ptr + u_size - 1;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d140:	3b01      	subs	r3, #1
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
			}
		}
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <_ZN11ArduinoJson7V6211HB6detaileqINS0_18StaticJsonDocumentILj1024EEEEEbRKT_RKNS0_12JsonDocumentE>:
  friend bool operator==(const T& lhs, TVariant rhs) {
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	6039      	str	r1, [r7, #0]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	60fb      	str	r3, [r7, #12]
    return getVariant();
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7f5 fa85 	bl	8002670 <_ZNK11ArduinoJson7V6211HB12JsonDocument10getVariantEv>
 800d166:	4603      	mov	r3, r0
 800d168:	bf00      	nop
    return compare(rhs, lhs) == COMPARE_RESULT_EQUAL;
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fb5c 	bl	800d82a <_ZN11ArduinoJson7V6211HB6detail7compareINS0_18StaticJsonDocumentILj1024EEEEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 800d172:	4603      	mov	r3, r0
 800d174:	2b01      	cmp	r3, #1
 800d176:	bf0c      	ite	eq
 800d178:	2301      	moveq	r3, #1
 800d17a:	2300      	movne	r3, #0
 800d17c:	b2db      	uxtb	r3, r3
  }
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <_ZN11ArduinoJson7V6211HB15deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v6/api/json/deserializejson/
template <typename... Args>
DeserializationError deserializeJson(JsonDocument& doc, Args&&... args) {
 800d186:	b580      	push	{r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return deserialize<JsonDeserializer>(doc, detail::forward<Args>(args)...);
 800d190:	6838      	ldr	r0, [r7, #0]
 800d192:	f000 fb66 	bl	800d862 <_ZN11ArduinoJson7V6211HB6detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800d196:	4603      	mov	r3, r0
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fb6c 	bl	800d878 <_ZN11ArduinoJson7V6211HB6detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>
 800d1a0:	4603      	mov	r3, r0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	68b8      	ldr	r0, [r7, #8]
 800d1ba:	f00a f9bd 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 f877 	bl	800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f009 ff79 	bl	80170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <_ZNK11ArduinoJson7V6211HB12JsonDocument11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>:
  bool containsKey(const TString& key) const {
 800d1d8:	b590      	push	{r4, r7, lr}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
    return _data.getMember(detail::adaptString(key)) != 0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f103 0418 	add.w	r4, r3, #24
 800d1e8:	f107 0308 	add.w	r3, r7, #8
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fb99 	bl	800d926 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_13StringAdapterIT_vE13AdaptedStringERKSA_>
 800d1f4:	f107 0308 	add.w	r3, r7, #8
 800d1f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fba1 	bl	800d944 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_14SizedRamStringEEEPS2_T_>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	bf14      	ite	ne
 800d208:	2301      	movne	r3, #1
 800d20a:	2300      	moveq	r3, #0
 800d20c:	b2db      	uxtb	r3, r3
  }
 800d20e:	4618      	mov	r0, r3
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	bd90      	pop	{r4, r7, pc}

0800d216 <_ZNK11ArduinoJson7V6211HB12JsonDocument11containsKeyIKcEEbPT_>:
  bool containsKey(TChar* key) const {
 800d216:	b590      	push	{r4, r7, lr}
 800d218:	b083      	sub	sp, #12
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	6039      	str	r1, [r7, #0]
    return _data.getMember(detail::adaptString(key)) != 0;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f103 0418 	add.w	r4, r3, #24
 800d226:	6838      	ldr	r0, [r7, #0]
 800d228:	f7ff fc19 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d22c:	4603      	mov	r3, r0
 800d22e:	4619      	mov	r1, r3
 800d230:	4620      	mov	r0, r4
 800d232:	f000 fba2 	bl	800d97a <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf14      	ite	ne
 800d23c:	2301      	movne	r3, #1
 800d23e:	2300      	moveq	r3, #0
 800d240:	b2db      	uxtb	r3, r3
  }
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	bd90      	pop	{r4, r7, pc}

0800d24a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fba6 	bl	800d9aa <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <_ZSteqRKSaIcES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
      { return true; }
 800d270:	2301      	movs	r3, #1
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4618      	mov	r0, r3
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <_ZN11ArduinoJson7V6211HB6detail18SizedStringAdapterIPcvE5adaptEPKcj>:
template <typename TChar>
struct SizedStringAdapter<TChar*,
                          typename enable_if<IsChar<TChar>::value>::type> {
  typedef SizedRamString AdaptedString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7f4 fc18 	bl	8001b10 <_ZN11ArduinoJson7V6211HB6detail14SizedRamStringC1EPKcj>
  }
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
}

template <typename TAdaptedString1, typename TAdaptedString2>
typename enable_if<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey,
                   bool>::type
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800d2e8:	b590      	push	{r4, r7, lr}
 800d2ea:	b089      	sub	sp, #36	; 0x24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	f107 0408 	add.w	r4, r7, #8
 800d2f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	e881 000c 	stmia.w	r1, {r2, r3}
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 800d2fc:	f107 0308 	add.w	r3, r7, #8
 800d300:	4618      	mov	r0, r3
 800d302:	f7f4 fc29 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 800d306:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800d308:	463b      	mov	r3, r7
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f4 fc24 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 800d310:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800d312:	69ba      	ldr	r2, [r7, #24]
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	429a      	cmp	r2, r3
 800d318:	d001      	beq.n	800d31e <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x36>
    return false;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e021      	b.n	800d362 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800d31e:	2300      	movs	r3, #0
 800d320:	61fb      	str	r3, [r7, #28]
 800d322:	e019      	b.n	800d358 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x70>
    if (s1[i] != s2[i])
 800d324:	f107 0308 	add.w	r3, r7, #8
 800d328:	69f9      	ldr	r1, [r7, #28]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7f4 fc20 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 800d330:	4603      	mov	r3, r0
 800d332:	461c      	mov	r4, r3
 800d334:	463b      	mov	r3, r7
 800d336:	69f9      	ldr	r1, [r7, #28]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7f4 fc19 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 800d33e:	4603      	mov	r3, r0
 800d340:	429c      	cmp	r4, r3
 800d342:	bf14      	ite	ne
 800d344:	2301      	movne	r3, #1
 800d346:	2300      	moveq	r3, #0
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
      return false;
 800d34e:	2300      	movs	r3, #0
 800d350:	e007      	b.n	800d362 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	3301      	adds	r3, #1
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d3e1      	bcc.n	800d324 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x3c>
  }
  return true;
 800d360:	2301      	movs	r3, #1
}
 800d362:	4618      	mov	r0, r3
 800d364:	3724      	adds	r7, #36	; 0x24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}

0800d36a <_ZN11ArduinoJson7V6211HB6detail7compareINS0_16JsonVariantConstEEENS1_13CompareResultES3_RKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(VariantAttorney::getData(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b084      	sub	sp, #16
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
  Comparer<T> comparer(rhs);
 800d374:	f107 030c 	add.w	r3, r7, #12
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fb22 	bl	800d9c4 <_ZN11ArduinoJson7V6211HB6detail8ComparerINS0_16JsonVariantConstEvEC1ERKS3_>
 800d380:	1d3b      	adds	r3, r7, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7f4 ffc7 	bl	8002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>
 800d388:	4602      	mov	r2, r0
 800d38a:	bf00      	nop
  return variantAccept(VariantAttorney::getData(lhs), comparer);
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f000 fb2c 	bl	800d9f0 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeEPKNS1_11VariantDataERS6_>
 800d398:	4603      	mov	r3, r0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <_ZNK11ArduinoJson7V6211HB15JsonObjectConst9getMemberINS0_6detail17JsonStringAdapterEEEPKNS3_11VariantDataET_>:
  const detail::VariantData* getData() const {
    return collectionToVariant(_data);
  }

  template <typename TAdaptedString>
  const detail::VariantData* getMember(TAdaptedString key) const {
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	4638      	mov	r0, r7
 800d3ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!_data)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <_ZNK11ArduinoJson7V6211HB15JsonObjectConst9getMemberINS0_6detail17JsonStringAdapterEEEPKNS3_11VariantDataET_+0x1a>
      return 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e007      	b.n	800d3cc <_ZNK11ArduinoJson7V6211HB15JsonObjectConst9getMemberINS0_6detail17JsonStringAdapterEEEPKNS3_11VariantDataET_+0x2a>
    return _data->getMember(key);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6818      	ldr	r0, [r3, #0]
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3c4:	f000 fb2c 	bl	800da20 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	bf00      	nop
  }
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <_ZN11ArduinoJson7V6211HB6detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer);
  return variantAccept(VariantAttorney::getData(source), serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 800d3de:	f107 030c 	add.w	r3, r7, #12
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fb35 	bl	800da54 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 800d3ea:	68f9      	ldr	r1, [r7, #12]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fb40 	bl	800da72 <_ZN11ArduinoJson7V6211HB6detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 800d3f2:	4603      	mov	r3, r0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_13ArrayComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>:
#include "../Variant/Visitor.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TVisitor>
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
                                                    TVisitor& visitor) {
  if (var != 0)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d005      	beq.n	800d418 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_13ArrayComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x1c>
    return var->accept(visitor);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fb4c 	bl	800daac <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_>
 800d414:	4603      	mov	r3, r0
 800d416:	e004      	b.n	800d422 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_13ArrayComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x26>
  else
    return visitor.visitNull();
 800d418:	6838      	ldr	r0, [r7, #0]
 800d41a:	f000 fc29 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d41e:	4603      	mov	r3, r0
 800d420:	bf00      	nop
}
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14ObjectComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d005      	beq.n	800d446 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14ObjectComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x1c>
    return var->accept(visitor);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fc23 	bl	800dc88 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_>
 800d442:	4603      	mov	r3, r0
 800d444:	e004      	b.n	800d450 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14ObjectComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x26>
    return visitor.visitNull();
 800d446:	6838      	ldr	r0, [r7, #0]
 800d448:	f000 fc12 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d44c:	4603      	mov	r3, r0
 800d44e:	bf00      	nop
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIdvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d005      	beq.n	800d474 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIdvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fcee 	bl	800de4c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_>
 800d470:	4603      	mov	r3, r0
 800d472:	e004      	b.n	800d47e <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIdvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800d474:	6838      	ldr	r0, [r7, #0]
 800d476:	f000 fbfb 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d47a:	4603      	mov	r3, r0
 800d47c:	bf00      	nop
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIPKcvEEEENT_11result_typeEPKNS1_11VariantDataERS7_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d005      	beq.n	800d4a2 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIPKcvEEEENT_11result_typeEPKNS1_11VariantDataERS7_+0x1c>
    return var->accept(visitor);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fdb9 	bl	800e010 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	e004      	b.n	800d4ac <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIPKcvEEEENT_11result_typeEPKNS1_11VariantDataERS7_+0x26>
    return visitor.visitNull();
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f000 fe96 	bl	800e1d4 <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE9visitNullEv>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	bf00      	nop
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_11RawComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d005      	beq.n	800d4d0 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_11RawComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x1c>
    return var->accept(visitor);
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fe9e 	bl	800e208 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	e004      	b.n	800d4da <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_11RawComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x26>
    return visitor.visitNull();
 800d4d0:	6838      	ldr	r0, [r7, #0]
 800d4d2:	f000 fbcd 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	bf00      	nop
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIxvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIxvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800d4f2:	6839      	ldr	r1, [r7, #0]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 ff69 	bl	800e3cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	e004      	b.n	800d508 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIxvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f000 fbb6 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d504:	4603      	mov	r3, r0
 800d506:	bf00      	nop
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIyvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d005      	beq.n	800d52c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIyvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f001 f834 	bl	800e590 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_>
 800d528:	4603      	mov	r3, r0
 800d52a:	e004      	b.n	800d536 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIyvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800d52c:	6838      	ldr	r0, [r7, #0]
 800d52e:	f000 fb9f 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d532:	4603      	mov	r3, r0
 800d534:	bf00      	nop
}
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d005      	beq.n	800d55a <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 f8ff 	bl	800e754 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>
 800d556:	4603      	mov	r3, r0
 800d558:	e004      	b.n	800d564 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800d55a:	6838      	ldr	r0, [r7, #0]
 800d55c:	f000 fb88 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800d560:	4603      	mov	r3, r0
 800d562:	bf00      	nop
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_12NullComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_12NullComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x1c>
    return var->accept(visitor);
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 f9ca 	bl	800e918 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_>
 800d584:	4603      	mov	r3, r0
 800d586:	e004      	b.n	800d592 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_12NullComparerEEENT_11result_typeEPKNS1_11VariantDataERS4_+0x26>
    return visitor.visitNull();
 800d588:	6838      	ldr	r0, [r7, #0]
 800d58a:	f7f5 f9ef 	bl	800296c <_ZN11ArduinoJson7V6211HB6detail12NullComparer9visitNullEv>
 800d58e:	4603      	mov	r3, r0
 800d590:	bf00      	nop
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 800d5a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5a8:	f001 fa98 	bl	800eadc <_ZN11ArduinoJson7V6211HB6detail10alias_castIdyEET_T0_>
 800d5ac:	eeb0 7a40 	vmov.f32	s14, s0
 800d5b0:	eef0 7a60 	vmov.f32	s15, s1
  }
 800d5b4:	eeb0 0a47 	vmov.f32	s0, s14
 800d5b8:	eef0 0a67 	vmov.f32	s1, s15
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800d5ca:	1d3b      	adds	r3, r7, #4
 800d5cc:	4904      	ldr	r1, [pc, #16]	; (800d5e0 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f001 fa9a 	bl	800eb08 <_ZN11ArduinoJson7V6211HB6detail7pgm_ptrIdEC1EPKd>
 800d5d4:	687b      	ldr	r3, [r7, #4]
  }
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	08018bb8 	.word	0x08018bb8

0800d5e4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800d5ea:	1d3b      	adds	r3, r7, #4
 800d5ec:	4904      	ldr	r1, [pc, #16]	; (800d600 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f001 fa8a 	bl	800eb08 <_ZN11ArduinoJson7V6211HB6detail7pgm_ptrIdEC1EPKd>
 800d5f4:	687b      	ldr	r3, [r7, #4]
  }
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08018c00 	.word	0x08018c00

0800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : _ptr(ptr) {}

  T operator[](intptr_t index) const {
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
    return pgm_read(_ptr + index);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	4413      	add	r3, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f001 fa84 	bl	800eb26 <_ZN11ArduinoJson7V6211HB6detail8pgm_readIdEET_PKS3_>
 800d61e:	eeb0 7a40 	vmov.f32	s14, s0
 800d622:	eef0 7a60 	vmov.f32	s15, s1
  }
 800d626:	eeb0 0a47 	vmov.f32	s0, s14
 800d62a:	eef0 0a67 	vmov.f32	s1, s15
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES6_j>:
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	4618      	mov	r0, r3
 800d648:	f001 fa7f 	bl	800eb4a <_ZN11ArduinoJson7V6211HB6detail18SizedStringAdapterIPKcvE5adaptES4_j>
 800d64c:	bf00      	nop
}
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_>:
  const char* saveString(TAdaptedString str) {
 800d656:	b580      	push	{r7, lr}
 800d658:	b088      	sub	sp, #32
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	1d3b      	adds	r3, r7, #4
 800d660:	e883 0006 	stmia.w	r3, {r1, r2}
    if (str.isNull())
 800d664:	1d3b      	adds	r3, r7, #4
 800d666:	4618      	mov	r0, r3
 800d668:	f7f4 fa65 	bl	8001b36 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString6isNullEv>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_+0x20>
      return 0;
 800d672:	2300      	movs	r3, #0
 800d674:	e025      	b.n	800d6c2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_+0x6c>
    const char* existingCopy = findString(str);
 800d676:	1d3b      	adds	r3, r7, #4
 800d678:	4619      	mov	r1, r3
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7ff f98c 	bl	800c998 <_ZNK11ArduinoJson7V6211HB6detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>
 800d680:	61f8      	str	r0, [r7, #28]
    if (existingCopy)
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_+0x36>
      return existingCopy;
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	e01a      	b.n	800d6c2 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_+0x6c>
    size_t n = str.size();
 800d68c:	1d3b      	adds	r3, r7, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f4 fa62 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 800d694:	61b8      	str	r0, [r7, #24]
    char* newCopy = allocString(n + 1);
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	3301      	adds	r3, #1
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7f4 fcc2 	bl	8002026 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool11allocStringEj>
 800d6a2:	6178      	str	r0, [r7, #20]
    if (newCopy) {
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00a      	beq.n	800d6c0 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_+0x6a>
      stringGetChars(str, newCopy, n);
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	1d39      	adds	r1, r7, #4
 800d6b0:	c903      	ldmia	r1, {r0, r1}
 800d6b2:	f001 fa59 	bl	800eb68 <_ZN11ArduinoJson7V6211HB6detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj>
      newCopy[n] = 0;  // force null-terminator
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	2200      	movs	r2, #0
 800d6be:	701a      	strb	r2, [r3, #0]
    return newCopy;
 800d6c0:	697b      	ldr	r3, [r7, #20]
  }
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev>:
		void expand_1() {
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
			Tda *temp_ptr = new Tda[++u_size + 1];
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	605a      	str	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d201      	bcs.n	800d6ee <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev+0x24>
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	e001      	b.n	800d6f2 <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev+0x28>
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f009 fba8 	bl	8016e48 <_Znaj>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	60bb      	str	r3, [r7, #8]
			for (uint32_t iterator = 0; iterator < u_size - 1; iterator++) {
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	e00d      	b.n	800d71e <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev+0x54>
				*(temp_ptr + iterator) = *(ptr + iterator);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	441a      	add	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	440b      	add	r3, r1
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	601a      	str	r2, [r3, #0]
			for (uint32_t iterator = 0; iterator < u_size - 1; iterator++) {
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3301      	adds	r3, #1
 800d71c:	60fb      	str	r3, [r7, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	3b01      	subs	r3, #1
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	429a      	cmp	r2, r3
 800d728:	d3eb      	bcc.n	800d702 <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev+0x38>
			delete[] ptr;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d004      	beq.n	800d73c <_ZN12DynamicArrayIP9VARIABLESE8expand_1Ev+0x72>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4618      	mov	r0, r3
 800d738:	f009 fb75 	bl	8016e26 <_ZdaPv>
			ptr = temp_ptr;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	601a      	str	r2, [r3, #0]
		}
 800d742:	bf00      	nop
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <_ZN12DynamicArrayIbE8expand_1Ev>:
		void expand_1() {
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
			Tda *temp_ptr = new Tda[++u_size + 1];
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	3301      	adds	r3, #1
 800d762:	4618      	mov	r0, r3
 800d764:	f009 fb70 	bl	8016e48 <_Znaj>
 800d768:	4603      	mov	r3, r0
 800d76a:	60bb      	str	r3, [r7, #8]
			for (uint32_t iterator = 0; iterator < u_size - 1; iterator++) {
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	e00b      	b.n	800d78a <_ZN12DynamicArrayIbE8expand_1Ev+0x40>
				*(temp_ptr + iterator) = *(ptr + iterator);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	441a      	add	r2, r3
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	440b      	add	r3, r1
 800d780:	7812      	ldrb	r2, [r2, #0]
 800d782:	701a      	strb	r2, [r3, #0]
			for (uint32_t iterator = 0; iterator < u_size - 1; iterator++) {
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	3301      	adds	r3, #1
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	3b01      	subs	r3, #1
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	429a      	cmp	r2, r3
 800d794:	d3ed      	bcc.n	800d772 <_ZN12DynamicArrayIbE8expand_1Ev+0x28>
			delete[] ptr;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d004      	beq.n	800d7a8 <_ZN12DynamicArrayIbE8expand_1Ev+0x5e>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f009 fb3f 	bl	8016e26 <_ZdaPv>
			ptr = temp_ptr;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	601a      	str	r2, [r3, #0]
		}
 800d7ae:	bf00      	nop
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <_ZN12DynamicArrayIbE10contract_1Ev>:
		void contract_1() {
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
		    if (u_size <= 1) {
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d92d      	bls.n	800d822 <_ZN12DynamicArrayIbE10contract_1Ev+0x6c>
		    Tda *temp_ptr = new Tda[--u_size - 1];
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	1e5a      	subs	r2, r3, #1
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	605a      	str	r2, [r3, #4]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f009 fb36 	bl	8016e48 <_Znaj>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	60bb      	str	r3, [r7, #8]
		    for (uint32_t iterator = 0; iterator < u_size; iterator++) {
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e00b      	b.n	800d7fe <_ZN12DynamicArrayIbE10contract_1Ev+0x48>
		        temp_ptr[iterator] = ptr[iterator];
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	441a      	add	r2, r3
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	440b      	add	r3, r1
 800d7f4:	7812      	ldrb	r2, [r2, #0]
 800d7f6:	701a      	strb	r2, [r3, #0]
		    for (uint32_t iterator = 0; iterator < u_size; iterator++) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	429a      	cmp	r2, r3
 800d806:	d3ee      	bcc.n	800d7e6 <_ZN12DynamicArrayIbE10contract_1Ev+0x30>
		    delete[] ptr;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <_ZN12DynamicArrayIbE10contract_1Ev+0x64>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4618      	mov	r0, r3
 800d816:	f009 fb06 	bl	8016e26 <_ZdaPv>
		    ptr = temp_ptr;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e000      	b.n	800d824 <_ZN12DynamicArrayIbE10contract_1Ev+0x6e>
		        return; // Can't contract further
 800d822:	bf00      	nop
		}
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <_ZN11ArduinoJson7V6211HB6detail7compareINS0_18StaticJsonDocumentILj1024EEEEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  Comparer<T> comparer(rhs);
 800d834:	f107 030c 	add.w	r3, r7, #12
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 f9d1 	bl	800ebe2 <_ZN11ArduinoJson7V6211HB6detail8ComparerINS0_18StaticJsonDocumentILj1024EEEvEC1ERKS4_>
 800d840:	1d3b      	adds	r3, r7, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7f4 fd67 	bl	8002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>
 800d848:	4602      	mov	r2, r0
 800d84a:	bf00      	nop
  return variantAccept(VariantAttorney::getData(lhs), comparer);
 800d84c:	f107 030c 	add.w	r3, r7, #12
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f001 f9dc 	bl	800ec10 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeEPKNS1_11VariantDataERS7_>
 800d858:	4603      	mov	r3, r0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <_ZN11ArduinoJson7V6211HB6detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>:
#include "type_traits.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <class T>
T&& forward(typename remove_reference<T>::type& t) noexcept {
 800d862:	b480      	push	{r7}
 800d864:	b083      	sub	sp, #12
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d86a:	687b      	ldr	r3, [r7, #4]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <_ZN11ArduinoJson7V6211HB6detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>:

template <template <typename, typename> class TDeserializer, typename TStream,
          typename... Args,
          typename = typename enable_if<  // issue #1897
              !is_integral<typename first_or_void<Args...>::type>::value>::type>
DeserializationError deserialize(JsonDocument& doc, TStream&& input,
 800d878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87a:	b0ad      	sub	sp, #180	; 0xb4
 800d87c:	af04      	add	r7, sp, #16
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  auto reader = makeReader(detail::forward<TStream>(input));
 800d882:	6838      	ldr	r0, [r7, #0]
 800d884:	f7ff ffed 	bl	800d862 <_ZN11ArduinoJson7V6211HB6detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800d888:	4602      	mov	r2, r0
 800d88a:	f107 0310 	add.w	r3, r7, #16
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f001 f9d5 	bl	800ec40 <_ZN11ArduinoJson7V6211HB6detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d89c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d8a0:	f7f4 ff03 	bl	80026aa <_ZN11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	bf00      	nop
  auto data = VariantAttorney::getData(doc);
 800d8a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return client.getPool();
 800d8b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d8b6:	f7f4 feed 	bl	8002694 <_ZN11ArduinoJson7V6211HB12JsonDocument7getPoolEv>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	bf00      	nop
  auto pool = VariantAttorney::getPool(doc);
 800d8be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  auto options = makeDeserializationOptions(args...);
 800d8c2:	f107 0318 	add.w	r3, r7, #24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7f5 fd91 	bl	80033ee <_ZN11ArduinoJson7V6211HB21DeserializationOption12NestingLimitC1Ev>
 800d8cc:	7e38      	ldrb	r0, [r7, #24]
 800d8ce:	f7f5 fdd0 	bl	8003472 <_ZN11ArduinoJson7V6211HB6detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	81bb      	strh	r3, [r7, #12]
  doc.clear();
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7f4 fe98 	bl	800260c <_ZN11ArduinoJson7V6211HB12JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(pool, reader,
 800d8dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d8e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d8e4:	6839      	ldr	r1, [r7, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f001 f9bb 	bl	800ec62 <_ZN11ArduinoJson7V6211HB6detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>
 800d8ec:	f107 051c 	add.w	r5, r7, #28
 800d8f0:	466c      	mov	r4, sp
 800d8f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d8f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d8fc:	f107 0310 	add.w	r3, r7, #16
 800d900:	cb0c      	ldmia	r3, {r2, r3}
 800d902:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d906:	4628      	mov	r0, r5
 800d908:	f001 f9b9 	bl	800ec7e <_ZN11ArduinoJson7V6211HB6detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>
                                         makeStringStorage(input, pool))
      .parse(*data, options.filter, options.nestingLimit);
 800d90c:	f107 001c 	add.w	r0, r7, #28
 800d910:	7b7b      	ldrb	r3, [r7, #13]
 800d912:	4632      	mov	r2, r6
 800d914:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d918:	f001 f9c9 	bl	800ecae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800d91c:	4603      	mov	r3, r0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	37a4      	adds	r7, #164	; 0xa4
 800d922:	46bd      	mov	sp, r7
 800d924:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d926 <_ZN11ArduinoJson7V6211HB6detail11adaptStringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_13StringAdapterIT_vE13AdaptedStringERKSA_>:
typename StringAdapter<TString>::AdaptedString adaptString(const TString& s) {
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	6039      	str	r1, [r7, #0]
  return StringAdapter<TString>::adapt(s);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	f001 f9f6 	bl	800ed26 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5adaptERKS8_>
 800d93a:	bf00      	nop
}
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_14SizedRamStringEEEPS2_T_>:
  VariantData* getMember(TAdaptedString key) const {
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	1d3b      	adds	r3, r7, #4
 800d94e:	e883 0006 	stmia.w	r3, {r1, r2}
    const CollectionData* col = asObject();
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f7f4 fbcc 	bl	80020f0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asObjectEv>
 800d958:	6178      	str	r0, [r7, #20]
    return col ? col->getMember(key) : 0;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_14SizedRamStringEEEPS2_T_+0x2c>
 800d960:	6978      	ldr	r0, [r7, #20]
 800d962:	1d3b      	adds	r3, r7, #4
 800d964:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d968:	f001 f9f3 	bl	800ed52 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_>
 800d96c:	4603      	mov	r3, r0
 800d96e:	e000      	b.n	800d972 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_14SizedRamStringEEEPS2_T_+0x2e>
 800d970:	2300      	movs	r3, #0
  }
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>:
  VariantData* getMember(TAdaptedString key) const {
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b084      	sub	sp, #16
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	6039      	str	r1, [r7, #0]
    const CollectionData* col = asObject();
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7f4 fbb3 	bl	80020f0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData8asObjectEv>
 800d98a:	60f8      	str	r0, [r7, #12]
    return col ? col->getMember(key) : 0;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d006      	beq.n	800d9a0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x26>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	4618      	mov	r0, r3
 800d998:	f001 fa07 	bl	800edaa <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 800d99c:	4603      	mov	r3, r0
 800d99e:	e000      	b.n	800d9a2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x28>
 800d9a0:	2300      	movs	r3, #0
  }
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b082      	sub	sp, #8
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f009 fa49 	bl	8016e4e <_ZNSaIcEC1ERKS_>
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <_ZN11ArduinoJson7V6211HB6detail8ComparerINS0_16JsonVariantConstEvEC1ERKS3_>:
  explicit Comparer(const T& value)
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
      : VariantComparer(VariantAttorney::getData(value)) {}
 800d9ce:	687c      	ldr	r4, [r7, #4]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]
    return client.getData();
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7f4 fc9e 	bl	8002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	bf00      	nop
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f7f5 f9a1 	bl	8002d28 <_ZN11ArduinoJson7V6211HB6detail15VariantComparerC1EPKNS1_11VariantDataE>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd90      	pop	{r4, r7, pc}

0800d9f0 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeEPKNS1_11VariantDataERS6_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d005      	beq.n	800da0c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x1c>
    return var->accept(visitor);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 f9e8 	bl	800edd8 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_>
 800da08:	4603      	mov	r3, r0
 800da0a:	e005      	b.n	800da18 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x28>
    return visitor.visitNull();
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7f5 fa54 	bl	8002ebc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer9visitNullEv>
 800da14:	4603      	mov	r3, r0
 800da16:	bf00      	nop
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	4638      	mov	r0, r7
 800da2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  VariantSlot* slot = getSlot(key);
 800da2e:	463b      	mov	r3, r7
 800da30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f001 faba 	bl	800efac <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_>
 800da38:	6178      	str	r0, [r7, #20]
  return slot ? slot->data() : 0;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d004      	beq.n	800da4a <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_+0x2a>
 800da40:	6978      	ldr	r0, [r7, #20]
 800da42:	f7f4 f96a 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 800da46:	4603      	mov	r3, r0
 800da48:	e000      	b.n	800da4c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_+0x2c>
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3718      	adds	r7, #24
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:

template <typename TDestination>
class Writer<TDestination,
             typename enable_if<is_std_string<TDestination>::value>::type> {
 public:
  Writer(TDestination& str) : _str(&str) {}
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <_ZN11ArduinoJson7V6211HB6detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
  TSerializer<TWriter> serializer(writer);
 800da7c:	f107 0308 	add.w	r3, r7, #8
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f001 fac3 	bl	800f00e <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 800da88:	1d3b      	adds	r3, r7, #4
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f4 fc43 	bl	8002316 <_ZNK11ArduinoJson7V6211HB16JsonVariantConst7getDataEv>
 800da90:	4602      	mov	r2, r0
 800da92:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 800da94:	f107 0308 	add.w	r3, r7, #8
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f001 fac6 	bl	800f02c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>
 800daa0:	4603      	mov	r3, r0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7f4 fbe7 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800dabc:	4603      	mov	r3, r0
 800dabe:	3b02      	subs	r3, #2
 800dac0:	2b3e      	cmp	r3, #62	; 0x3e
 800dac2:	f200 80cc 	bhi.w	800dc5e <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1b2>
 800dac6:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x20>)
 800dac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dacc:	0800dc11 	.word	0x0800dc11
 800dad0:	0800dc11 	.word	0x0800dc11
 800dad4:	0800dbfd 	.word	0x0800dbfd
 800dad8:	0800dbfd 	.word	0x0800dbfd
 800dadc:	0800dc45 	.word	0x0800dc45
 800dae0:	0800dc5f 	.word	0x0800dc5f
 800dae4:	0800dc35 	.word	0x0800dc35
 800dae8:	0800dc5f 	.word	0x0800dc5f
 800daec:	0800dc25 	.word	0x0800dc25
 800daf0:	0800dc5f 	.word	0x0800dc5f
 800daf4:	0800dbc9 	.word	0x0800dbc9
 800daf8:	0800dc5f 	.word	0x0800dc5f
 800dafc:	0800dc5f 	.word	0x0800dc5f
 800db00:	0800dc5f 	.word	0x0800dc5f
 800db04:	0800dc5f 	.word	0x0800dc5f
 800db08:	0800dc5f 	.word	0x0800dc5f
 800db0c:	0800dc5f 	.word	0x0800dc5f
 800db10:	0800dc5f 	.word	0x0800dc5f
 800db14:	0800dc5f 	.word	0x0800dc5f
 800db18:	0800dc5f 	.word	0x0800dc5f
 800db1c:	0800dc5f 	.word	0x0800dc5f
 800db20:	0800dc5f 	.word	0x0800dc5f
 800db24:	0800dc5f 	.word	0x0800dc5f
 800db28:	0800dc5f 	.word	0x0800dc5f
 800db2c:	0800dc5f 	.word	0x0800dc5f
 800db30:	0800dc5f 	.word	0x0800dc5f
 800db34:	0800dc5f 	.word	0x0800dc5f
 800db38:	0800dc5f 	.word	0x0800dc5f
 800db3c:	0800dc5f 	.word	0x0800dc5f
 800db40:	0800dc5f 	.word	0x0800dc5f
 800db44:	0800dbef 	.word	0x0800dbef
 800db48:	0800dc5f 	.word	0x0800dc5f
 800db4c:	0800dc5f 	.word	0x0800dc5f
 800db50:	0800dc5f 	.word	0x0800dc5f
 800db54:	0800dc5f 	.word	0x0800dc5f
 800db58:	0800dc5f 	.word	0x0800dc5f
 800db5c:	0800dc5f 	.word	0x0800dc5f
 800db60:	0800dc5f 	.word	0x0800dc5f
 800db64:	0800dc5f 	.word	0x0800dc5f
 800db68:	0800dc5f 	.word	0x0800dc5f
 800db6c:	0800dc5f 	.word	0x0800dc5f
 800db70:	0800dc5f 	.word	0x0800dc5f
 800db74:	0800dc5f 	.word	0x0800dc5f
 800db78:	0800dc5f 	.word	0x0800dc5f
 800db7c:	0800dc5f 	.word	0x0800dc5f
 800db80:	0800dc5f 	.word	0x0800dc5f
 800db84:	0800dc5f 	.word	0x0800dc5f
 800db88:	0800dc5f 	.word	0x0800dc5f
 800db8c:	0800dc5f 	.word	0x0800dc5f
 800db90:	0800dc5f 	.word	0x0800dc5f
 800db94:	0800dc5f 	.word	0x0800dc5f
 800db98:	0800dc5f 	.word	0x0800dc5f
 800db9c:	0800dc5f 	.word	0x0800dc5f
 800dba0:	0800dc5f 	.word	0x0800dc5f
 800dba4:	0800dc5f 	.word	0x0800dc5f
 800dba8:	0800dc5f 	.word	0x0800dc5f
 800dbac:	0800dc5f 	.word	0x0800dc5f
 800dbb0:	0800dc5f 	.word	0x0800dc5f
 800dbb4:	0800dc5f 	.word	0x0800dc5f
 800dbb8:	0800dc5f 	.word	0x0800dc5f
 800dbbc:	0800dc5f 	.word	0x0800dc5f
 800dbc0:	0800dc5f 	.word	0x0800dc5f
 800dbc4:	0800dbe1 	.word	0x0800dbe1
        return visitor.visitFloat(_content.asFloat);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	ed93 7b00 	vldr	d7, [r3]
 800dbce:	eeb0 0a47 	vmov.f32	s0, s14
 800dbd2:	eef0 0a67 	vmov.f32	s1, s15
 800dbd6:	6838      	ldr	r0, [r7, #0]
 800dbd8:	f001 fa3f 	bl	800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	e043      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	6838      	ldr	r0, [r7, #0]
 800dbe6:	f7f4 fedb 	bl	80029a0 <_ZN11ArduinoJson7V6211HB6detail13ArrayComparer10visitArrayERKNS1_14CollectionDataE>
 800dbea:	4603      	mov	r3, r0
 800dbec:	e03c      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6838      	ldr	r0, [r7, #0]
 800dbf4:	f001 fa3e 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	e035      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800dc04:	461a      	mov	r2, r3
 800dc06:	6838      	ldr	r0, [r7, #0]
 800dc08:	f001 fa40 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800dc0c:	4603      	mov	r3, r0
                                   _content.asString.size);
 800dc0e:	e02b      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800dc18:	461a      	mov	r2, r3
 800dc1a:	6838      	ldr	r0, [r7, #0]
 800dc1c:	f001 fa43 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800dc20:	4603      	mov	r3, r0
                                    _content.asString.size);
 800dc22:	e021      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	6838      	ldr	r0, [r7, #0]
 800dc2c:	f001 fa48 	bl	800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>
 800dc30:	4603      	mov	r3, r0
 800dc32:	e019      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	6838      	ldr	r0, [r7, #0]
 800dc3c:	f001 fa4d 	bl	800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>
 800dc40:	4603      	mov	r3, r0
 800dc42:	e011      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bf14      	ite	ne
 800dc4c:	2301      	movne	r3, #1
 800dc4e:	2300      	moveq	r3, #0
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	4619      	mov	r1, r3
 800dc54:	6838      	ldr	r0, [r7, #0]
 800dc56:	f001 fa4d 	bl	800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	e004      	b.n	800dc68 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_13ArrayComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitNull();
 800dc5e:	6838      	ldr	r0, [r7, #0]
 800dc60:	f000 f806 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800dc64:	4603      	mov	r3, r0
 800dc66:	bf00      	nop
  }
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>:

  TResult visitSignedInteger(JsonInteger) {
    return TResult();
  }

  TResult visitNull() {
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
    return TResult();
 800dc78:	2300      	movs	r3, #0
  }
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
	...

0800dc88 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7f4 faf9 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	3b02      	subs	r3, #2
 800dc9c:	2b3e      	cmp	r3, #62	; 0x3e
 800dc9e:	f200 80cc 	bhi.w	800de3a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1b2>
 800dca2:	a201      	add	r2, pc, #4	; (adr r2, 800dca8 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x20>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dded 	.word	0x0800dded
 800dcac:	0800dded 	.word	0x0800dded
 800dcb0:	0800ddd9 	.word	0x0800ddd9
 800dcb4:	0800ddd9 	.word	0x0800ddd9
 800dcb8:	0800de21 	.word	0x0800de21
 800dcbc:	0800de3b 	.word	0x0800de3b
 800dcc0:	0800de11 	.word	0x0800de11
 800dcc4:	0800de3b 	.word	0x0800de3b
 800dcc8:	0800de01 	.word	0x0800de01
 800dccc:	0800de3b 	.word	0x0800de3b
 800dcd0:	0800dda5 	.word	0x0800dda5
 800dcd4:	0800de3b 	.word	0x0800de3b
 800dcd8:	0800de3b 	.word	0x0800de3b
 800dcdc:	0800de3b 	.word	0x0800de3b
 800dce0:	0800de3b 	.word	0x0800de3b
 800dce4:	0800de3b 	.word	0x0800de3b
 800dce8:	0800de3b 	.word	0x0800de3b
 800dcec:	0800de3b 	.word	0x0800de3b
 800dcf0:	0800de3b 	.word	0x0800de3b
 800dcf4:	0800de3b 	.word	0x0800de3b
 800dcf8:	0800de3b 	.word	0x0800de3b
 800dcfc:	0800de3b 	.word	0x0800de3b
 800dd00:	0800de3b 	.word	0x0800de3b
 800dd04:	0800de3b 	.word	0x0800de3b
 800dd08:	0800de3b 	.word	0x0800de3b
 800dd0c:	0800de3b 	.word	0x0800de3b
 800dd10:	0800de3b 	.word	0x0800de3b
 800dd14:	0800de3b 	.word	0x0800de3b
 800dd18:	0800de3b 	.word	0x0800de3b
 800dd1c:	0800de3b 	.word	0x0800de3b
 800dd20:	0800ddcb 	.word	0x0800ddcb
 800dd24:	0800de3b 	.word	0x0800de3b
 800dd28:	0800de3b 	.word	0x0800de3b
 800dd2c:	0800de3b 	.word	0x0800de3b
 800dd30:	0800de3b 	.word	0x0800de3b
 800dd34:	0800de3b 	.word	0x0800de3b
 800dd38:	0800de3b 	.word	0x0800de3b
 800dd3c:	0800de3b 	.word	0x0800de3b
 800dd40:	0800de3b 	.word	0x0800de3b
 800dd44:	0800de3b 	.word	0x0800de3b
 800dd48:	0800de3b 	.word	0x0800de3b
 800dd4c:	0800de3b 	.word	0x0800de3b
 800dd50:	0800de3b 	.word	0x0800de3b
 800dd54:	0800de3b 	.word	0x0800de3b
 800dd58:	0800de3b 	.word	0x0800de3b
 800dd5c:	0800de3b 	.word	0x0800de3b
 800dd60:	0800de3b 	.word	0x0800de3b
 800dd64:	0800de3b 	.word	0x0800de3b
 800dd68:	0800de3b 	.word	0x0800de3b
 800dd6c:	0800de3b 	.word	0x0800de3b
 800dd70:	0800de3b 	.word	0x0800de3b
 800dd74:	0800de3b 	.word	0x0800de3b
 800dd78:	0800de3b 	.word	0x0800de3b
 800dd7c:	0800de3b 	.word	0x0800de3b
 800dd80:	0800de3b 	.word	0x0800de3b
 800dd84:	0800de3b 	.word	0x0800de3b
 800dd88:	0800de3b 	.word	0x0800de3b
 800dd8c:	0800de3b 	.word	0x0800de3b
 800dd90:	0800de3b 	.word	0x0800de3b
 800dd94:	0800de3b 	.word	0x0800de3b
 800dd98:	0800de3b 	.word	0x0800de3b
 800dd9c:	0800de3b 	.word	0x0800de3b
 800dda0:	0800ddbd 	.word	0x0800ddbd
        return visitor.visitFloat(_content.asFloat);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	ed93 7b00 	vldr	d7, [r3]
 800ddaa:	eeb0 0a47 	vmov.f32	s0, s14
 800ddae:	eef0 0a67 	vmov.f32	s1, s15
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f001 f951 	bl	800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	e043      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6838      	ldr	r0, [r7, #0]
 800ddc2:	f001 f9a4 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	e03c      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6838      	ldr	r0, [r7, #0]
 800ddd0:	f7f4 fead 	bl	8002b2e <_ZN11ArduinoJson7V6211HB6detail14ObjectComparer11visitObjectERKNS1_14CollectionDataE>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	e035      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800dde0:	461a      	mov	r2, r3
 800dde2:	6838      	ldr	r0, [r7, #0]
 800dde4:	f001 f952 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800dde8:	4603      	mov	r3, r0
                                   _content.asString.size);
 800ddea:	e02b      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	6838      	ldr	r0, [r7, #0]
 800ddf8:	f001 f955 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800ddfc:	4603      	mov	r3, r0
                                    _content.asString.size);
 800ddfe:	e021      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	6838      	ldr	r0, [r7, #0]
 800de08:	f001 f95a 	bl	800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>
 800de0c:	4603      	mov	r3, r0
 800de0e:	e019      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	6838      	ldr	r0, [r7, #0]
 800de18:	f001 f95f 	bl	800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>
 800de1c:	4603      	mov	r3, r0
 800de1e:	e011      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	bf14      	ite	ne
 800de28:	2301      	movne	r3, #1
 800de2a:	2300      	moveq	r3, #0
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	4619      	mov	r1, r3
 800de30:	6838      	ldr	r0, [r7, #0]
 800de32:	f001 f95f 	bl	800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>
 800de36:	4603      	mov	r3, r0
 800de38:	e004      	b.n	800de44 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14ObjectComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitNull();
 800de3a:	6838      	ldr	r0, [r7, #0]
 800de3c:	f7ff ff18 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800de40:	4603      	mov	r3, r0
 800de42:	bf00      	nop
  }
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7f4 fa17 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800de5c:	4603      	mov	r3, r0
 800de5e:	3b02      	subs	r3, #2
 800de60:	2b3e      	cmp	r3, #62	; 0x3e
 800de62:	f200 80cc 	bhi.w	800dffe <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1b2>
 800de66:	a201      	add	r2, pc, #4	; (adr r2, 800de6c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x20>)
 800de68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6c:	0800dfb1 	.word	0x0800dfb1
 800de70:	0800dfb1 	.word	0x0800dfb1
 800de74:	0800df9d 	.word	0x0800df9d
 800de78:	0800df9d 	.word	0x0800df9d
 800de7c:	0800dfe5 	.word	0x0800dfe5
 800de80:	0800dfff 	.word	0x0800dfff
 800de84:	0800dfd5 	.word	0x0800dfd5
 800de88:	0800dfff 	.word	0x0800dfff
 800de8c:	0800dfc5 	.word	0x0800dfc5
 800de90:	0800dfff 	.word	0x0800dfff
 800de94:	0800df69 	.word	0x0800df69
 800de98:	0800dfff 	.word	0x0800dfff
 800de9c:	0800dfff 	.word	0x0800dfff
 800dea0:	0800dfff 	.word	0x0800dfff
 800dea4:	0800dfff 	.word	0x0800dfff
 800dea8:	0800dfff 	.word	0x0800dfff
 800deac:	0800dfff 	.word	0x0800dfff
 800deb0:	0800dfff 	.word	0x0800dfff
 800deb4:	0800dfff 	.word	0x0800dfff
 800deb8:	0800dfff 	.word	0x0800dfff
 800debc:	0800dfff 	.word	0x0800dfff
 800dec0:	0800dfff 	.word	0x0800dfff
 800dec4:	0800dfff 	.word	0x0800dfff
 800dec8:	0800dfff 	.word	0x0800dfff
 800decc:	0800dfff 	.word	0x0800dfff
 800ded0:	0800dfff 	.word	0x0800dfff
 800ded4:	0800dfff 	.word	0x0800dfff
 800ded8:	0800dfff 	.word	0x0800dfff
 800dedc:	0800dfff 	.word	0x0800dfff
 800dee0:	0800dfff 	.word	0x0800dfff
 800dee4:	0800df8f 	.word	0x0800df8f
 800dee8:	0800dfff 	.word	0x0800dfff
 800deec:	0800dfff 	.word	0x0800dfff
 800def0:	0800dfff 	.word	0x0800dfff
 800def4:	0800dfff 	.word	0x0800dfff
 800def8:	0800dfff 	.word	0x0800dfff
 800defc:	0800dfff 	.word	0x0800dfff
 800df00:	0800dfff 	.word	0x0800dfff
 800df04:	0800dfff 	.word	0x0800dfff
 800df08:	0800dfff 	.word	0x0800dfff
 800df0c:	0800dfff 	.word	0x0800dfff
 800df10:	0800dfff 	.word	0x0800dfff
 800df14:	0800dfff 	.word	0x0800dfff
 800df18:	0800dfff 	.word	0x0800dfff
 800df1c:	0800dfff 	.word	0x0800dfff
 800df20:	0800dfff 	.word	0x0800dfff
 800df24:	0800dfff 	.word	0x0800dfff
 800df28:	0800dfff 	.word	0x0800dfff
 800df2c:	0800dfff 	.word	0x0800dfff
 800df30:	0800dfff 	.word	0x0800dfff
 800df34:	0800dfff 	.word	0x0800dfff
 800df38:	0800dfff 	.word	0x0800dfff
 800df3c:	0800dfff 	.word	0x0800dfff
 800df40:	0800dfff 	.word	0x0800dfff
 800df44:	0800dfff 	.word	0x0800dfff
 800df48:	0800dfff 	.word	0x0800dfff
 800df4c:	0800dfff 	.word	0x0800dfff
 800df50:	0800dfff 	.word	0x0800dfff
 800df54:	0800dfff 	.word	0x0800dfff
 800df58:	0800dfff 	.word	0x0800dfff
 800df5c:	0800dfff 	.word	0x0800dfff
 800df60:	0800dfff 	.word	0x0800dfff
 800df64:	0800df81 	.word	0x0800df81
        return visitor.visitFloat(_content.asFloat);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	ed93 7b00 	vldr	d7, [r3]
 800df6e:	eeb0 0a47 	vmov.f32	s0, s14
 800df72:	eef0 0a67 	vmov.f32	s1, s15
 800df76:	6838      	ldr	r0, [r7, #0]
 800df78:	f001 f8d5 	bl	800f126 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE10visitFloatEd>
 800df7c:	4603      	mov	r3, r0
 800df7e:	e043      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4619      	mov	r1, r3
 800df84:	6838      	ldr	r0, [r7, #0]
 800df86:	f001 f8c2 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800df8a:	4603      	mov	r3, r0
 800df8c:	e03c      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4619      	mov	r1, r3
 800df92:	6838      	ldr	r0, [r7, #0]
 800df94:	f001 f86e 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800df98:	4603      	mov	r3, r0
 800df9a:	e035      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	6838      	ldr	r0, [r7, #0]
 800dfa8:	f001 f870 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800dfac:	4603      	mov	r3, r0
                                   _content.asString.size);
 800dfae:	e02b      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800dfb8:	461a      	mov	r2, r3
 800dfba:	6838      	ldr	r0, [r7, #0]
 800dfbc:	f001 f873 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800dfc0:	4603      	mov	r3, r0
                                    _content.asString.size);
 800dfc2:	e021      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	6838      	ldr	r0, [r7, #0]
 800dfcc:	f001 f8bc 	bl	800f148 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE18visitSignedIntegerEx>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	e019      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	6838      	ldr	r0, [r7, #0]
 800dfdc:	f001 f8c5 	bl	800f16a <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE20visitUnsignedIntegerEy>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	e011      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	bf14      	ite	ne
 800dfec:	2301      	movne	r3, #1
 800dfee:	2300      	moveq	r3, #0
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	4619      	mov	r1, r3
 800dff4:	6838      	ldr	r0, [r7, #0]
 800dff6:	f001 f8c9 	bl	800f18c <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE12visitBooleanEb>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e004      	b.n	800e008 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIdvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800dffe:	6838      	ldr	r0, [r7, #0]
 800e000:	f7ff fe36 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e004:	4603      	mov	r3, r0
 800e006:	bf00      	nop
  }
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7f4 f935 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e020:	4603      	mov	r3, r0
 800e022:	3b02      	subs	r3, #2
 800e024:	2b3e      	cmp	r3, #62	; 0x3e
 800e026:	f200 80cc 	bhi.w	800e1c2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1b2>
 800e02a:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x20>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e175 	.word	0x0800e175
 800e034:	0800e175 	.word	0x0800e175
 800e038:	0800e161 	.word	0x0800e161
 800e03c:	0800e161 	.word	0x0800e161
 800e040:	0800e1a9 	.word	0x0800e1a9
 800e044:	0800e1c3 	.word	0x0800e1c3
 800e048:	0800e199 	.word	0x0800e199
 800e04c:	0800e1c3 	.word	0x0800e1c3
 800e050:	0800e189 	.word	0x0800e189
 800e054:	0800e1c3 	.word	0x0800e1c3
 800e058:	0800e12d 	.word	0x0800e12d
 800e05c:	0800e1c3 	.word	0x0800e1c3
 800e060:	0800e1c3 	.word	0x0800e1c3
 800e064:	0800e1c3 	.word	0x0800e1c3
 800e068:	0800e1c3 	.word	0x0800e1c3
 800e06c:	0800e1c3 	.word	0x0800e1c3
 800e070:	0800e1c3 	.word	0x0800e1c3
 800e074:	0800e1c3 	.word	0x0800e1c3
 800e078:	0800e1c3 	.word	0x0800e1c3
 800e07c:	0800e1c3 	.word	0x0800e1c3
 800e080:	0800e1c3 	.word	0x0800e1c3
 800e084:	0800e1c3 	.word	0x0800e1c3
 800e088:	0800e1c3 	.word	0x0800e1c3
 800e08c:	0800e1c3 	.word	0x0800e1c3
 800e090:	0800e1c3 	.word	0x0800e1c3
 800e094:	0800e1c3 	.word	0x0800e1c3
 800e098:	0800e1c3 	.word	0x0800e1c3
 800e09c:	0800e1c3 	.word	0x0800e1c3
 800e0a0:	0800e1c3 	.word	0x0800e1c3
 800e0a4:	0800e1c3 	.word	0x0800e1c3
 800e0a8:	0800e153 	.word	0x0800e153
 800e0ac:	0800e1c3 	.word	0x0800e1c3
 800e0b0:	0800e1c3 	.word	0x0800e1c3
 800e0b4:	0800e1c3 	.word	0x0800e1c3
 800e0b8:	0800e1c3 	.word	0x0800e1c3
 800e0bc:	0800e1c3 	.word	0x0800e1c3
 800e0c0:	0800e1c3 	.word	0x0800e1c3
 800e0c4:	0800e1c3 	.word	0x0800e1c3
 800e0c8:	0800e1c3 	.word	0x0800e1c3
 800e0cc:	0800e1c3 	.word	0x0800e1c3
 800e0d0:	0800e1c3 	.word	0x0800e1c3
 800e0d4:	0800e1c3 	.word	0x0800e1c3
 800e0d8:	0800e1c3 	.word	0x0800e1c3
 800e0dc:	0800e1c3 	.word	0x0800e1c3
 800e0e0:	0800e1c3 	.word	0x0800e1c3
 800e0e4:	0800e1c3 	.word	0x0800e1c3
 800e0e8:	0800e1c3 	.word	0x0800e1c3
 800e0ec:	0800e1c3 	.word	0x0800e1c3
 800e0f0:	0800e1c3 	.word	0x0800e1c3
 800e0f4:	0800e1c3 	.word	0x0800e1c3
 800e0f8:	0800e1c3 	.word	0x0800e1c3
 800e0fc:	0800e1c3 	.word	0x0800e1c3
 800e100:	0800e1c3 	.word	0x0800e1c3
 800e104:	0800e1c3 	.word	0x0800e1c3
 800e108:	0800e1c3 	.word	0x0800e1c3
 800e10c:	0800e1c3 	.word	0x0800e1c3
 800e110:	0800e1c3 	.word	0x0800e1c3
 800e114:	0800e1c3 	.word	0x0800e1c3
 800e118:	0800e1c3 	.word	0x0800e1c3
 800e11c:	0800e1c3 	.word	0x0800e1c3
 800e120:	0800e1c3 	.word	0x0800e1c3
 800e124:	0800e1c3 	.word	0x0800e1c3
 800e128:	0800e145 	.word	0x0800e145
        return visitor.visitFloat(_content.asFloat);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	ed93 7b00 	vldr	d7, [r3]
 800e132:	eeb0 0a47 	vmov.f32	s0, s14
 800e136:	eef0 0a67 	vmov.f32	s1, s15
 800e13a:	6838      	ldr	r0, [r7, #0]
 800e13c:	f000 ff8d 	bl	800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>
 800e140:	4603      	mov	r3, r0
 800e142:	e043      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4619      	mov	r1, r3
 800e148:	6838      	ldr	r0, [r7, #0]
 800e14a:	f000 ffe0 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e14e:	4603      	mov	r3, r0
 800e150:	e03c      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4619      	mov	r1, r3
 800e156:	6838      	ldr	r0, [r7, #0]
 800e158:	f000 ff8c 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e15c:	4603      	mov	r3, r0
 800e15e:	e035      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800e168:	461a      	mov	r2, r3
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f001 f81f 	bl	800f1ae <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j>
 800e170:	4603      	mov	r3, r0
                                   _content.asString.size);
 800e172:	e02b      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800e17c:	461a      	mov	r2, r3
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f000 ff91 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800e184:	4603      	mov	r3, r0
                                    _content.asString.size);
 800e186:	e021      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	6838      	ldr	r0, [r7, #0]
 800e190:	f000 ff96 	bl	800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>
 800e194:	4603      	mov	r3, r0
 800e196:	e019      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	6838      	ldr	r0, [r7, #0]
 800e1a0:	f000 ff9b 	bl	800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	e011      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	bf14      	ite	ne
 800e1b0:	2301      	movne	r3, #1
 800e1b2:	2300      	moveq	r3, #0
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	6838      	ldr	r0, [r7, #0]
 800e1ba:	f000 ff9b 	bl	800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	e004      	b.n	800e1cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIPKcvEEEENT_11result_typeERS8_+0x1bc>
        return visitor.visitNull();
 800e1c2:	6838      	ldr	r0, [r7, #0]
 800e1c4:	f000 f806 	bl	800e1d4 <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE9visitNullEv>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	bf00      	nop
  }
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE9visitNullEv>:
  CompareResult visitNull() {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
    if (adaptString(rhs).isNull())
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe fc3c 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	f107 030c 	add.w	r3, r7, #12
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f3 fc3b 	bl	8001a6a <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString6isNullEv>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d001      	beq.n	800e1fe <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE9visitNullEv+0x2a>
      return COMPARE_RESULT_EQUAL;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE9visitNullEv+0x2c>
      return COMPARE_RESULT_DIFFER;
 800e1fe:	2300      	movs	r3, #0
  }
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7f4 f839 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e218:	4603      	mov	r3, r0
 800e21a:	3b02      	subs	r3, #2
 800e21c:	2b3e      	cmp	r3, #62	; 0x3e
 800e21e:	f200 80cc 	bhi.w	800e3ba <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1b2>
 800e222:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x20>)
 800e224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e228:	0800e36d 	.word	0x0800e36d
 800e22c:	0800e36d 	.word	0x0800e36d
 800e230:	0800e359 	.word	0x0800e359
 800e234:	0800e359 	.word	0x0800e359
 800e238:	0800e3a1 	.word	0x0800e3a1
 800e23c:	0800e3bb 	.word	0x0800e3bb
 800e240:	0800e391 	.word	0x0800e391
 800e244:	0800e3bb 	.word	0x0800e3bb
 800e248:	0800e381 	.word	0x0800e381
 800e24c:	0800e3bb 	.word	0x0800e3bb
 800e250:	0800e325 	.word	0x0800e325
 800e254:	0800e3bb 	.word	0x0800e3bb
 800e258:	0800e3bb 	.word	0x0800e3bb
 800e25c:	0800e3bb 	.word	0x0800e3bb
 800e260:	0800e3bb 	.word	0x0800e3bb
 800e264:	0800e3bb 	.word	0x0800e3bb
 800e268:	0800e3bb 	.word	0x0800e3bb
 800e26c:	0800e3bb 	.word	0x0800e3bb
 800e270:	0800e3bb 	.word	0x0800e3bb
 800e274:	0800e3bb 	.word	0x0800e3bb
 800e278:	0800e3bb 	.word	0x0800e3bb
 800e27c:	0800e3bb 	.word	0x0800e3bb
 800e280:	0800e3bb 	.word	0x0800e3bb
 800e284:	0800e3bb 	.word	0x0800e3bb
 800e288:	0800e3bb 	.word	0x0800e3bb
 800e28c:	0800e3bb 	.word	0x0800e3bb
 800e290:	0800e3bb 	.word	0x0800e3bb
 800e294:	0800e3bb 	.word	0x0800e3bb
 800e298:	0800e3bb 	.word	0x0800e3bb
 800e29c:	0800e3bb 	.word	0x0800e3bb
 800e2a0:	0800e34b 	.word	0x0800e34b
 800e2a4:	0800e3bb 	.word	0x0800e3bb
 800e2a8:	0800e3bb 	.word	0x0800e3bb
 800e2ac:	0800e3bb 	.word	0x0800e3bb
 800e2b0:	0800e3bb 	.word	0x0800e3bb
 800e2b4:	0800e3bb 	.word	0x0800e3bb
 800e2b8:	0800e3bb 	.word	0x0800e3bb
 800e2bc:	0800e3bb 	.word	0x0800e3bb
 800e2c0:	0800e3bb 	.word	0x0800e3bb
 800e2c4:	0800e3bb 	.word	0x0800e3bb
 800e2c8:	0800e3bb 	.word	0x0800e3bb
 800e2cc:	0800e3bb 	.word	0x0800e3bb
 800e2d0:	0800e3bb 	.word	0x0800e3bb
 800e2d4:	0800e3bb 	.word	0x0800e3bb
 800e2d8:	0800e3bb 	.word	0x0800e3bb
 800e2dc:	0800e3bb 	.word	0x0800e3bb
 800e2e0:	0800e3bb 	.word	0x0800e3bb
 800e2e4:	0800e3bb 	.word	0x0800e3bb
 800e2e8:	0800e3bb 	.word	0x0800e3bb
 800e2ec:	0800e3bb 	.word	0x0800e3bb
 800e2f0:	0800e3bb 	.word	0x0800e3bb
 800e2f4:	0800e3bb 	.word	0x0800e3bb
 800e2f8:	0800e3bb 	.word	0x0800e3bb
 800e2fc:	0800e3bb 	.word	0x0800e3bb
 800e300:	0800e3bb 	.word	0x0800e3bb
 800e304:	0800e3bb 	.word	0x0800e3bb
 800e308:	0800e3bb 	.word	0x0800e3bb
 800e30c:	0800e3bb 	.word	0x0800e3bb
 800e310:	0800e3bb 	.word	0x0800e3bb
 800e314:	0800e3bb 	.word	0x0800e3bb
 800e318:	0800e3bb 	.word	0x0800e3bb
 800e31c:	0800e3bb 	.word	0x0800e3bb
 800e320:	0800e33d 	.word	0x0800e33d
        return visitor.visitFloat(_content.asFloat);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	ed93 7b00 	vldr	d7, [r3]
 800e32a:	eeb0 0a47 	vmov.f32	s0, s14
 800e32e:	eef0 0a67 	vmov.f32	s1, s15
 800e332:	6838      	ldr	r0, [r7, #0]
 800e334:	f000 fe91 	bl	800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>
 800e338:	4603      	mov	r3, r0
 800e33a:	e043      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4619      	mov	r1, r3
 800e340:	6838      	ldr	r0, [r7, #0]
 800e342:	f000 fee4 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e346:	4603      	mov	r3, r0
 800e348:	e03c      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6838      	ldr	r0, [r7, #0]
 800e350:	f000 fe90 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e354:	4603      	mov	r3, r0
 800e356:	e035      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800e360:	461a      	mov	r2, r3
 800e362:	6838      	ldr	r0, [r7, #0]
 800e364:	f000 fe92 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800e368:	4603      	mov	r3, r0
                                   _content.asString.size);
 800e36a:	e02b      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800e374:	461a      	mov	r2, r3
 800e376:	6838      	ldr	r0, [r7, #0]
 800e378:	f7f4 fcaf 	bl	8002cda <_ZN11ArduinoJson7V6211HB6detail11RawComparer12visitRawJsonEPKcj>
 800e37c:	4603      	mov	r3, r0
                                    _content.asString.size);
 800e37e:	e021      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	6838      	ldr	r0, [r7, #0]
 800e388:	f000 fe9a 	bl	800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>
 800e38c:	4603      	mov	r3, r0
 800e38e:	e019      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	6838      	ldr	r0, [r7, #0]
 800e398:	f000 fe9f 	bl	800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>
 800e39c:	4603      	mov	r3, r0
 800e39e:	e011      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	bf14      	ite	ne
 800e3a8:	2301      	movne	r3, #1
 800e3aa:	2300      	moveq	r3, #0
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6838      	ldr	r0, [r7, #0]
 800e3b2:	f000 fe9f 	bl	800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	e004      	b.n	800e3c4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_11RawComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitNull();
 800e3ba:	6838      	ldr	r0, [r7, #0]
 800e3bc:	f7ff fc58 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	bf00      	nop
  }
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7f3 ff57 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	3b02      	subs	r3, #2
 800e3e0:	2b3e      	cmp	r3, #62	; 0x3e
 800e3e2:	f200 80cc 	bhi.w	800e57e <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1b2>
 800e3e6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x20>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e531 	.word	0x0800e531
 800e3f0:	0800e531 	.word	0x0800e531
 800e3f4:	0800e51d 	.word	0x0800e51d
 800e3f8:	0800e51d 	.word	0x0800e51d
 800e3fc:	0800e565 	.word	0x0800e565
 800e400:	0800e57f 	.word	0x0800e57f
 800e404:	0800e555 	.word	0x0800e555
 800e408:	0800e57f 	.word	0x0800e57f
 800e40c:	0800e545 	.word	0x0800e545
 800e410:	0800e57f 	.word	0x0800e57f
 800e414:	0800e4e9 	.word	0x0800e4e9
 800e418:	0800e57f 	.word	0x0800e57f
 800e41c:	0800e57f 	.word	0x0800e57f
 800e420:	0800e57f 	.word	0x0800e57f
 800e424:	0800e57f 	.word	0x0800e57f
 800e428:	0800e57f 	.word	0x0800e57f
 800e42c:	0800e57f 	.word	0x0800e57f
 800e430:	0800e57f 	.word	0x0800e57f
 800e434:	0800e57f 	.word	0x0800e57f
 800e438:	0800e57f 	.word	0x0800e57f
 800e43c:	0800e57f 	.word	0x0800e57f
 800e440:	0800e57f 	.word	0x0800e57f
 800e444:	0800e57f 	.word	0x0800e57f
 800e448:	0800e57f 	.word	0x0800e57f
 800e44c:	0800e57f 	.word	0x0800e57f
 800e450:	0800e57f 	.word	0x0800e57f
 800e454:	0800e57f 	.word	0x0800e57f
 800e458:	0800e57f 	.word	0x0800e57f
 800e45c:	0800e57f 	.word	0x0800e57f
 800e460:	0800e57f 	.word	0x0800e57f
 800e464:	0800e50f 	.word	0x0800e50f
 800e468:	0800e57f 	.word	0x0800e57f
 800e46c:	0800e57f 	.word	0x0800e57f
 800e470:	0800e57f 	.word	0x0800e57f
 800e474:	0800e57f 	.word	0x0800e57f
 800e478:	0800e57f 	.word	0x0800e57f
 800e47c:	0800e57f 	.word	0x0800e57f
 800e480:	0800e57f 	.word	0x0800e57f
 800e484:	0800e57f 	.word	0x0800e57f
 800e488:	0800e57f 	.word	0x0800e57f
 800e48c:	0800e57f 	.word	0x0800e57f
 800e490:	0800e57f 	.word	0x0800e57f
 800e494:	0800e57f 	.word	0x0800e57f
 800e498:	0800e57f 	.word	0x0800e57f
 800e49c:	0800e57f 	.word	0x0800e57f
 800e4a0:	0800e57f 	.word	0x0800e57f
 800e4a4:	0800e57f 	.word	0x0800e57f
 800e4a8:	0800e57f 	.word	0x0800e57f
 800e4ac:	0800e57f 	.word	0x0800e57f
 800e4b0:	0800e57f 	.word	0x0800e57f
 800e4b4:	0800e57f 	.word	0x0800e57f
 800e4b8:	0800e57f 	.word	0x0800e57f
 800e4bc:	0800e57f 	.word	0x0800e57f
 800e4c0:	0800e57f 	.word	0x0800e57f
 800e4c4:	0800e57f 	.word	0x0800e57f
 800e4c8:	0800e57f 	.word	0x0800e57f
 800e4cc:	0800e57f 	.word	0x0800e57f
 800e4d0:	0800e57f 	.word	0x0800e57f
 800e4d4:	0800e57f 	.word	0x0800e57f
 800e4d8:	0800e57f 	.word	0x0800e57f
 800e4dc:	0800e57f 	.word	0x0800e57f
 800e4e0:	0800e57f 	.word	0x0800e57f
 800e4e4:	0800e501 	.word	0x0800e501
        return visitor.visitFloat(_content.asFloat);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	ed93 7b00 	vldr	d7, [r3]
 800e4ee:	eeb0 0a47 	vmov.f32	s0, s14
 800e4f2:	eef0 0a67 	vmov.f32	s1, s15
 800e4f6:	6838      	ldr	r0, [r7, #0]
 800e4f8:	f000 fe83 	bl	800f202 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE10visitFloatEd>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	e043      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4619      	mov	r1, r3
 800e504:	6838      	ldr	r0, [r7, #0]
 800e506:	f000 fe02 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e50a:	4603      	mov	r3, r0
 800e50c:	e03c      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4619      	mov	r1, r3
 800e512:	6838      	ldr	r0, [r7, #0]
 800e514:	f000 fdae 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e518:	4603      	mov	r3, r0
 800e51a:	e035      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800e524:	461a      	mov	r2, r3
 800e526:	6838      	ldr	r0, [r7, #0]
 800e528:	f000 fdb0 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800e52c:	4603      	mov	r3, r0
                                   _content.asString.size);
 800e52e:	e02b      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800e538:	461a      	mov	r2, r3
 800e53a:	6838      	ldr	r0, [r7, #0]
 800e53c:	f000 fdb3 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800e540:	4603      	mov	r3, r0
                                    _content.asString.size);
 800e542:	e021      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	6838      	ldr	r0, [r7, #0]
 800e54c:	f000 fe6a 	bl	800f224 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE18visitSignedIntegerEx>
 800e550:	4603      	mov	r3, r0
 800e552:	e019      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	6838      	ldr	r0, [r7, #0]
 800e55c:	f000 fe73 	bl	800f246 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE20visitUnsignedIntegerEy>
 800e560:	4603      	mov	r3, r0
 800e562:	e011      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bf14      	ite	ne
 800e56c:	2301      	movne	r3, #1
 800e56e:	2300      	moveq	r3, #0
 800e570:	b2db      	uxtb	r3, r3
 800e572:	4619      	mov	r1, r3
 800e574:	6838      	ldr	r0, [r7, #0]
 800e576:	f000 fe77 	bl	800f268 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE12visitBooleanEb>
 800e57a:	4603      	mov	r3, r0
 800e57c:	e004      	b.n	800e588 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIxvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800e57e:	6838      	ldr	r0, [r7, #0]
 800e580:	f7ff fb76 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e584:	4603      	mov	r3, r0
 800e586:	bf00      	nop
  }
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7f3 fe75 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	3b02      	subs	r3, #2
 800e5a4:	2b3e      	cmp	r3, #62	; 0x3e
 800e5a6:	f200 80cc 	bhi.w	800e742 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1b2>
 800e5aa:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x20>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e6f5 	.word	0x0800e6f5
 800e5b4:	0800e6f5 	.word	0x0800e6f5
 800e5b8:	0800e6e1 	.word	0x0800e6e1
 800e5bc:	0800e6e1 	.word	0x0800e6e1
 800e5c0:	0800e729 	.word	0x0800e729
 800e5c4:	0800e743 	.word	0x0800e743
 800e5c8:	0800e719 	.word	0x0800e719
 800e5cc:	0800e743 	.word	0x0800e743
 800e5d0:	0800e709 	.word	0x0800e709
 800e5d4:	0800e743 	.word	0x0800e743
 800e5d8:	0800e6ad 	.word	0x0800e6ad
 800e5dc:	0800e743 	.word	0x0800e743
 800e5e0:	0800e743 	.word	0x0800e743
 800e5e4:	0800e743 	.word	0x0800e743
 800e5e8:	0800e743 	.word	0x0800e743
 800e5ec:	0800e743 	.word	0x0800e743
 800e5f0:	0800e743 	.word	0x0800e743
 800e5f4:	0800e743 	.word	0x0800e743
 800e5f8:	0800e743 	.word	0x0800e743
 800e5fc:	0800e743 	.word	0x0800e743
 800e600:	0800e743 	.word	0x0800e743
 800e604:	0800e743 	.word	0x0800e743
 800e608:	0800e743 	.word	0x0800e743
 800e60c:	0800e743 	.word	0x0800e743
 800e610:	0800e743 	.word	0x0800e743
 800e614:	0800e743 	.word	0x0800e743
 800e618:	0800e743 	.word	0x0800e743
 800e61c:	0800e743 	.word	0x0800e743
 800e620:	0800e743 	.word	0x0800e743
 800e624:	0800e743 	.word	0x0800e743
 800e628:	0800e6d3 	.word	0x0800e6d3
 800e62c:	0800e743 	.word	0x0800e743
 800e630:	0800e743 	.word	0x0800e743
 800e634:	0800e743 	.word	0x0800e743
 800e638:	0800e743 	.word	0x0800e743
 800e63c:	0800e743 	.word	0x0800e743
 800e640:	0800e743 	.word	0x0800e743
 800e644:	0800e743 	.word	0x0800e743
 800e648:	0800e743 	.word	0x0800e743
 800e64c:	0800e743 	.word	0x0800e743
 800e650:	0800e743 	.word	0x0800e743
 800e654:	0800e743 	.word	0x0800e743
 800e658:	0800e743 	.word	0x0800e743
 800e65c:	0800e743 	.word	0x0800e743
 800e660:	0800e743 	.word	0x0800e743
 800e664:	0800e743 	.word	0x0800e743
 800e668:	0800e743 	.word	0x0800e743
 800e66c:	0800e743 	.word	0x0800e743
 800e670:	0800e743 	.word	0x0800e743
 800e674:	0800e743 	.word	0x0800e743
 800e678:	0800e743 	.word	0x0800e743
 800e67c:	0800e743 	.word	0x0800e743
 800e680:	0800e743 	.word	0x0800e743
 800e684:	0800e743 	.word	0x0800e743
 800e688:	0800e743 	.word	0x0800e743
 800e68c:	0800e743 	.word	0x0800e743
 800e690:	0800e743 	.word	0x0800e743
 800e694:	0800e743 	.word	0x0800e743
 800e698:	0800e743 	.word	0x0800e743
 800e69c:	0800e743 	.word	0x0800e743
 800e6a0:	0800e743 	.word	0x0800e743
 800e6a4:	0800e743 	.word	0x0800e743
 800e6a8:	0800e6c5 	.word	0x0800e6c5
        return visitor.visitFloat(_content.asFloat);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	ed93 7b00 	vldr	d7, [r3]
 800e6b2:	eeb0 0a47 	vmov.f32	s0, s14
 800e6b6:	eef0 0a67 	vmov.f32	s1, s15
 800e6ba:	6838      	ldr	r0, [r7, #0]
 800e6bc:	f000 fde5 	bl	800f28a <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE10visitFloatEd>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	e043      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6838      	ldr	r0, [r7, #0]
 800e6ca:	f000 fd20 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	e03c      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6838      	ldr	r0, [r7, #0]
 800e6d8:	f000 fccc 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	e035      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	6838      	ldr	r0, [r7, #0]
 800e6ec:	f000 fcce 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800e6f0:	4603      	mov	r3, r0
                                   _content.asString.size);
 800e6f2:	e02b      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6838      	ldr	r0, [r7, #0]
 800e700:	f000 fcd1 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800e704:	4603      	mov	r3, r0
                                    _content.asString.size);
 800e706:	e021      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	6838      	ldr	r0, [r7, #0]
 800e710:	f000 fdcc 	bl	800f2ac <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE18visitSignedIntegerEx>
 800e714:	4603      	mov	r3, r0
 800e716:	e019      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71e:	6838      	ldr	r0, [r7, #0]
 800e720:	f000 fdd5 	bl	800f2ce <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE20visitUnsignedIntegerEy>
 800e724:	4603      	mov	r3, r0
 800e726:	e011      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bf14      	ite	ne
 800e730:	2301      	movne	r3, #1
 800e732:	2300      	moveq	r3, #0
 800e734:	b2db      	uxtb	r3, r3
 800e736:	4619      	mov	r1, r3
 800e738:	6838      	ldr	r0, [r7, #0]
 800e73a:	f000 fdd9 	bl	800f2f0 <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE12visitBooleanEb>
 800e73e:	4603      	mov	r3, r0
 800e740:	e004      	b.n	800e74c <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIyvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800e742:	6838      	ldr	r0, [r7, #0]
 800e744:	f7ff fa94 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e748:	4603      	mov	r3, r0
 800e74a:	bf00      	nop
  }
 800e74c:	4618      	mov	r0, r3
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f3 fd93 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e764:	4603      	mov	r3, r0
 800e766:	3b02      	subs	r3, #2
 800e768:	2b3e      	cmp	r3, #62	; 0x3e
 800e76a:	f200 80cc 	bhi.w	800e906 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1b2>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x20>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e8b9 	.word	0x0800e8b9
 800e778:	0800e8b9 	.word	0x0800e8b9
 800e77c:	0800e8a5 	.word	0x0800e8a5
 800e780:	0800e8a5 	.word	0x0800e8a5
 800e784:	0800e8ed 	.word	0x0800e8ed
 800e788:	0800e907 	.word	0x0800e907
 800e78c:	0800e8dd 	.word	0x0800e8dd
 800e790:	0800e907 	.word	0x0800e907
 800e794:	0800e8cd 	.word	0x0800e8cd
 800e798:	0800e907 	.word	0x0800e907
 800e79c:	0800e871 	.word	0x0800e871
 800e7a0:	0800e907 	.word	0x0800e907
 800e7a4:	0800e907 	.word	0x0800e907
 800e7a8:	0800e907 	.word	0x0800e907
 800e7ac:	0800e907 	.word	0x0800e907
 800e7b0:	0800e907 	.word	0x0800e907
 800e7b4:	0800e907 	.word	0x0800e907
 800e7b8:	0800e907 	.word	0x0800e907
 800e7bc:	0800e907 	.word	0x0800e907
 800e7c0:	0800e907 	.word	0x0800e907
 800e7c4:	0800e907 	.word	0x0800e907
 800e7c8:	0800e907 	.word	0x0800e907
 800e7cc:	0800e907 	.word	0x0800e907
 800e7d0:	0800e907 	.word	0x0800e907
 800e7d4:	0800e907 	.word	0x0800e907
 800e7d8:	0800e907 	.word	0x0800e907
 800e7dc:	0800e907 	.word	0x0800e907
 800e7e0:	0800e907 	.word	0x0800e907
 800e7e4:	0800e907 	.word	0x0800e907
 800e7e8:	0800e907 	.word	0x0800e907
 800e7ec:	0800e897 	.word	0x0800e897
 800e7f0:	0800e907 	.word	0x0800e907
 800e7f4:	0800e907 	.word	0x0800e907
 800e7f8:	0800e907 	.word	0x0800e907
 800e7fc:	0800e907 	.word	0x0800e907
 800e800:	0800e907 	.word	0x0800e907
 800e804:	0800e907 	.word	0x0800e907
 800e808:	0800e907 	.word	0x0800e907
 800e80c:	0800e907 	.word	0x0800e907
 800e810:	0800e907 	.word	0x0800e907
 800e814:	0800e907 	.word	0x0800e907
 800e818:	0800e907 	.word	0x0800e907
 800e81c:	0800e907 	.word	0x0800e907
 800e820:	0800e907 	.word	0x0800e907
 800e824:	0800e907 	.word	0x0800e907
 800e828:	0800e907 	.word	0x0800e907
 800e82c:	0800e907 	.word	0x0800e907
 800e830:	0800e907 	.word	0x0800e907
 800e834:	0800e907 	.word	0x0800e907
 800e838:	0800e907 	.word	0x0800e907
 800e83c:	0800e907 	.word	0x0800e907
 800e840:	0800e907 	.word	0x0800e907
 800e844:	0800e907 	.word	0x0800e907
 800e848:	0800e907 	.word	0x0800e907
 800e84c:	0800e907 	.word	0x0800e907
 800e850:	0800e907 	.word	0x0800e907
 800e854:	0800e907 	.word	0x0800e907
 800e858:	0800e907 	.word	0x0800e907
 800e85c:	0800e907 	.word	0x0800e907
 800e860:	0800e907 	.word	0x0800e907
 800e864:	0800e907 	.word	0x0800e907
 800e868:	0800e907 	.word	0x0800e907
 800e86c:	0800e889 	.word	0x0800e889
        return visitor.visitFloat(_content.asFloat);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	ed93 7b00 	vldr	d7, [r3]
 800e876:	eeb0 0a47 	vmov.f32	s0, s14
 800e87a:	eef0 0a67 	vmov.f32	s1, s15
 800e87e:	6838      	ldr	r0, [r7, #0]
 800e880:	f000 fd47 	bl	800f312 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE10visitFloatEd>
 800e884:	4603      	mov	r3, r0
 800e886:	e043      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4619      	mov	r1, r3
 800e88c:	6838      	ldr	r0, [r7, #0]
 800e88e:	f000 fc3e 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e892:	4603      	mov	r3, r0
 800e894:	e03c      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4619      	mov	r1, r3
 800e89a:	6838      	ldr	r0, [r7, #0]
 800e89c:	f000 fbea 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	e035      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6838      	ldr	r0, [r7, #0]
 800e8b0:	f000 fbec 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800e8b4:	4603      	mov	r3, r0
                                   _content.asString.size);
 800e8b6:	e02b      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6838      	ldr	r0, [r7, #0]
 800e8c4:	f000 fbef 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800e8c8:	4603      	mov	r3, r0
                                    _content.asString.size);
 800e8ca:	e021      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	f000 fd2e 	bl	800f334 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE18visitSignedIntegerEx>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	e019      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	6838      	ldr	r0, [r7, #0]
 800e8e4:	f000 fd37 	bl	800f356 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE20visitUnsignedIntegerEy>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	e011      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bf14      	ite	ne
 800e8f4:	2301      	movne	r3, #1
 800e8f6:	2300      	moveq	r3, #0
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6838      	ldr	r0, [r7, #0]
 800e8fe:	f000 fd3b 	bl	800f378 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE12visitBooleanEb>
 800e902:	4603      	mov	r3, r0
 800e904:	e004      	b.n	800e910 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800e906:	6838      	ldr	r0, [r7, #0]
 800e908:	f7ff f9b2 	bl	800dc70 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e90c:	4603      	mov	r3, r0
 800e90e:	bf00      	nop
  }
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7f3 fcb1 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800e928:	4603      	mov	r3, r0
 800e92a:	3b02      	subs	r3, #2
 800e92c:	2b3e      	cmp	r3, #62	; 0x3e
 800e92e:	f200 80cc 	bhi.w	800eaca <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1b2>
 800e932:	a201      	add	r2, pc, #4	; (adr r2, 800e938 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x20>)
 800e934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e938:	0800ea7d 	.word	0x0800ea7d
 800e93c:	0800ea7d 	.word	0x0800ea7d
 800e940:	0800ea69 	.word	0x0800ea69
 800e944:	0800ea69 	.word	0x0800ea69
 800e948:	0800eab1 	.word	0x0800eab1
 800e94c:	0800eacb 	.word	0x0800eacb
 800e950:	0800eaa1 	.word	0x0800eaa1
 800e954:	0800eacb 	.word	0x0800eacb
 800e958:	0800ea91 	.word	0x0800ea91
 800e95c:	0800eacb 	.word	0x0800eacb
 800e960:	0800ea35 	.word	0x0800ea35
 800e964:	0800eacb 	.word	0x0800eacb
 800e968:	0800eacb 	.word	0x0800eacb
 800e96c:	0800eacb 	.word	0x0800eacb
 800e970:	0800eacb 	.word	0x0800eacb
 800e974:	0800eacb 	.word	0x0800eacb
 800e978:	0800eacb 	.word	0x0800eacb
 800e97c:	0800eacb 	.word	0x0800eacb
 800e980:	0800eacb 	.word	0x0800eacb
 800e984:	0800eacb 	.word	0x0800eacb
 800e988:	0800eacb 	.word	0x0800eacb
 800e98c:	0800eacb 	.word	0x0800eacb
 800e990:	0800eacb 	.word	0x0800eacb
 800e994:	0800eacb 	.word	0x0800eacb
 800e998:	0800eacb 	.word	0x0800eacb
 800e99c:	0800eacb 	.word	0x0800eacb
 800e9a0:	0800eacb 	.word	0x0800eacb
 800e9a4:	0800eacb 	.word	0x0800eacb
 800e9a8:	0800eacb 	.word	0x0800eacb
 800e9ac:	0800eacb 	.word	0x0800eacb
 800e9b0:	0800ea5b 	.word	0x0800ea5b
 800e9b4:	0800eacb 	.word	0x0800eacb
 800e9b8:	0800eacb 	.word	0x0800eacb
 800e9bc:	0800eacb 	.word	0x0800eacb
 800e9c0:	0800eacb 	.word	0x0800eacb
 800e9c4:	0800eacb 	.word	0x0800eacb
 800e9c8:	0800eacb 	.word	0x0800eacb
 800e9cc:	0800eacb 	.word	0x0800eacb
 800e9d0:	0800eacb 	.word	0x0800eacb
 800e9d4:	0800eacb 	.word	0x0800eacb
 800e9d8:	0800eacb 	.word	0x0800eacb
 800e9dc:	0800eacb 	.word	0x0800eacb
 800e9e0:	0800eacb 	.word	0x0800eacb
 800e9e4:	0800eacb 	.word	0x0800eacb
 800e9e8:	0800eacb 	.word	0x0800eacb
 800e9ec:	0800eacb 	.word	0x0800eacb
 800e9f0:	0800eacb 	.word	0x0800eacb
 800e9f4:	0800eacb 	.word	0x0800eacb
 800e9f8:	0800eacb 	.word	0x0800eacb
 800e9fc:	0800eacb 	.word	0x0800eacb
 800ea00:	0800eacb 	.word	0x0800eacb
 800ea04:	0800eacb 	.word	0x0800eacb
 800ea08:	0800eacb 	.word	0x0800eacb
 800ea0c:	0800eacb 	.word	0x0800eacb
 800ea10:	0800eacb 	.word	0x0800eacb
 800ea14:	0800eacb 	.word	0x0800eacb
 800ea18:	0800eacb 	.word	0x0800eacb
 800ea1c:	0800eacb 	.word	0x0800eacb
 800ea20:	0800eacb 	.word	0x0800eacb
 800ea24:	0800eacb 	.word	0x0800eacb
 800ea28:	0800eacb 	.word	0x0800eacb
 800ea2c:	0800eacb 	.word	0x0800eacb
 800ea30:	0800ea4d 	.word	0x0800ea4d
        return visitor.visitFloat(_content.asFloat);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	ed93 7b00 	vldr	d7, [r3]
 800ea3a:	eeb0 0a47 	vmov.f32	s0, s14
 800ea3e:	eef0 0a67 	vmov.f32	s1, s15
 800ea42:	6838      	ldr	r0, [r7, #0]
 800ea44:	f000 fb09 	bl	800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	e043      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitArray(_content.asCollection);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6838      	ldr	r0, [r7, #0]
 800ea52:	f000 fb5c 	bl	800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800ea56:	4603      	mov	r3, r0
 800ea58:	e03c      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitObject(_content.asCollection);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	6838      	ldr	r0, [r7, #0]
 800ea60:	f000 fb08 	bl	800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800ea64:	4603      	mov	r3, r0
 800ea66:	e035      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitString(_content.asString.data,
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800ea70:	461a      	mov	r2, r3
 800ea72:	6838      	ldr	r0, [r7, #0]
 800ea74:	f000 fb0a 	bl	800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800ea78:	4603      	mov	r3, r0
                                   _content.asString.size);
 800ea7a:	e02b      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitRawJson(_content.asString.data,
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800ea84:	461a      	mov	r2, r3
 800ea86:	6838      	ldr	r0, [r7, #0]
 800ea88:	f000 fb0d 	bl	800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800ea8c:	4603      	mov	r3, r0
                                    _content.asString.size);
 800ea8e:	e021      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	6838      	ldr	r0, [r7, #0]
 800ea98:	f000 fb12 	bl	800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	e019      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	6838      	ldr	r0, [r7, #0]
 800eaa8:	f000 fb17 	bl	800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>
 800eaac:	4603      	mov	r3, r0
 800eaae:	e011      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bf14      	ite	ne
 800eab8:	2301      	movne	r3, #1
 800eaba:	2300      	moveq	r3, #0
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	4619      	mov	r1, r3
 800eac0:	6838      	ldr	r0, [r7, #0]
 800eac2:	f000 fb17 	bl	800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>
 800eac6:	4603      	mov	r3, r0
 800eac8:	e004      	b.n	800ead4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_12NullComparerEEENT_11result_typeERS5_+0x1bc>
        return visitor.visitNull();
 800eaca:	6838      	ldr	r0, [r7, #0]
 800eacc:	f7f3 ff4e 	bl	800296c <_ZN11ArduinoJson7V6211HB6detail12NullComparer9visitNullEv>
 800ead0:	4603      	mov	r3, r0
 800ead2:	bf00      	nop
  }
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <_ZN11ArduinoJson7V6211HB6detail10alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 800eae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaea:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800eaee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eaf2:	ec43 2b17 	vmov	d7, r2, r3
}
 800eaf6:	eeb0 0a47 	vmov.f32	s0, s14
 800eafa:	eef0 0a67 	vmov.f32	s1, s15
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <_ZN11ArduinoJson7V6211HB6detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : _ptr(ptr) {}
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	683a      	ldr	r2, [r7, #0]
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr

0800eb26 <_ZN11ArduinoJson7V6211HB6detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800eb26:	b480      	push	{r7}
 800eb28:	b083      	sub	sp, #12
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
  return *p;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	ec43 2b17 	vmov	d7, r2, r3
}
 800eb38:	eeb0 0a47 	vmov.f32	s0, s14
 800eb3c:	eef0 0a67 	vmov.f32	s1, s15
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <_ZN11ArduinoJson7V6211HB6detail18SizedStringAdapterIPKcvE5adaptES4_j>:
  static AdaptedString adapt(const TChar* p, size_t n) {
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	60b9      	str	r1, [r7, #8]
 800eb54:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7f2 ffd8 	bl	8001b10 <_ZN11ArduinoJson7V6211HB6detail14SizedRamStringC1EPKcj>
  }
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZN11ArduinoJson7V6211HB6detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800eb68:	b590      	push	{r4, r7, lr}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	f107 0408 	add.w	r4, r7, #8
 800eb72:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	617b      	str	r3, [r7, #20]
 800eb7e:	e00d      	b.n	800eb9c <_ZN11ArduinoJson7V6211HB6detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj+0x34>
    p[i] = s[i];
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	18d4      	adds	r4, r2, r3
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	6979      	ldr	r1, [r7, #20]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7f2 ffef 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 800eb92:	4603      	mov	r3, r0
 800eb94:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	617b      	str	r3, [r7, #20]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d3ed      	bcc.n	800eb80 <_ZN11ArduinoJson7V6211HB6detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj+0x18>
  }
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop
 800eba8:	371c      	adds	r7, #28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd90      	pop	{r4, r7, pc}

0800ebae <_ZN11ArduinoJson7V6211HB9ConverterIdvE6toJsonEdNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b086      	sub	sp, #24
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	ed87 0b02 	vstr	d0, [r7, #8]
 800ebb8:	463b      	mov	r3, r7
 800ebba:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebbe:	463b      	mov	r3, r7
 800ebc0:	613b      	str	r3, [r7, #16]
  FORCE_INLINE detail::MemoryPool* getPool() const {
    return _pool;
  }

  FORCE_INLINE detail::VariantData* getData() const {
    return _data;
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	bf00      	nop
    auto data = getData(dst);
 800ebc8:	617b      	str	r3, [r7, #20]
    if (data)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d004      	beq.n	800ebda <_ZN11ArduinoJson7V6211HB9ConverterIdvE6toJsonEdNS0_11JsonVariantE+0x2c>
      data->setFloat(static_cast<JsonFloat>(src));
 800ebd0:	ed97 0b02 	vldr	d0, [r7, #8]
 800ebd4:	6978      	ldr	r0, [r7, #20]
 800ebd6:	f7f3 faee 	bl	80021b6 <_ZN11ArduinoJson7V6211HB6detail11VariantData8setFloatEd>
  }
 800ebda:	bf00      	nop
 800ebdc:	3718      	adds	r7, #24
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <_ZN11ArduinoJson7V6211HB6detail8ComparerINS0_18StaticJsonDocumentILj1024EEEvEC1ERKS4_>:
  explicit Comparer(const T& value)
 800ebe2:	b590      	push	{r4, r7, lr}
 800ebe4:	b085      	sub	sp, #20
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	6039      	str	r1, [r7, #0]
      : VariantComparer(VariantAttorney::getData(value)) {}
 800ebec:	687c      	ldr	r4, [r7, #4]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f3 fd64 	bl	80026c2 <_ZNK11ArduinoJson7V6211HB12JsonDocument7getDataEv>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	bf00      	nop
 800ebfe:	4619      	mov	r1, r3
 800ec00:	4620      	mov	r0, r4
 800ec02:	f7f4 f891 	bl	8002d28 <_ZN11ArduinoJson7V6211HB6detail15VariantComparerC1EPKNS1_11VariantDataE>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd90      	pop	{r4, r7, pc}

0800ec10 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeEPKNS1_11VariantDataERS7_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d005      	beq.n	800ec2c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeEPKNS1_11VariantDataERS7_+0x1c>
    return var->accept(visitor);
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fbc4 	bl	800f3b0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	e005      	b.n	800ec38 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeEPKNS1_11VariantDataERS7_+0x28>
    return visitor.visitNull();
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f4 f944 	bl	8002ebc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer9visitNullEv>
 800ec34:	4603      	mov	r3, r0
 800ec36:	bf00      	nop
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_ZN11ArduinoJson7V6211HB6detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<typename remove_reference<TInput>::type> makeReader(TInput&& input) {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  return Reader<typename remove_reference<TInput>::type>{
      detail::forward<TInput>(input)};
 800ec4a:	6838      	ldr	r0, [r7, #0]
 800ec4c:	f7fe fe09 	bl	800d862 <_ZN11ArduinoJson7V6211HB6detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800ec50:	4603      	mov	r3, r0
 800ec52:	4619      	mov	r1, r3
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 fc95 	bl	800f584 <_ZN11ArduinoJson7V6211HB6detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>
}
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <_ZN11ArduinoJson7V6211HB6detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>:
#include "../StringStorage/StringMover.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
StringCopier makeStringStorage(TInput&, MemoryPool* pool) {
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b084      	sub	sp, #16
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	60f8      	str	r0, [r7, #12]
 800ec6a:	60b9      	str	r1, [r7, #8]
 800ec6c:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(pool != 0);
  return StringCopier(pool);
 800ec6e:	6879      	ldr	r1, [r7, #4]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f7f4 fc11 	bl	8003498 <_ZN11ArduinoJson7V6211HB6detail12StringCopierC1EPNS1_10MemoryPoolE>
}
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <_ZN11ArduinoJson7V6211HB6detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool* pool,
 800ec7e:	b590      	push	{r4, r7, lr}
 800ec80:	b089      	sub	sp, #36	; 0x24
 800ec82:	af04      	add	r7, sp, #16
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	4639      	mov	r1, r7
 800ec8a:	e881 000c 	stmia.w	r1, {r2, r3}
  return TDeserializer<TReader, TWriter>(pool, reader, writer);
 800ec8e:	466c      	mov	r4, sp
 800ec90:	f107 0320 	add.w	r3, r7, #32
 800ec94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	cb0c      	ldmia	r3, {r2, r3}
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 fc87 	bl	800f5b4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>
}
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd90      	pop	{r4, r7, pc}

0800ecae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 800ecae:	b590      	push	{r4, r7, lr}
 800ecb0:	b089      	sub	sp, #36	; 0x24
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	60f8      	str	r0, [r7, #12]
 800ecb6:	60b9      	str	r1, [r7, #8]
 800ecb8:	713a      	strb	r2, [r7, #4]
 800ecba:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 800ecbc:	783b      	ldrb	r3, [r7, #0]
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	68b9      	ldr	r1, [r7, #8]
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f000 fc98 	bl	800f5f8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	75fb      	strb	r3, [r7, #23]
    if (!err && _latch.last() != 0 && !variant.isEnclosed()) {
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d112      	bne.n	800ecf8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	3314      	adds	r3, #20
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fd7c 	bl	800f7d4 <_ZNK11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00a      	beq.n	800ecf8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ece2:	68b8      	ldr	r0, [r7, #8]
 800ece4:	f7f3 fa47 	bl	8002176 <_ZNK11ArduinoJson7V6211HB6detail11VariantData10isEnclosedEv>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f083 0301 	eor.w	r3, r3, #1
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e000      	b.n	800ecfa <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x60>
      return DeserializationError::InvalidInput;
 800ecfe:	f107 0318 	add.w	r3, r7, #24
 800ed02:	2103      	movs	r1, #3
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f4 fb36 	bl	8003376 <_ZN11ArduinoJson7V6211HB20DeserializationErrorC1ENS1_4CodeE>
 800ed0a:	7e3b      	ldrb	r3, [r7, #24]
 800ed0c:	e007      	b.n	800ed1e <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x70>
    return err;
 800ed0e:	7dfa      	ldrb	r2, [r7, #23]
 800ed10:	f107 031c 	add.w	r3, r7, #28
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f4 fb2d 	bl	8003376 <_ZN11ArduinoJson7V6211HB20DeserializationErrorC1ENS1_4CodeE>
 800ed1c:	7f3b      	ldrb	r3, [r7, #28]
  }
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3724      	adds	r7, #36	; 0x24
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd90      	pop	{r4, r7, pc}

0800ed26 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5adaptERKS8_>:
    typename enable_if<
        (string_traits<T>::has_cstr || string_traits<T>::has_data) &&
        (string_traits<T>::has_length || string_traits<T>::has_size)>::type> {
  typedef SizedRamString AdaptedString;

  static AdaptedString adapt(const T& s) {
 800ed26:	b590      	push	{r4, r7, lr}
 800ed28:	b083      	sub	sp, #12
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	6039      	str	r1, [r7, #0]
    return AdaptedString(get_data(s), get_size(s));
 800ed30:	6838      	ldr	r0, [r7, #0]
 800ed32:	f000 fd5b 	bl	800f7ec <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8get_dataIS8_EENS1_9enable_ifIXsrNS1_13string_traitsIT_EE8has_dataEPKcE4typeERKSD_>
 800ed36:	4604      	mov	r4, r0
 800ed38:	6838      	ldr	r0, [r7, #0]
 800ed3a:	f000 fd63 	bl	800f804 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8get_sizeIS8_EENS1_9enable_ifIXsrNS1_13string_traitsIT_EE8has_sizeEjE4typeERKSD_>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	461a      	mov	r2, r3
 800ed42:	4621      	mov	r1, r4
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7f2 fee3 	bl	8001b10 <_ZN11ArduinoJson7V6211HB6detail14SizedRamStringC1EPKcj>
  }
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd90      	pop	{r4, r7, pc}

0800ed52 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b086      	sub	sp, #24
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	60f8      	str	r0, [r7, #12]
 800ed5a:	1d3b      	adds	r3, r7, #4
 800ed5c:	e883 0006 	stmia.w	r3, {r1, r2}
  VariantSlot* slot = getSlot(key);
 800ed60:	1d3b      	adds	r3, r7, #4
 800ed62:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 fd58 	bl	800f81c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_>
 800ed6c:	6178      	str	r0, [r7, #20]
  return slot ? slot->data() : 0;
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d004      	beq.n	800ed7e <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_+0x2c>
 800ed74:	6978      	ldr	r0, [r7, #20]
 800ed76:	f7f2 ffd0 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	e000      	b.n	800ed80 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_+0x2e>
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZN11ArduinoJson7V6211HB9ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
    T result; // Error here? See https://arduinojson.org/v6/non-default-constructible/
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f008 f97e 	bl	8017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v6/unsupported-as/
 800ed98:	6879      	ldr	r1, [r7, #4]
 800ed9a:	6838      	ldr	r0, [r7, #0]
 800ed9c:	f7f3 fdb8 	bl	8002910 <_ZN11ArduinoJson7V6211HB15convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 800eda0:	bf00      	nop
  }
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 800edb4:	6839      	ldr	r1, [r7, #0]
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fd63 	bl	800f882 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 800edbc:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d004      	beq.n	800edce <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x24>
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f7f2 ffa8 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 800edca:	4603      	mov	r3, r0
 800edcc:	e000      	b.n	800edd0 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x26>
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f3 fa51 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800ede8:	4603      	mov	r3, r0
 800edea:	3b02      	subs	r3, #2
 800edec:	2b3e      	cmp	r3, #62	; 0x3e
 800edee:	f200 80d2 	bhi.w	800ef96 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1be>
 800edf2:	a201      	add	r2, pc, #4	; (adr r2, 800edf8 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x20>)
 800edf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf8:	0800ef43 	.word	0x0800ef43
 800edfc:	0800ef43 	.word	0x0800ef43
 800ee00:	0800ef2f 	.word	0x0800ef2f
 800ee04:	0800ef2f 	.word	0x0800ef2f
 800ee08:	0800ef7b 	.word	0x0800ef7b
 800ee0c:	0800ef97 	.word	0x0800ef97
 800ee10:	0800ef69 	.word	0x0800ef69
 800ee14:	0800ef97 	.word	0x0800ef97
 800ee18:	0800ef57 	.word	0x0800ef57
 800ee1c:	0800ef97 	.word	0x0800ef97
 800ee20:	0800eef5 	.word	0x0800eef5
 800ee24:	0800ef97 	.word	0x0800ef97
 800ee28:	0800ef97 	.word	0x0800ef97
 800ee2c:	0800ef97 	.word	0x0800ef97
 800ee30:	0800ef97 	.word	0x0800ef97
 800ee34:	0800ef97 	.word	0x0800ef97
 800ee38:	0800ef97 	.word	0x0800ef97
 800ee3c:	0800ef97 	.word	0x0800ef97
 800ee40:	0800ef97 	.word	0x0800ef97
 800ee44:	0800ef97 	.word	0x0800ef97
 800ee48:	0800ef97 	.word	0x0800ef97
 800ee4c:	0800ef97 	.word	0x0800ef97
 800ee50:	0800ef97 	.word	0x0800ef97
 800ee54:	0800ef97 	.word	0x0800ef97
 800ee58:	0800ef97 	.word	0x0800ef97
 800ee5c:	0800ef97 	.word	0x0800ef97
 800ee60:	0800ef97 	.word	0x0800ef97
 800ee64:	0800ef97 	.word	0x0800ef97
 800ee68:	0800ef97 	.word	0x0800ef97
 800ee6c:	0800ef97 	.word	0x0800ef97
 800ee70:	0800ef1f 	.word	0x0800ef1f
 800ee74:	0800ef97 	.word	0x0800ef97
 800ee78:	0800ef97 	.word	0x0800ef97
 800ee7c:	0800ef97 	.word	0x0800ef97
 800ee80:	0800ef97 	.word	0x0800ef97
 800ee84:	0800ef97 	.word	0x0800ef97
 800ee88:	0800ef97 	.word	0x0800ef97
 800ee8c:	0800ef97 	.word	0x0800ef97
 800ee90:	0800ef97 	.word	0x0800ef97
 800ee94:	0800ef97 	.word	0x0800ef97
 800ee98:	0800ef97 	.word	0x0800ef97
 800ee9c:	0800ef97 	.word	0x0800ef97
 800eea0:	0800ef97 	.word	0x0800ef97
 800eea4:	0800ef97 	.word	0x0800ef97
 800eea8:	0800ef97 	.word	0x0800ef97
 800eeac:	0800ef97 	.word	0x0800ef97
 800eeb0:	0800ef97 	.word	0x0800ef97
 800eeb4:	0800ef97 	.word	0x0800ef97
 800eeb8:	0800ef97 	.word	0x0800ef97
 800eebc:	0800ef97 	.word	0x0800ef97
 800eec0:	0800ef97 	.word	0x0800ef97
 800eec4:	0800ef97 	.word	0x0800ef97
 800eec8:	0800ef97 	.word	0x0800ef97
 800eecc:	0800ef97 	.word	0x0800ef97
 800eed0:	0800ef97 	.word	0x0800ef97
 800eed4:	0800ef97 	.word	0x0800ef97
 800eed8:	0800ef97 	.word	0x0800ef97
 800eedc:	0800ef97 	.word	0x0800ef97
 800eee0:	0800ef97 	.word	0x0800ef97
 800eee4:	0800ef97 	.word	0x0800ef97
 800eee8:	0800ef97 	.word	0x0800ef97
 800eeec:	0800ef97 	.word	0x0800ef97
 800eef0:	0800ef0f 	.word	0x0800ef0f
        return visitor.visitFloat(_content.asFloat);
 800eef4:	683a      	ldr	r2, [r7, #0]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	ed93 7b00 	vldr	d7, [r3]
 800eefc:	eeb0 0a47 	vmov.f32	s0, s14
 800ef00:	eef0 0a67 	vmov.f32	s1, s15
 800ef04:	4610      	mov	r0, r2
 800ef06:	f7f3 ff4a 	bl	8002d9e <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitFloatEd>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	e049      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitArray(_content.asCollection);
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	4611      	mov	r1, r2
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7f3 ff16 	bl	8002d46 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitArrayERKNS1_14CollectionDataE>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	e041      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitObject(_content.asCollection);
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	4611      	mov	r1, r2
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f3 ff24 	bl	8002d72 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitObjectERKNS1_14CollectionDataE>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	e039      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitString(_content.asString.data,
 800ef2e:	6838      	ldr	r0, [r7, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800ef38:	461a      	mov	r2, r3
 800ef3a:	f7f3 ff48 	bl	8002dce <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitStringEPKcj>
 800ef3e:	4603      	mov	r3, r0
                                   _content.asString.size);
 800ef40:	e02f      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitRawJson(_content.asString.data,
 800ef42:	6838      	ldr	r0, [r7, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	f7f3 ff55 	bl	8002dfc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitRawJsonEPKcj>
 800ef52:	4603      	mov	r3, r0
                                    _content.asString.size);
 800ef54:	e025      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	4608      	mov	r0, r1
 800ef60:	f7f3 ff64 	bl	8002e2c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer18visitSignedIntegerEx>
 800ef64:	4603      	mov	r3, r0
 800ef66:	e01c      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	4608      	mov	r0, r1
 800ef72:	f7f3 ff73 	bl	8002e5c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer20visitUnsignedIntegerEy>
 800ef76:	4603      	mov	r3, r0
 800ef78:	e013      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800ef7a:	683a      	ldr	r2, [r7, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	bf14      	ite	ne
 800ef84:	2301      	movne	r3, #1
 800ef86:	2300      	moveq	r3, #0
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	4610      	mov	r0, r2
 800ef8e:	f7f3 ff7d 	bl	8002e8c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitBooleanEb>
 800ef92:	4603      	mov	r3, r0
 800ef94:	e005      	b.n	800efa2 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_16JsonVariantConstEvEEEENT_11result_typeERS7_+0x1ca>
        return visitor.visitNull();
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f3 ff8f 	bl	8002ebc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer9visitNullEv>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	bf00      	nop
  }
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop

0800efac <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	4638      	mov	r0, r7
 800efb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (key.isNull())
 800efba:	463b      	mov	r3, r7
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7f2 fdba 	bl	8001b36 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString6isNullEv>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x20>
    return 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	e01c      	b.n	800f006 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x5a>
  VariantSlot* slot = _head;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	617b      	str	r3, [r7, #20]
  while (slot) {
 800efd2:	e012      	b.n	800effa <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x4e>
    if (stringEquals(key, adaptString(slot->key())))
 800efd4:	6978      	ldr	r0, [r7, #20]
 800efd6:	f7f2 ff2a 	bl	8001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>
 800efda:	4603      	mov	r3, r0
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fd fd3e 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800efe2:	4603      	mov	r3, r0
 800efe4:	463a      	mov	r2, r7
 800efe6:	ca07      	ldmia	r2, {r0, r1, r2}
 800efe8:	f000 fc7a 	bl	800f8e0 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d107      	bne.n	800f002 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x56>
    slot = slot->next();
 800eff2:	6978      	ldr	r0, [r7, #20]
 800eff4:	f7f2 fea7 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 800eff8:	6178      	str	r0, [r7, #20]
  while (slot) {
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e9      	bne.n	800efd4 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x28>
 800f000:	e000      	b.n	800f004 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_17JsonStringAdapterEEEPNS1_11VariantSlotET_+0x58>
      break;
 800f002:	bf00      	nop
  return slot;
 800f004:	697b      	ldr	r3, [r7, #20]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3718      	adds	r7, #24
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  JsonSerializer(TWriter writer) : _formatter(writer) {}
 800f00e:	b580      	push	{r7, lr}
 800f010:	b082      	sub	sp, #8
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	6039      	str	r1, [r7, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f000 fc9b 	bl	800f958 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x1c>
    return var->accept(visitor);
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 fc9a 	bl	800f978 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
 800f044:	4603      	mov	r3, r0
 800f046:	e004      	b.n	800f052 <_ZN11ArduinoJson7V6211HB6detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x26>
    return visitor.visitNull();
 800f048:	6838      	ldr	r0, [r7, #0]
 800f04a:	f000 fd9f 	bl	800fb8c <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800f04e:	4603      	mov	r3, r0
 800f050:	bf00      	nop
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitFloatEd>:
  TResult visitFloat(JsonFloat) {
 800f05a:	b480      	push	{r7}
 800f05c:	b085      	sub	sp, #20
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	ed87 0b00 	vstr	d0, [r7]
    return TResult();
 800f066:	2300      	movs	r3, #0
  }
 800f068:	4618      	mov	r0, r3
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>:

  TResult visitObject(const CollectionData&) {
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
    return TResult();
 800f07e:	2300      	movs	r3, #0
  }
 800f080:	4618      	mov	r0, r3
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>:

  TResult visitRawJson(const char*, size_t) {
    return TResult();
  }

  TResult visitString(const char*, size_t) {
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
    return TResult();
 800f098:	2300      	movs	r3, #0
  }
 800f09a:	4618      	mov	r0, r3
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>:
  TResult visitRawJson(const char*, size_t) {
 800f0a6:	b480      	push	{r7}
 800f0a8:	b085      	sub	sp, #20
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	60b9      	str	r1, [r7, #8]
 800f0b0:	607a      	str	r2, [r7, #4]
    return TResult();
 800f0b2:	2300      	movs	r3, #0
  }
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE18visitSignedIntegerEx>:
  TResult visitSignedInteger(JsonInteger) {
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	e9c7 2300 	strd	r2, r3, [r7]
    return TResult();
 800f0cc:	2300      	movs	r3, #0
  }
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr

0800f0da <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE20visitUnsignedIntegerEy>:
  TResult visitUnsignedInteger(JsonUInt) {
 800f0da:	b480      	push	{r7}
 800f0dc:	b085      	sub	sp, #20
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	60f8      	str	r0, [r7, #12]
 800f0e2:	e9c7 2300 	strd	r2, r3, [r7]
    return TResult();
 800f0e6:	2300      	movs	r3, #0
  }
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3714      	adds	r7, #20
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE12visitBooleanEb>:
  TResult visitBoolean(bool) {
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	70fb      	strb	r3, [r7, #3]
    return TResult();
 800f100:	2300      	movs	r3, #0
  }
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <_ZN11ArduinoJson7V6211HB6detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>:
  TResult visitArray(const CollectionData&) {
 800f10e:	b480      	push	{r7}
 800f110:	b083      	sub	sp, #12
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	6039      	str	r1, [r7, #0]
    return TResult();
 800f118:	2300      	movs	r3, #0
  }
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	60f8      	str	r0, [r7, #12]
 800f12e:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	463b      	mov	r3, r7
 800f136:	4611      	mov	r1, r2
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 fd3b 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800f13e:	4603      	mov	r3, r0
  }
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f154:	68f9      	ldr	r1, [r7, #12]
 800f156:	463b      	mov	r3, r7
 800f158:	2200      	movs	r2, #0
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fd4e 	bl	800fbfc <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxdEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800f160:	4603      	mov	r3, r0
  }
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	60f8      	str	r0, [r7, #12]
 800f172:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f176:	68f9      	ldr	r1, [r7, #12]
 800f178:	463b      	mov	r3, r7
 800f17a:	2200      	movs	r2, #0
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 fd60 	bl	800fc42 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIydEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800f182:	4603      	mov	r3, r0
  }
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800f196:	78f9      	ldrb	r1, [r7, #3]
 800f198:	2000      	movs	r0, #0
 800f19a:	460a      	mov	r2, r1
 800f19c:	4603      	mov	r3, r0
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff ffe3 	bl	800f16a <_ZN11ArduinoJson7V6211HB6detail8ComparerIdvE20visitUnsignedIntegerEy>
 800f1a4:	4603      	mov	r3, r0
  }
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j>:
  CompareResult visitString(const char* lhs, size_t n) {
 800f1ae:	b590      	push	{r4, r7, lr}
 800f1b0:	b089      	sub	sp, #36	; 0x24
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	60f8      	str	r0, [r7, #12]
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	607a      	str	r2, [r7, #4]
    int i = stringCompare(adaptString(rhs), adaptString(lhs, n));
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fd fc4d 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	f107 0314 	add.w	r3, r7, #20
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	68b9      	ldr	r1, [r7, #8]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe fa30 	bl	800d634 <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES6_j>
 800f1d4:	f107 0314 	add.w	r3, r7, #20
 800f1d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fd53 	bl	800fc88 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_>
 800f1e2:	61f8      	str	r0, [r7, #28]
    if (i < 0)
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da01      	bge.n	800f1ee <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j+0x40>
      return COMPARE_RESULT_GREATER;
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	e005      	b.n	800f1fa <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j+0x4c>
    else if (i > 0)
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dd01      	ble.n	800f1f8 <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j+0x4a>
      return COMPARE_RESULT_LESS;
 800f1f4:	2304      	movs	r3, #4
 800f1f6:	e000      	b.n	800f1fa <_ZN11ArduinoJson7V6211HB6detail8ComparerIPKcvE11visitStringES4_j+0x4c>
      return COMPARE_RESULT_EQUAL;
 800f1f8:	2301      	movs	r3, #1
  }
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3724      	adds	r7, #36	; 0x24
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd90      	pop	{r4, r7, pc}

0800f202 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800f20e:	68f9      	ldr	r1, [r7, #12]
 800f210:	463b      	mov	r3, r7
 800f212:	2200      	movs	r2, #0
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fd4a 	bl	800fcae <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800f21a:	4603      	mov	r3, r0
  }
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	463b      	mov	r3, r7
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fd5c 	bl	800fcf4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>
 800f23c:	4603      	mov	r3, r0
  }
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	60f8      	str	r0, [r7, #12]
 800f24e:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f252:	68f9      	ldr	r1, [r7, #12]
 800f254:	463b      	mov	r3, r7
 800f256:	2200      	movs	r2, #0
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 fd6f 	bl	800fd3c <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_11is_unsignedIS4_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_stS4_EvE4typeE>
 800f25e:	4603      	mov	r3, r0
  }
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800f272:	78f9      	ldrb	r1, [r7, #3]
 800f274:	2000      	movs	r0, #0
 800f276:	460a      	mov	r2, r1
 800f278:	4603      	mov	r3, r0
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff ffe3 	bl	800f246 <_ZN11ArduinoJson7V6211HB6detail8ComparerIxvE20visitUnsignedIntegerEy>
 800f280:	4603      	mov	r3, r0
  }
 800f282:	4618      	mov	r0, r3
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b084      	sub	sp, #16
 800f28e:	af00      	add	r7, sp, #0
 800f290:	60f8      	str	r0, [r7, #12]
 800f292:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800f296:	68f9      	ldr	r1, [r7, #12]
 800f298:	463b      	mov	r3, r7
 800f29a:	2200      	movs	r2, #0
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 fd6b 	bl	800fd78 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800f2a2:	4603      	mov	r3, r0
  }
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3710      	adds	r7, #16
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f2b8:	68f9      	ldr	r1, [r7, #12]
 800f2ba:	463b      	mov	r3, r7
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 fd7d 	bl	800fdbe <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_9is_signedIS4_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_stS4_EvE4typeE>
 800f2c4:	4603      	mov	r3, r0
  }
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b084      	sub	sp, #16
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	60f8      	str	r0, [r7, #12]
 800f2d6:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f2da:	68fa      	ldr	r2, [r7, #12]
 800f2dc:	463b      	mov	r3, r7
 800f2de:	4611      	mov	r1, r2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 fd8a 	bl	800fdfa <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800f2e6:	4603      	mov	r3, r0
  }
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800f2fa:	78f9      	ldrb	r1, [r7, #3]
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	460a      	mov	r2, r1
 800f300:	4603      	mov	r3, r0
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff ffe3 	bl	800f2ce <_ZN11ArduinoJson7V6211HB6detail8ComparerIyvE20visitUnsignedIntegerEy>
 800f308:	4603      	mov	r3, r0
  }
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	60f8      	str	r0, [r7, #12]
 800f31a:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800f31e:	68f9      	ldr	r1, [r7, #12]
 800f320:	463b      	mov	r3, r7
 800f322:	2200      	movs	r2, #0
 800f324:	4618      	mov	r0, r3
 800f326:	f000 fd8c 	bl	800fe42 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800f32a:	4603      	mov	r3, r0
  }
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f340:	68f9      	ldr	r1, [r7, #12]
 800f342:	463b      	mov	r3, r7
 800f344:	2200      	movs	r2, #0
 800f346:	4618      	mov	r0, r3
 800f348:	f000 fd9c 	bl	800fe84 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800f34c:	4603      	mov	r3, r0
  }
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800f356:	b580      	push	{r7, lr}
 800f358:	b084      	sub	sp, #16
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	60f8      	str	r0, [r7, #12]
 800f35e:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	463b      	mov	r3, r7
 800f366:	2200      	movs	r2, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fda4 	bl	800feb6 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800f36e:	4603      	mov	r3, r0
  }
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800f382:	78f9      	ldrb	r1, [r7, #3]
 800f384:	2000      	movs	r0, #0
 800f386:	460a      	mov	r2, r1
 800f388:	4603      	mov	r3, r0
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff ffe3 	bl	800f356 <_ZN11ArduinoJson7V6211HB6detail8ComparerIbvE20visitUnsignedIntegerEy>
 800f390:	4603      	mov	r3, r0
  }
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7derivedEv>:
  const TDerived& derived() const {
 800f39a:	b480      	push	{r7}
 800f39c:	b083      	sub	sp, #12
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800f3a2:	687b      	ldr	r3, [r7, #4]
  }
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f2 ff65 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	3b02      	subs	r3, #2
 800f3c4:	2b3e      	cmp	r3, #62	; 0x3e
 800f3c6:	f200 80d2 	bhi.w	800f56e <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1be>
 800f3ca:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x20>)
 800f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d0:	0800f51b 	.word	0x0800f51b
 800f3d4:	0800f51b 	.word	0x0800f51b
 800f3d8:	0800f507 	.word	0x0800f507
 800f3dc:	0800f507 	.word	0x0800f507
 800f3e0:	0800f553 	.word	0x0800f553
 800f3e4:	0800f56f 	.word	0x0800f56f
 800f3e8:	0800f541 	.word	0x0800f541
 800f3ec:	0800f56f 	.word	0x0800f56f
 800f3f0:	0800f52f 	.word	0x0800f52f
 800f3f4:	0800f56f 	.word	0x0800f56f
 800f3f8:	0800f4cd 	.word	0x0800f4cd
 800f3fc:	0800f56f 	.word	0x0800f56f
 800f400:	0800f56f 	.word	0x0800f56f
 800f404:	0800f56f 	.word	0x0800f56f
 800f408:	0800f56f 	.word	0x0800f56f
 800f40c:	0800f56f 	.word	0x0800f56f
 800f410:	0800f56f 	.word	0x0800f56f
 800f414:	0800f56f 	.word	0x0800f56f
 800f418:	0800f56f 	.word	0x0800f56f
 800f41c:	0800f56f 	.word	0x0800f56f
 800f420:	0800f56f 	.word	0x0800f56f
 800f424:	0800f56f 	.word	0x0800f56f
 800f428:	0800f56f 	.word	0x0800f56f
 800f42c:	0800f56f 	.word	0x0800f56f
 800f430:	0800f56f 	.word	0x0800f56f
 800f434:	0800f56f 	.word	0x0800f56f
 800f438:	0800f56f 	.word	0x0800f56f
 800f43c:	0800f56f 	.word	0x0800f56f
 800f440:	0800f56f 	.word	0x0800f56f
 800f444:	0800f56f 	.word	0x0800f56f
 800f448:	0800f4f7 	.word	0x0800f4f7
 800f44c:	0800f56f 	.word	0x0800f56f
 800f450:	0800f56f 	.word	0x0800f56f
 800f454:	0800f56f 	.word	0x0800f56f
 800f458:	0800f56f 	.word	0x0800f56f
 800f45c:	0800f56f 	.word	0x0800f56f
 800f460:	0800f56f 	.word	0x0800f56f
 800f464:	0800f56f 	.word	0x0800f56f
 800f468:	0800f56f 	.word	0x0800f56f
 800f46c:	0800f56f 	.word	0x0800f56f
 800f470:	0800f56f 	.word	0x0800f56f
 800f474:	0800f56f 	.word	0x0800f56f
 800f478:	0800f56f 	.word	0x0800f56f
 800f47c:	0800f56f 	.word	0x0800f56f
 800f480:	0800f56f 	.word	0x0800f56f
 800f484:	0800f56f 	.word	0x0800f56f
 800f488:	0800f56f 	.word	0x0800f56f
 800f48c:	0800f56f 	.word	0x0800f56f
 800f490:	0800f56f 	.word	0x0800f56f
 800f494:	0800f56f 	.word	0x0800f56f
 800f498:	0800f56f 	.word	0x0800f56f
 800f49c:	0800f56f 	.word	0x0800f56f
 800f4a0:	0800f56f 	.word	0x0800f56f
 800f4a4:	0800f56f 	.word	0x0800f56f
 800f4a8:	0800f56f 	.word	0x0800f56f
 800f4ac:	0800f56f 	.word	0x0800f56f
 800f4b0:	0800f56f 	.word	0x0800f56f
 800f4b4:	0800f56f 	.word	0x0800f56f
 800f4b8:	0800f56f 	.word	0x0800f56f
 800f4bc:	0800f56f 	.word	0x0800f56f
 800f4c0:	0800f56f 	.word	0x0800f56f
 800f4c4:	0800f56f 	.word	0x0800f56f
 800f4c8:	0800f4e7 	.word	0x0800f4e7
        return visitor.visitFloat(_content.asFloat);
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	ed93 7b00 	vldr	d7, [r3]
 800f4d4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4d8:	eef0 0a67 	vmov.f32	s1, s15
 800f4dc:	4610      	mov	r0, r2
 800f4de:	f7f3 fc5e 	bl	8002d9e <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitFloatEd>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	e049      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitArray(_content.asCollection);
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7f3 fc2a 	bl	8002d46 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer10visitArrayERKNS1_14CollectionDataE>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	e041      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitObject(_content.asCollection);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7f3 fc38 	bl	8002d72 <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitObjectERKNS1_14CollectionDataE>
 800f502:	4603      	mov	r3, r0
 800f504:	e039      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitString(_content.asString.data,
 800f506:	6838      	ldr	r0, [r7, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800f510:	461a      	mov	r2, r3
 800f512:	f7f3 fc5c 	bl	8002dce <_ZN11ArduinoJson7V6211HB6detail15VariantComparer11visitStringEPKcj>
 800f516:	4603      	mov	r3, r0
                                   _content.asString.size);
 800f518:	e02f      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitRawJson(_content.asString.data,
 800f51a:	6838      	ldr	r0, [r7, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800f524:	461a      	mov	r2, r3
 800f526:	f7f3 fc69 	bl	8002dfc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitRawJsonEPKcj>
 800f52a:	4603      	mov	r3, r0
                                    _content.asString.size);
 800f52c:	e025      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f536:	4608      	mov	r0, r1
 800f538:	f7f3 fc78 	bl	8002e2c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer18visitSignedIntegerEx>
 800f53c:	4603      	mov	r3, r0
 800f53e:	e01c      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	4608      	mov	r0, r1
 800f54a:	f7f3 fc87 	bl	8002e5c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer20visitUnsignedIntegerEy>
 800f54e:	4603      	mov	r3, r0
 800f550:	e013      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800f552:	683a      	ldr	r2, [r7, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bf14      	ite	ne
 800f55c:	2301      	movne	r3, #1
 800f55e:	2300      	moveq	r3, #0
 800f560:	b2db      	uxtb	r3, r3
 800f562:	4619      	mov	r1, r3
 800f564:	4610      	mov	r0, r2
 800f566:	f7f3 fc91 	bl	8002e8c <_ZN11ArduinoJson7V6211HB6detail15VariantComparer12visitBooleanEb>
 800f56a:	4603      	mov	r3, r0
 800f56c:	e005      	b.n	800f57a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_8ComparerINS0_18StaticJsonDocumentILj1024EEEvEEEENT_11result_typeERS8_+0x1ca>
        return visitor.visitNull();
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	4618      	mov	r0, r3
 800f572:	f7f3 fca3 	bl	8002ebc <_ZN11ArduinoJson7V6211HB6detail15VariantComparer9visitNullEv>
 800f576:	4603      	mov	r3, r0
 800f578:	bf00      	nop
  }
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop

0800f584 <_ZN11ArduinoJson7V6211HB6detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>:
};

template <typename TSource>
struct Reader<TSource, typename void_<typename TSource::const_iterator>::type>
    : IteratorReader<typename TSource::const_iterator> {
  explicit Reader(const TSource& source)
 800f584:	b5b0      	push	{r4, r5, r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
      : IteratorReader<typename TSource::const_iterator>(source.begin(),
                                                         source.end()) {}
 800f58e:	687c      	ldr	r4, [r7, #4]
 800f590:	6838      	ldr	r0, [r7, #0]
 800f592:	f007 fde7 	bl	8017164 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800f596:	4605      	mov	r5, r0
 800f598:	6838      	ldr	r0, [r7, #0]
 800f59a:	f007 fde5 	bl	8017168 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f000 fc9f 	bl	800fee8 <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bdb0      	pop	{r4, r5, r7, pc}

0800f5b4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>:
  JsonDeserializer(MemoryPool* pool, TReader reader,
 800f5b4:	b590      	push	{r4, r7, lr}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4639      	mov	r1, r7
 800f5c0:	e881 000c 	stmia.w	r1, {r2, r3}
      : _stringStorage(stringStorage),
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	461c      	mov	r4, r3
 800f5c8:	f107 0320 	add.w	r3, r7, #32
 800f5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f5ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        _foundSomething(false),
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	741a      	strb	r2, [r3, #16]
        _latch(reader),
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f103 0014 	add.w	r0, r3, #20
 800f5de:	463b      	mov	r3, r7
 800f5e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f5e4:	f000 fc93 	bl	800ff0e <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
        _pool(pool) {}
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	621a      	str	r2, [r3, #32]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd90      	pop	{r4, r7, pc}

0800f5f8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 800f5f8:	b5b0      	push	{r4, r5, r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	713a      	strb	r2, [r7, #4]
 800f604:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f000 fc9a 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f60c:	4603      	mov	r3, r0
 800f60e:	75fb      	strb	r3, [r7, #23]
    if (err)
 800f610:	7dfb      	ldrb	r3, [r7, #23]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	e0d2      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f000 fcc6 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f620:	4603      	mov	r3, r0
 800f622:	2b7b      	cmp	r3, #123	; 0x7b
 800f624:	f300 80ba 	bgt.w	800f79c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800f628:	2b5b      	cmp	r3, #91	; 0x5b
 800f62a:	da04      	bge.n	800f636 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 800f62c:	2b22      	cmp	r3, #34	; 0x22
 800f62e:	d07b      	beq.n	800f728 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800f630:	2b27      	cmp	r3, #39	; 0x27
 800f632:	d079      	beq.n	800f728 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800f634:	e0b2      	b.n	800f79c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800f636:	3b5b      	subs	r3, #91	; 0x5b
 800f638:	2b20      	cmp	r3, #32
 800f63a:	f200 80af 	bhi.w	800f79c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800f63e:	a201      	add	r2, pc, #4	; (adr r2, 800f644 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 800f640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f644:	0800f6c9 	.word	0x0800f6c9
 800f648:	0800f79d 	.word	0x0800f79d
 800f64c:	0800f79d 	.word	0x0800f79d
 800f650:	0800f79d 	.word	0x0800f79d
 800f654:	0800f79d 	.word	0x0800f79d
 800f658:	0800f79d 	.word	0x0800f79d
 800f65c:	0800f79d 	.word	0x0800f79d
 800f660:	0800f79d 	.word	0x0800f79d
 800f664:	0800f79d 	.word	0x0800f79d
 800f668:	0800f79d 	.word	0x0800f79d
 800f66c:	0800f79d 	.word	0x0800f79d
 800f670:	0800f76f 	.word	0x0800f76f
 800f674:	0800f79d 	.word	0x0800f79d
 800f678:	0800f79d 	.word	0x0800f79d
 800f67c:	0800f79d 	.word	0x0800f79d
 800f680:	0800f79d 	.word	0x0800f79d
 800f684:	0800f79d 	.word	0x0800f79d
 800f688:	0800f79d 	.word	0x0800f79d
 800f68c:	0800f79d 	.word	0x0800f79d
 800f690:	0800f791 	.word	0x0800f791
 800f694:	0800f79d 	.word	0x0800f79d
 800f698:	0800f79d 	.word	0x0800f79d
 800f69c:	0800f79d 	.word	0x0800f79d
 800f6a0:	0800f79d 	.word	0x0800f79d
 800f6a4:	0800f79d 	.word	0x0800f79d
 800f6a8:	0800f74d 	.word	0x0800f74d
 800f6ac:	0800f79d 	.word	0x0800f79d
 800f6b0:	0800f79d 	.word	0x0800f79d
 800f6b4:	0800f79d 	.word	0x0800f79d
 800f6b8:	0800f79d 	.word	0x0800f79d
 800f6bc:	0800f79d 	.word	0x0800f79d
 800f6c0:	0800f79d 	.word	0x0800f79d
 800f6c4:	0800f6f9 	.word	0x0800f6f9
        if (filter.allowArray())
 800f6c8:	1d3b      	adds	r3, r7, #4
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7f3 fe6e 	bl	80033ac <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowArrayEv>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00a      	beq.n	800f6ec <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800f6d6:	68b8      	ldr	r0, [r7, #8]
 800f6d8:	f7f2 fdb5 	bl	8002246 <_ZN11ArduinoJson7V6211HB6detail11VariantData7toArrayEv>
 800f6dc:	4601      	mov	r1, r0
 800f6de:	783b      	ldrb	r3, [r7, #0]
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 fc79 	bl	800ffda <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e069      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 800f6ec:	7839      	ldrb	r1, [r7, #0]
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f000 fcf9 	bl	80100e6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	e063      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 800f6f8:	1d3b      	adds	r3, r7, #4
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f3 fe61 	bl	80033c2 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter11allowObjectEv>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00a      	beq.n	800f71c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 800f706:	68b8      	ldr	r0, [r7, #8]
 800f708:	f7f2 fdae 	bl	8002268 <_ZN11ArduinoJson7V6211HB6detail11VariantData8toObjectEv>
 800f70c:	4601      	mov	r1, r0
 800f70e:	783b      	ldrb	r3, [r7, #0]
 800f710:	4622      	mov	r2, r4
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f000 fd2a 	bl	801016c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800f718:	4603      	mov	r3, r0
 800f71a:	e051      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 800f71c:	7839      	ldrb	r1, [r7, #0]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f000 fe20 	bl	8010364 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800f724:	4603      	mov	r3, r0
 800f726:	e04b      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800f728:	1d3b      	adds	r3, r7, #4
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7f3 fe54 	bl	80033d8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowValueEv>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d005      	beq.n	800f742 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 fe93 	bl	8010464 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>
 800f73e:	4603      	mov	r3, r0
 800f740:	e03e      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 feb3 	bl	80104ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800f748:	4603      	mov	r3, r0
 800f74a:	e039      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800f74c:	1d3b      	adds	r3, r7, #4
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f3 fe42 	bl	80033d8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowValueEv>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 800f75a:	2101      	movs	r1, #1
 800f75c:	68b8      	ldr	r0, [r7, #8]
 800f75e:	f7f2 fd19 	bl	8002194 <_ZN11ArduinoJson7V6211HB6detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800f762:	4919      	ldr	r1, [pc, #100]	; (800f7c8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 fed7 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800f76a:	4603      	mov	r3, r0
 800f76c:	e028      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800f76e:	1d3b      	adds	r3, r7, #4
 800f770:	4618      	mov	r0, r3
 800f772:	f7f3 fe31 	bl	80033d8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowValueEv>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d003      	beq.n	800f784 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 800f77c:	2100      	movs	r1, #0
 800f77e:	68b8      	ldr	r0, [r7, #8]
 800f780:	f7f2 fd08 	bl	8002194 <_ZN11ArduinoJson7V6211HB6detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800f784:	4911      	ldr	r1, [pc, #68]	; (800f7cc <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f000 fec6 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800f78c:	4603      	mov	r3, r0
 800f78e:	e017      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 800f790:	490f      	ldr	r1, [pc, #60]	; (800f7d0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f000 fec0 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800f798:	4603      	mov	r3, r0
 800f79a:	e011      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800f79c:	1d3b      	adds	r3, r7, #4
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7f3 fe1a 	bl	80033d8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter10allowValueEv>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d005      	beq.n	800f7b6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 800f7aa:	68b9      	ldr	r1, [r7, #8]
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f000 fed9 	bl	8010564 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	e004      	b.n	800f7c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 ff1a 	bl	80105f0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	bf00      	nop
  }
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3718      	adds	r7, #24
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7c8:	0801898c 	.word	0x0801898c
 800f7cc:	08018994 	.word	0x08018994
 800f7d0:	0801899c 	.word	0x0801899c

0800f7d4 <_ZNK11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>:

  void clear() {
    _loaded = false;
  }

  int last() const {
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
    return _current;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	7a1b      	ldrb	r3, [r3, #8]
  }
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8get_dataIS8_EENS1_9enable_ifIXsrNS1_13string_traitsIT_EE8has_dataEPKcE4typeERKSD_>:
    return s.length();
  }

  template <typename U>
  static typename enable_if<string_traits<U>::has_data, const char*>::type
  get_data(const U& s) {
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
    return s.data();
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f007 fed5 	bl	80175a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800f7fa:	4603      	mov	r3, r0
  }
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <_ZN11ArduinoJson7V6211HB6detail13StringAdapterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8get_sizeIS8_EENS1_9enable_ifIXsrNS1_13string_traitsIT_EE8has_sizeEjE4typeERKSD_>:
  static typename enable_if<string_traits<U>::has_size, size_t>::type get_size(
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
    return s.size();
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f007 fcaf 	bl	8017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f812:	4603      	mov	r3, r0
  }
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	1d3b      	adds	r3, r7, #4
 800f826:	e883 0006 	stmia.w	r3, {r1, r2}
  if (key.isNull())
 800f82a:	1d3b      	adds	r3, r7, #4
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7f2 f982 	bl	8001b36 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString6isNullEv>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d001      	beq.n	800f83c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x20>
    return 0;
 800f838:	2300      	movs	r3, #0
 800f83a:	e01e      	b.n	800f87a <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x5e>
  VariantSlot* slot = _head;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	617b      	str	r3, [r7, #20]
  while (slot) {
 800f842:	e014      	b.n	800f86e <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x52>
    if (stringEquals(key, adaptString(slot->key())))
 800f844:	6978      	ldr	r0, [r7, #20]
 800f846:	f7f2 faf2 	bl	8001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>
 800f84a:	4603      	mov	r3, r0
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fd f906 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800f852:	4603      	mov	r3, r0
 800f854:	461a      	mov	r2, r3
 800f856:	1d3b      	adds	r3, r7, #4
 800f858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f85c:	f000 fee6 	bl	801062c <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d107      	bne.n	800f876 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x5a>
    slot = slot->next();
 800f866:	6978      	ldr	r0, [r7, #20]
 800f868:	f7f2 fa6d 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 800f86c:	6178      	str	r0, [r7, #20]
  while (slot) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d1e7      	bne.n	800f844 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x28>
 800f874:	e000      	b.n	800f878 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_+0x5c>
      break;
 800f876:	bf00      	nop
  return slot;
 800f878:	697b      	ldr	r3, [r7, #20]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800f882:	b580      	push	{r7, lr}
 800f884:	b084      	sub	sp, #16
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 800f88c:	463b      	mov	r3, r7
 800f88e:	4618      	mov	r0, r3
 800f890:	f7f2 f8eb 	bl	8001a6a <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString6isNullEv>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d001      	beq.n	800f89e <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	e01c      	b.n	800f8d8 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x56>
  VariantSlot* slot = _head;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800f8a4:	e012      	b.n	800f8cc <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x4a>
    if (stringEquals(key, adaptString(slot->key())))
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f7f2 fac1 	bl	8001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fd f8d5 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6838      	ldr	r0, [r7, #0]
 800f8ba:	f000 ff01 	bl	80106c0 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d107      	bne.n	800f8d4 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    slot = slot->next();
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7f2 fa3e 	bl	8001d46 <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 800f8ca:	60f8      	str	r0, [r7, #12]
  while (slot) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e9      	bne.n	800f8a6 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x24>
 800f8d2:	e000      	b.n	800f8d6 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
      break;
 800f8d4:	bf00      	nop
  return slot;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800f8e0:	b590      	push	{r4, r7, lr}
 800f8e2:	b089      	sub	sp, #36	; 0x24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	1d3c      	adds	r4, r7, #4
 800f8e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f8ec:	603b      	str	r3, [r7, #0]
  size_t size1 = s1.size();
 800f8ee:	1d3b      	adds	r3, r7, #4
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f2 f931 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 800f8f6:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800f8f8:	463b      	mov	r3, r7
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f2 f8c6 	bl	8001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>
 800f900:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800f902:	69ba      	ldr	r2, [r7, #24]
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	429a      	cmp	r2, r3
 800f908:	d001      	beq.n	800f90e <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2e>
    return false;
 800f90a:	2300      	movs	r3, #0
 800f90c:	e020      	b.n	800f950 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x70>
  for (size_t i = 0; i < size1; i++) {
 800f90e:	2300      	movs	r3, #0
 800f910:	61fb      	str	r3, [r7, #28]
 800f912:	e018      	b.n	800f946 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x66>
    if (s1[i] != s2[i])
 800f914:	1d3b      	adds	r3, r7, #4
 800f916:	69f9      	ldr	r1, [r7, #28]
 800f918:	4618      	mov	r0, r3
 800f91a:	f7f2 f929 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 800f91e:	4603      	mov	r3, r0
 800f920:	461c      	mov	r4, r3
 800f922:	463b      	mov	r3, r7
 800f924:	69f9      	ldr	r1, [r7, #28]
 800f926:	4618      	mov	r0, r3
 800f928:	f7f2 f8c4 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 800f92c:	4603      	mov	r3, r0
 800f92e:	429c      	cmp	r4, r3
 800f930:	bf14      	ite	ne
 800f932:	2301      	movne	r3, #1
 800f934:	2300      	moveq	r3, #0
 800f936:	b2db      	uxtb	r3, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x60>
      return false;
 800f93c:	2300      	movs	r3, #0
 800f93e:	e007      	b.n	800f950 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x70>
  for (size_t i = 0; i < size1; i++) {
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	3301      	adds	r3, #1
 800f944:	61fb      	str	r3, [r7, #28]
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d3e2      	bcc.n	800f914 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x34>
  return true;
 800f94e:	2301      	movs	r3, #1
}
 800f950:	4618      	mov	r0, r3
 800f952:	3724      	adds	r7, #36	; 0x24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd90      	pop	{r4, r7, pc}

0800f958 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : _writer(writer) {}
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	463a      	mov	r2, r7
 800f966:	4611      	mov	r1, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f001 f80b 	bl	8010984 <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4618      	mov	r0, r3
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7f2 fc81 	bl	800228a <_ZNK11ArduinoJson7V6211HB6detail11VariantData4typeEv>
 800f988:	4603      	mov	r3, r0
 800f98a:	3b02      	subs	r3, #2
 800f98c:	2b3e      	cmp	r3, #62	; 0x3e
 800f98e:	f200 80f4 	bhi.w	800fb7a <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x202>
 800f992:	a201      	add	r2, pc, #4	; (adr r2, 800f998 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20>)
 800f994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f998:	0800fb2d 	.word	0x0800fb2d
 800f99c:	0800fb2d 	.word	0x0800fb2d
 800f9a0:	0800fb19 	.word	0x0800fb19
 800f9a4:	0800fb19 	.word	0x0800fb19
 800f9a8:	0800fb61 	.word	0x0800fb61
 800f9ac:	0800fb7b 	.word	0x0800fb7b
 800f9b0:	0800fb51 	.word	0x0800fb51
 800f9b4:	0800fb7b 	.word	0x0800fb7b
 800f9b8:	0800fb41 	.word	0x0800fb41
 800f9bc:	0800fb7b 	.word	0x0800fb7b
 800f9c0:	0800fa95 	.word	0x0800fa95
 800f9c4:	0800fb7b 	.word	0x0800fb7b
 800f9c8:	0800fb7b 	.word	0x0800fb7b
 800f9cc:	0800fb7b 	.word	0x0800fb7b
 800f9d0:	0800fb7b 	.word	0x0800fb7b
 800f9d4:	0800fb7b 	.word	0x0800fb7b
 800f9d8:	0800fb7b 	.word	0x0800fb7b
 800f9dc:	0800fb7b 	.word	0x0800fb7b
 800f9e0:	0800fb7b 	.word	0x0800fb7b
 800f9e4:	0800fb7b 	.word	0x0800fb7b
 800f9e8:	0800fb7b 	.word	0x0800fb7b
 800f9ec:	0800fb7b 	.word	0x0800fb7b
 800f9f0:	0800fb7b 	.word	0x0800fb7b
 800f9f4:	0800fb7b 	.word	0x0800fb7b
 800f9f8:	0800fb7b 	.word	0x0800fb7b
 800f9fc:	0800fb7b 	.word	0x0800fb7b
 800fa00:	0800fb7b 	.word	0x0800fb7b
 800fa04:	0800fb7b 	.word	0x0800fb7b
 800fa08:	0800fb7b 	.word	0x0800fb7b
 800fa0c:	0800fb7b 	.word	0x0800fb7b
 800fa10:	0800fb0b 	.word	0x0800fb0b
 800fa14:	0800fb7b 	.word	0x0800fb7b
 800fa18:	0800fb7b 	.word	0x0800fb7b
 800fa1c:	0800fb7b 	.word	0x0800fb7b
 800fa20:	0800fb7b 	.word	0x0800fb7b
 800fa24:	0800fb7b 	.word	0x0800fb7b
 800fa28:	0800fb7b 	.word	0x0800fb7b
 800fa2c:	0800fb7b 	.word	0x0800fb7b
 800fa30:	0800fb7b 	.word	0x0800fb7b
 800fa34:	0800fb7b 	.word	0x0800fb7b
 800fa38:	0800fb7b 	.word	0x0800fb7b
 800fa3c:	0800fb7b 	.word	0x0800fb7b
 800fa40:	0800fb7b 	.word	0x0800fb7b
 800fa44:	0800fb7b 	.word	0x0800fb7b
 800fa48:	0800fb7b 	.word	0x0800fb7b
 800fa4c:	0800fb7b 	.word	0x0800fb7b
 800fa50:	0800fb7b 	.word	0x0800fb7b
 800fa54:	0800fb7b 	.word	0x0800fb7b
 800fa58:	0800fb7b 	.word	0x0800fb7b
 800fa5c:	0800fb7b 	.word	0x0800fb7b
 800fa60:	0800fb7b 	.word	0x0800fb7b
 800fa64:	0800fb7b 	.word	0x0800fb7b
 800fa68:	0800fb7b 	.word	0x0800fb7b
 800fa6c:	0800fb7b 	.word	0x0800fb7b
 800fa70:	0800fb7b 	.word	0x0800fb7b
 800fa74:	0800fb7b 	.word	0x0800fb7b
 800fa78:	0800fb7b 	.word	0x0800fb7b
 800fa7c:	0800fb7b 	.word	0x0800fb7b
 800fa80:	0800fb7b 	.word	0x0800fb7b
 800fa84:	0800fb7b 	.word	0x0800fb7b
 800fa88:	0800fb7b 	.word	0x0800fb7b
 800fa8c:	0800fb7b 	.word	0x0800fb7b
 800fa90:	0800faad 	.word	0x0800faad
        return visitor.visitFloat(_content.asFloat);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	ed93 7b00 	vldr	d7, [r3]
 800fa9a:	eeb0 0a47 	vmov.f32	s0, s14
 800fa9e:	eef0 0a67 	vmov.f32	s1, s15
 800faa2:	6838      	ldr	r0, [r7, #0]
 800faa4:	f000 ff81 	bl	80109aa <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>
 800faa8:	4603      	mov	r3, r0
 800faaa:	e06b      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitArray(_content.asCollection);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	617a      	str	r2, [r7, #20]
 800fab2:	613b      	str	r3, [r7, #16]
    write('[');
 800fab4:	215b      	movs	r1, #91	; 0x5b
 800fab6:	6978      	ldr	r0, [r7, #20]
 800fab8:	f001 fba2 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = array.head();
 800fabc:	6938      	ldr	r0, [r7, #16]
 800fabe:	f7f2 f920 	bl	8001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>
 800fac2:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800fac4:	e012      	b.n	800faec <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x174>
      slot->data()->accept(*this);
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7f2 f932 	bl	8001d30 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 800facc:	4603      	mov	r3, r0
 800face:	6979      	ldr	r1, [r7, #20]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff ff51 	bl	800f978 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f7f2 f94c 	bl	8001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 800fadc:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d007      	beq.n	800faf4 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17c>
      write(',');
 800fae4:	212c      	movs	r1, #44	; 0x2c
 800fae6:	6978      	ldr	r0, [r7, #20]
 800fae8:	f001 fb8a 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1e9      	bne.n	800fac6 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x14e>
 800faf2:	e000      	b.n	800faf6 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17e>
        break;
 800faf4:	bf00      	nop
    write(']');
 800faf6:	215d      	movs	r1, #93	; 0x5d
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f001 fb81 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800fafe:	6978      	ldr	r0, [r7, #20]
 800fb00:	f001 f81d 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fb04:	4603      	mov	r3, r0
 800fb06:	bf00      	nop
 800fb08:	e03c      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitObject(_content.asCollection);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6838      	ldr	r0, [r7, #0]
 800fb10:	f000 ff5f 	bl	80109d2 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>
 800fb14:	4603      	mov	r3, r0
 800fb16:	e035      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitString(_content.asString.data,
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6819      	ldr	r1, [r3, #0]
                                   _content.asString.size);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(_content.asString.data,
 800fb20:	461a      	mov	r2, r3
 800fb22:	6838      	ldr	r0, [r7, #0]
 800fb24:	f000 ff94 	bl	8010a50 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>
 800fb28:	4603      	mov	r3, r0
                                   _content.asString.size);
 800fb2a:	e02b      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitRawJson(_content.asString.data,
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6819      	ldr	r1, [r3, #0]
                                    _content.asString.size);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(_content.asString.data,
 800fb34:	461a      	mov	r2, r3
 800fb36:	6838      	ldr	r0, [r7, #0]
 800fb38:	f000 ff9e 	bl	8010a78 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>
 800fb3c:	4603      	mov	r3, r0
                                    _content.asString.size);
 800fb3e:	e021      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitSignedInteger(_content.asSignedInteger);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb46:	6838      	ldr	r0, [r7, #0]
 800fb48:	f000 ffaa 	bl	8010aa0 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	e019      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitUnsignedInteger(_content.asUnsignedInteger);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	6838      	ldr	r0, [r7, #0]
 800fb58:	f000 ffb6 	bl	8010ac8 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	e011      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitBoolean(_content.asBoolean != 0);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	bf14      	ite	ne
 800fb68:	2301      	movne	r3, #1
 800fb6a:	2300      	moveq	r3, #0
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6838      	ldr	r0, [r7, #0]
 800fb72:	f000 ffbd 	bl	8010af0 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>
 800fb76:	4603      	mov	r3, r0
 800fb78:	e004      	b.n	800fb84 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitNull();
 800fb7a:	6838      	ldr	r0, [r7, #0]
 800fb7c:	f000 f806 	bl	800fb8c <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800fb80:	4603      	mov	r3, r0
 800fb82:	bf00      	nop
  }
 800fb84:	4618      	mov	r0, r3
 800fb86:	3718      	adds	r7, #24
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>:
  size_t visitNull() {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
    _formatter.writeRaw("null");
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4906      	ldr	r1, [pc, #24]	; (800fbb0 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv+0x24>)
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 ffbd 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 ffcd 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fba4:	4603      	mov	r3, r0
  }
 800fba6:	4618      	mov	r0, r3
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	0801899c 	.word	0x0801899c

0800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>:
  COMPARE_RESULT_GREATER_OR_EQUAL = 3,
  COMPARE_RESULT_LESS_OR_EQUAL = 5
};

template <typename T>
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	f7f0 ff87 	bl	8000adc <__aeabi_dcmplt>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x24>
    return COMPARE_RESULT_LESS;
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	e00d      	b.n	800fbf4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else if (lhs > rhs)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	f7f0 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x3e>
    return COMPARE_RESULT_GREATER;
 800fbee:	2302      	movs	r3, #2
 800fbf0:	e000      	b.n	800fbf4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else
    return COMPARE_RESULT_EQUAL;
 800fbf2:	2301      	movs	r3, #1
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxdEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
    return COMPARE_RESULT_LESS;
  return arithmeticCompare<T2>(static_cast<T2>(lhs), rhs);
}

template <typename T1, typename T2>
CompareResult arithmeticCompare(
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b088      	sub	sp, #32
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
    const T1& lhs, const T2& rhs,
    typename enable_if<is_floating_point<T1>::value ||
                       is_floating_point<T2>::value>::type* = 0) {
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0e:	4610      	mov	r0, r2
 800fc10:	4619      	mov	r1, r3
 800fc12:	f7f0 fcc3 	bl	800059c <__aeabi_l2d>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc24:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fc28:	f107 0218 	add.w	r2, r7, #24
 800fc2c:	f107 0310 	add.w	r3, r7, #16
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff ffbe 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800fc38:	4603      	mov	r3, r0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIydEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
CompareResult arithmeticCompare(
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b088      	sub	sp, #32
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	4610      	mov	r0, r2
 800fc56:	4619      	mov	r1, r3
 800fc58:	f7f0 fc98 	bl	800058c <__aeabi_ul2d>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fc6e:	f107 0218 	add.w	r2, r7, #24
 800fc72:	f107 0310 	add.w	r3, r7, #16
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff ff9b 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800fc7e:	4603      	mov	r3, r0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3720      	adds	r7, #32
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_>:
stringCompare(TAdaptedString1 s1, TAdaptedString2 s2) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	1d3b      	adds	r3, r7, #4
 800fc92:	e883 0006 	stmia.w	r3, {r1, r2}
  return -stringCompare(s2, s1);
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	1d3b      	adds	r3, r7, #4
 800fc9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc9e:	f000 ff5b 	bl	8010b58 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_>
 800fca2:	4603      	mov	r3, r0
 800fca4:	425b      	negs	r3, r3
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}

0800fcae <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
CompareResult arithmeticCompare(
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b088      	sub	sp, #32
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	60f8      	str	r0, [r7, #12]
 800fcb6:	60b9      	str	r1, [r7, #8]
 800fcb8:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcca:	4610      	mov	r0, r2
 800fccc:	4619      	mov	r1, r3
 800fcce:	f7f0 fc65 	bl	800059c <__aeabi_l2d>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fcda:	f107 0218 	add.w	r2, r7, #24
 800fcde:	f107 0310 	add.w	r3, r7, #16
 800fce2:	4611      	mov	r1, r2
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff ff65 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800fcea:	4603      	mov	r3, r0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3720      	adds	r7, #32
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	4290      	cmp	r0, r2
 800fd0c:	eb71 0303 	sbcs.w	r3, r1, r3
 800fd10:	da01      	bge.n	800fd16 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800fd12:	2304      	movs	r3, #4
 800fd14:	e00c      	b.n	800fd30 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd22:	4290      	cmp	r0, r2
 800fd24:	eb71 0303 	sbcs.w	r3, r1, r3
 800fd28:	da01      	bge.n	800fd2e <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	e000      	b.n	800fd30 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800fd2e:	2301      	movs	r3, #1
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_11is_unsignedIS4_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
  if (rhs < 0)
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	da01      	bge.n	800fd56 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_11is_unsignedIS4_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_stS4_EvE4typeE+0x1a>
    return COMPARE_RESULT_GREATER;
 800fd52:	2302      	movs	r3, #2
 800fd54:	e00c      	b.n	800fd70 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyxEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_11is_unsignedIS4_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_stS4_EvE4typeE+0x34>
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fd60:	f107 0310 	add.w	r3, r7, #16
 800fd64:	4619      	mov	r1, r3
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 f847 	bl	800fdfa <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	bf00      	nop
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3718      	adds	r7, #24
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
CompareResult arithmeticCompare(
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b088      	sub	sp, #32
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd94:	4610      	mov	r0, r2
 800fd96:	4619      	mov	r1, r3
 800fd98:	f7f0 fbf8 	bl	800058c <__aeabi_ul2d>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fda4:	f107 0218 	add.w	r2, r7, #24
 800fda8:	f107 0310 	add.w	r3, r7, #16
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff ff00 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800fdb4:	4603      	mov	r3, r0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3720      	adds	r7, #32
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_9is_signedIS4_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b086      	sub	sp, #24
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	60f8      	str	r0, [r7, #12]
 800fdc6:	60b9      	str	r1, [r7, #8]
 800fdc8:	607a      	str	r2, [r7, #4]
  if (lhs < 0)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	da01      	bge.n	800fdd8 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_9is_signedIS4_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_stS4_EvE4typeE+0x1a>
    return COMPARE_RESULT_LESS;
 800fdd4:	2304      	movs	r3, #4
 800fdd6:	e00c      	b.n	800fdf2 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxyEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valuesrNS1_9is_signedIS4_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_stS4_EvE4typeE+0x34>
  return arithmeticCompare<T2>(static_cast<T2>(lhs), rhs);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fde2:	f107 0310 	add.w	r3, r7, #16
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f806 	bl	800fdfa <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	bf00      	nop
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3718      	adds	r7, #24
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
 800fe02:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe10:	4290      	cmp	r0, r2
 800fe12:	eb71 0303 	sbcs.w	r3, r1, r3
 800fe16:	d201      	bcs.n	800fe1c <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800fe18:	2304      	movs	r3, #4
 800fe1a:	e00c      	b.n	800fe36 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe28:	4290      	cmp	r0, r2
 800fe2a:	eb71 0303 	sbcs.w	r3, r1, r3
 800fe2e:	d201      	bcs.n	800fe34 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800fe30:	2302      	movs	r3, #2
 800fe32:	e000      	b.n	800fe36 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800fe34:	2301      	movs	r3, #1
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
CompareResult arithmeticCompare(
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b088      	sub	sp, #32
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	60f8      	str	r0, [r7, #12]
 800fe4a:	60b9      	str	r1, [r7, #8]
 800fe4c:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f0 fb51 	bl	8000504 <__aeabi_ui2d>
 800fe62:	4602      	mov	r2, r0
 800fe64:	460b      	mov	r3, r1
 800fe66:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800fe6a:	f107 0218 	add.w	r2, r7, #24
 800fe6e:	f107 0310 	add.w	r3, r7, #16
 800fe72:	4611      	mov	r1, r2
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff fe9d 	bl	800fbb4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800fe7a:	4603      	mov	r3, r0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3720      	adds	r7, #32
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800fe84:	b5b0      	push	{r4, r5, r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2200      	movs	r2, #0
 800fe98:	461c      	mov	r4, r3
 800fe9a:	4615      	mov	r5, r2
 800fe9c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800fea0:	f107 0310 	add.w	r3, r7, #16
 800fea4:	4619      	mov	r1, r3
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7ff ff24 	bl	800fcf4 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>
 800feac:	4603      	mov	r3, r0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bdb0      	pop	{r4, r5, r7, pc}

0800feb6 <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800feb6:	b5b0      	push	{r4, r5, r7, lr}
 800feb8:	b086      	sub	sp, #24
 800feba:	af00      	add	r7, sp, #0
 800febc:	60f8      	str	r0, [r7, #12]
 800febe:	60b9      	str	r1, [r7, #8]
 800fec0:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2200      	movs	r2, #0
 800feca:	461c      	mov	r4, r3
 800fecc:	4615      	mov	r5, r2
 800fece:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800fed2:	f107 0310 	add.w	r3, r7, #16
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff ff8e 	bl	800fdfa <_ZN11ArduinoJson7V6211HB6detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800fede:	4603      	mov	r3, r0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bdb0      	pop	{r4, r5, r7, pc}

0800fee8 <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>:
  explicit IteratorReader(TIterator begin, TIterator end)
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
      : _ptr(begin), _end(end) {}
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	605a      	str	r2, [r3, #4]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4618      	mov	r0, r3
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  Latch(TReader reader) : _reader(reader), _loaded(false) {
 800ff0e:	b480      	push	{r7}
 800ff10:	b085      	sub	sp, #20
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	60f8      	str	r0, [r7, #12]
 800ff16:	1d3b      	adds	r3, r7, #4
 800ff18:	e883 0006 	stmia.w	r3, {r1, r2}
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	1d3b      	adds	r3, r7, #4
 800ff22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff26:	e882 0003 	stmia.w	r2, {r0, r1}
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	725a      	strb	r2, [r3, #9]
  }
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
	...

0800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f82f 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d013      	beq.n	800ff7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	db1d      	blt.n	800ff94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800ff58:	2b20      	cmp	r3, #32
 800ff5a:	dc1b      	bgt.n	800ff94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800ff5c:	2b09      	cmp	r3, #9
 800ff5e:	db19      	blt.n	800ff94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800ff60:	3b09      	subs	r3, #9
 800ff62:	4a11      	ldr	r2, [pc, #68]	; (800ffa8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x68>)
 800ff64:	fa22 f303 	lsr.w	r3, r2, r3
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	bf14      	ite	ne
 800ff70:	2301      	movne	r3, #1
 800ff72:	2300      	moveq	r3, #0
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d108      	bne.n	800ff8c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x4c>
 800ff7a:	e00b      	b.n	800ff94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
          return _foundSomething ? DeserializationError::IncompleteInput
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	7c1b      	ldrb	r3, [r3, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x48>
 800ff84:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800ff86:	e00b      	b.n	800ffa0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          return _foundSomething ? DeserializationError::IncompleteInput
 800ff88:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800ff8a:	e009      	b.n	800ffa0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          move();
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fe3f 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          continue;
 800ff92:	e004      	b.n	800ff9e <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x5e>
          _foundSomething = true;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	741a      	strb	r2, [r3, #16]
          return DeserializationError::Ok;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e000      	b.n	800ffa0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800ff9e:	e7d3      	b.n	800ff48 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	00800013 	.word	0x00800013

0800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>:
  char current() {
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
    return _latch.current();
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3314      	adds	r3, #20
 800ffb8:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!_loaded) {
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	7a5b      	ldrb	r3, [r3, #9]
 800ffbe:	f083 0301 	eor.w	r3, r3, #1
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d002      	beq.n	800ffce <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv+0x22>
      load();
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f001 fa38 	bl	801143e <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>
    }
    return _current;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	7a1b      	ldrb	r3, [r3, #8]
  }
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800ffda:	b590      	push	{r4, r7, lr}
 800ffdc:	b089      	sub	sp, #36	; 0x24
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	60f8      	str	r0, [r7, #12]
 800ffe2:	60b9      	str	r1, [r7, #8]
 800ffe4:	713a      	strb	r2, [r7, #4]
 800ffe6:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800ffe8:	463b      	mov	r3, r7
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f3 fa30 	bl	8003450 <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit7reachedEv>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d001      	beq.n	800fffa <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800fff6:	2305      	movs	r3, #5
 800fff8:	e071      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f000 fe08 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff ff9d 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010006:	4603      	mov	r3, r0
 8010008:	77fb      	strb	r3, [r7, #31]
    if (err)
 801000a:	7ffb      	ldrb	r3, [r7, #31]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d001      	beq.n	8010014 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8010010:	7ffb      	ldrb	r3, [r7, #31]
 8010012:	e064      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8010014:	215d      	movs	r1, #93	; 0x5d
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f000 fe07 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8010022:	2300      	movs	r3, #0
 8010024:	e05b      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter memberFilter = filter[0UL];
 8010026:	2300      	movs	r3, #0
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	f107 0214 	add.w	r2, r7, #20
 801002e:	1d3b      	adds	r3, r7, #4
 8010030:	4611      	mov	r1, r2
 8010032:	4618      	mov	r0, r3
 8010034:	f000 fe16 	bl	8010c64 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilterixImEES2_RKT_>
      if (memberFilter.allow()) {
 8010038:	f107 0310 	add.w	r3, r7, #16
 801003c:	4618      	mov	r0, r3
 801003e:	f7f3 f9aa 	bl	8003396 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter5allowEv>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d01c      	beq.n	8010082 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(_pool);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6a1b      	ldr	r3, [r3, #32]
 801004c:	4619      	mov	r1, r3
 801004e:	68b8      	ldr	r0, [r7, #8]
 8010050:	f7f2 fb79 	bl	8002746 <_ZN11ArduinoJson7V6211HB6detail14CollectionData10addElementEPNS1_10MemoryPoolE>
 8010054:	61b8      	str	r0, [r7, #24]
        if (!value)
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 801005c:	2304      	movs	r3, #4
 801005e:	e03e      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, memberFilter, nestingLimit.decrement());
 8010060:	463b      	mov	r3, r7
 8010062:	4618      	mov	r0, r3
 8010064:	f7f3 f9e1 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 8010068:	4603      	mov	r3, r0
 801006a:	4622      	mov	r2, r4
 801006c:	69b9      	ldr	r1, [r7, #24]
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff fac2 	bl	800f5f8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8010074:	4603      	mov	r3, r0
 8010076:	77fb      	strb	r3, [r7, #31]
        if (err)
 8010078:	7ffb      	ldrb	r3, [r7, #31]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d011      	beq.n	80100a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 801007e:	7ffb      	ldrb	r3, [r7, #31]
 8010080:	e02d      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8010082:	463b      	mov	r3, r7
 8010084:	4618      	mov	r0, r3
 8010086:	f7f3 f9d0 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 801008a:	4603      	mov	r3, r0
 801008c:	4619      	mov	r1, r3
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f000 fdf4 	bl	8010c7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8010094:	4603      	mov	r3, r0
 8010096:	77fb      	strb	r3, [r7, #31]
        if (err)
 8010098:	7ffb      	ldrb	r3, [r7, #31]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 801009e:	7ffb      	ldrb	r3, [r7, #31]
 80100a0:	e01d      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f7ff ff4c 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 80100a8:	4603      	mov	r3, r0
 80100aa:	77fb      	strb	r3, [r7, #31]
      if (err)
 80100ac:	7ffb      	ldrb	r3, [r7, #31]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80100b2:	7ffb      	ldrb	r3, [r7, #31]
 80100b4:	e013      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80100b6:	215d      	movs	r1, #93	; 0x5d
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f000 fdb6 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80100c4:	2300      	movs	r3, #0
 80100c6:	e00a      	b.n	80100de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80100c8:	212c      	movs	r1, #44	; 0x2c
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	f000 fdad 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80100d0:	4603      	mov	r3, r0
 80100d2:	f083 0301 	eor.w	r3, r3, #1
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d0ad      	beq.n	8010038 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80100dc:	2303      	movs	r3, #3
  }
 80100de:	4618      	mov	r0, r3
 80100e0:	3724      	adds	r7, #36	; 0x24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd90      	pop	{r4, r7, pc}

080100e6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80100f0:	463b      	mov	r3, r7
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7f3 f9ac 	bl	8003450 <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit7reachedEv>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80100fe:	2305      	movs	r3, #5
 8010100:	e030      	b.n	8010164 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fd84 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8010108:	463b      	mov	r3, r7
 801010a:	4618      	mov	r0, r3
 801010c:	f7f3 f98d 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 8010110:	4603      	mov	r3, r0
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fdb1 	bl	8010c7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 801011a:	4603      	mov	r3, r0
 801011c:	73fb      	strb	r3, [r7, #15]
      if (err)
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d001      	beq.n	8010128 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8010124:	7bfb      	ldrb	r3, [r7, #15]
 8010126:	e01d      	b.n	8010164 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7ff ff09 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 801012e:	4603      	mov	r3, r0
 8010130:	73fb      	strb	r3, [r7, #15]
      if (err)
 8010132:	7bfb      	ldrb	r3, [r7, #15]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	e013      	b.n	8010164 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 801013c:	215d      	movs	r1, #93	; 0x5d
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fd73 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 801014a:	2300      	movs	r3, #0
 801014c:	e00a      	b.n	8010164 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 801014e:	212c      	movs	r1, #44	; 0x2c
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 fd6a 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8010156:	4603      	mov	r3, r0
 8010158:	f083 0301 	eor.w	r3, r3, #1
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d0d2      	beq.n	8010108 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8010162:	2303      	movs	r3, #3
  }
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 801016c:	b590      	push	{r4, r7, lr}
 801016e:	b091      	sub	sp, #68	; 0x44
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	713a      	strb	r2, [r7, #4]
 8010178:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 801017a:	463b      	mov	r3, r7
 801017c:	4618      	mov	r0, r3
 801017e:	f7f3 f967 	bl	8003450 <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit7reachedEv>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8010188:	2305      	movs	r3, #5
 801018a:	e0e7      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    move();
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f000 fd3f 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7ff fed4 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010198:	4603      	mov	r3, r0
 801019a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 801019e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 80101a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101aa:	e0d7      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    if (eat('}'))
 80101ac:	217d      	movs	r1, #125	; 0x7d
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 fd3b 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 80101ba:	2300      	movs	r3, #0
 80101bc:	e0ce      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = parseKey();
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fdf2 	bl	8010da8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 80101ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80101d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101d6:	e0c1      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f7ff feb1 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 80101de:	4603      	mov	r3, r0
 80101e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 80101e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d002      	beq.n	80101f2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80101ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80101f0:	e0b4      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(':'))
 80101f2:	213a      	movs	r1, #58	; 0x3a
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 fd18 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80101fa:	4603      	mov	r3, r0
 80101fc:	f083 0301 	eor.w	r3, r3, #1
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8010206:	2303      	movs	r3, #3
 8010208:	e0a8      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      JsonString key = _stringStorage.str();
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	f107 0318 	add.w	r3, r7, #24
 8010210:	4611      	mov	r1, r2
 8010212:	4618      	mov	r0, r3
 8010214:	f7f3 f9b6 	bl	8003584 <_ZNK11ArduinoJson7V6211HB6detail12StringCopier3strEv>
      TFilter memberFilter = filter[key.c_str()];
 8010218:	f107 0318 	add.w	r3, r7, #24
 801021c:	4618      	mov	r0, r3
 801021e:	f7f1 fd0a 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 8010222:	4603      	mov	r3, r0
 8010224:	627b      	str	r3, [r7, #36]	; 0x24
 8010226:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801022a:	1d3b      	adds	r3, r7, #4
 801022c:	4611      	mov	r1, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f000 fdda 	bl	8010de8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilterixIPKcEES2_RKT_>
      if (memberFilter.allow()) {
 8010234:	f107 0314 	add.w	r3, r7, #20
 8010238:	4618      	mov	r0, r3
 801023a:	f7f3 f8ac 	bl	8003396 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilter5allowEv>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d049      	beq.n	80102d8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x16c>
        VariantData* variant = object.getMember(adaptString(key.c_str()));
 8010244:	f107 0318 	add.w	r3, r7, #24
 8010248:	4618      	mov	r0, r3
 801024a:	f7f1 fcf4 	bl	8001c36 <_ZNK11ArduinoJson7V6211HB10JsonString5c_strEv>
 801024e:	4603      	mov	r3, r0
 8010250:	4618      	mov	r0, r3
 8010252:	f7fc fc04 	bl	800ca5e <_ZN11ArduinoJson7V6211HB6detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8010256:	4603      	mov	r3, r0
 8010258:	4619      	mov	r1, r3
 801025a:	68b8      	ldr	r0, [r7, #8]
 801025c:	f7fe fda5 	bl	800edaa <_ZNK11ArduinoJson7V6211HB6detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 8010260:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (!variant) {
 8010262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010264:	2b00      	cmp	r3, #0
 8010266:	d123      	bne.n	80102b0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x144>
          key = _stringStorage.save();
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801026e:	4611      	mov	r1, r2
 8010270:	4618      	mov	r0, r3
 8010272:	f7f3 f93d 	bl	80034f0 <_ZN11ArduinoJson7V6211HB6detail12StringCopier4saveEv>
 8010276:	f107 0318 	add.w	r3, r7, #24
 801027a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801027e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010280:	c303      	stmia	r3!, {r0, r1}
 8010282:	701a      	strb	r2, [r3, #0]
          VariantSlot* slot = object.addSlot(_pool);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6a1b      	ldr	r3, [r3, #32]
 8010288:	4619      	mov	r1, r3
 801028a:	68b8      	ldr	r0, [r7, #8]
 801028c:	f7f2 fa31 	bl	80026f2 <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8010290:	6378      	str	r0, [r7, #52]	; 0x34
          if (!slot)
 8010292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
            return DeserializationError::NoMemory;
 8010298:	2304      	movs	r3, #4
 801029a:	e05f      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
          slot->setKey(key);
 801029c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801029e:	f107 0318 	add.w	r3, r7, #24
 80102a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102a4:	f7f1 fd9b 	bl	8001dde <_ZN11ArduinoJson7V6211HB6detail11VariantSlot6setKeyENS0_10JsonStringE>
          variant = slot->data();
 80102a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102aa:	f7f1 fd36 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 80102ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        err = parseVariant(*variant, memberFilter, nestingLimit.decrement());
 80102b0:	463b      	mov	r3, r7
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7f3 f8b9 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 80102b8:	4603      	mov	r3, r0
 80102ba:	4622      	mov	r2, r4
 80102bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	f7ff f99a 	bl	800f5f8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80102c4:	4603      	mov	r3, r0
 80102c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 80102ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d015      	beq.n	80102fe <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 80102d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80102d6:	e041      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
        err = skipVariant(nestingLimit.decrement());
 80102d8:	463b      	mov	r3, r7
 80102da:	4618      	mov	r0, r3
 80102dc:	f7f3 f8a5 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 80102e0:	4603      	mov	r3, r0
 80102e2:	4619      	mov	r1, r3
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f000 fcc9 	bl	8010c7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80102ea:	4603      	mov	r3, r0
 80102ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 80102f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 80102f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80102fc:	e02e      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f7ff fe1e 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010304:	4603      	mov	r3, r0
 8010306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 801030a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801030e:	2b00      	cmp	r3, #0
 8010310:	d002      	beq.n	8010318 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1ac>
        return err;
 8010312:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010316:	e021      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (eat('}'))
 8010318:	217d      	movs	r1, #125	; 0x7d
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f000 fc85 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d001      	beq.n	801032a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
        return DeserializationError::Ok;
 8010326:	2300      	movs	r3, #0
 8010328:	e018      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(','))
 801032a:	212c      	movs	r1, #44	; 0x2c
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 fc7c 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8010332:	4603      	mov	r3, r0
 8010334:	f083 0301 	eor.w	r3, r3, #1
 8010338:	b2db      	uxtb	r3, r3
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1d6>
        return DeserializationError::InvalidInput;
 801033e:	2303      	movs	r3, #3
 8010340:	e00c      	b.n	801035c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7ff fdfc 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010348:	4603      	mov	r3, r0
 801034a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 801034e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010352:	2b00      	cmp	r3, #0
 8010354:	f43f af33 	beq.w	80101be <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8010358:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  }
 801035c:	4618      	mov	r0, r3
 801035e:	3744      	adds	r7, #68	; 0x44
 8010360:	46bd      	mov	sp, r7
 8010362:	bd90      	pop	{r4, r7, pc}

08010364 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 801036e:	463b      	mov	r3, r7
 8010370:	4618      	mov	r0, r3
 8010372:	f7f3 f86d 	bl	8003450 <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit7reachedEv>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d001      	beq.n	8010380 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 801037c:	2305      	movs	r3, #5
 801037e:	e06d      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fc45 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff fdda 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 801038c:	4603      	mov	r3, r0
 801038e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8010390:	7bfb      	ldrb	r3, [r7, #15]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d001      	beq.n	801039a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8010396:	7bfb      	ldrb	r3, [r7, #15]
 8010398:	e060      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 801039a:	217d      	movs	r1, #125	; 0x7d
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fc44 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 80103a8:	2300      	movs	r3, #0
 80103aa:	e057      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fd27 	bl	8010e00 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>
 80103b2:	4603      	mov	r3, r0
 80103b4:	73fb      	strb	r3, [r7, #15]
      if (err)
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
 80103be:	e04d      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff fdbd 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 80103c6:	4603      	mov	r3, r0
 80103c8:	73fb      	strb	r3, [r7, #15]
      if (err)
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
 80103d2:	e043      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 80103d4:	213a      	movs	r1, #58	; 0x3a
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fc27 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 80103dc:	4603      	mov	r3, r0
 80103de:	f083 0301 	eor.w	r3, r3, #1
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d001      	beq.n	80103ec <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 80103e8:	2303      	movs	r3, #3
 80103ea:	e037      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 80103ec:	463b      	mov	r3, r7
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7f3 f81b 	bl	800342a <_ZNK11ArduinoJson7V6211HB21DeserializationOption12NestingLimit9decrementEv>
 80103f4:	4603      	mov	r3, r0
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fc3f 	bl	8010c7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80103fe:	4603      	mov	r3, r0
 8010400:	73fb      	strb	r3, [r7, #15]
      if (err)
 8010402:	7bfb      	ldrb	r3, [r7, #15]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	e027      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff fd97 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010412:	4603      	mov	r3, r0
 8010414:	73fb      	strb	r3, [r7, #15]
      if (err)
 8010416:	7bfb      	ldrb	r3, [r7, #15]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d001      	beq.n	8010420 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	e01d      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8010420:	217d      	movs	r1, #125	; 0x7d
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 fc01 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 801042e:	2300      	movs	r3, #0
 8010430:	e014      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8010432:	212c      	movs	r1, #44	; 0x2c
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 fbf8 	bl	8010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 801043a:	4603      	mov	r3, r0
 801043c:	f083 0301 	eor.w	r3, r3, #1
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8010446:	2303      	movs	r3, #3
 8010448:	e008      	b.n	801045c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7ff fd78 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]
      if (err)
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0a8      	beq.n	80103ac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 801045a:	7bfb      	ldrb	r3, [r7, #15]
  }
 801045c:	4618      	mov	r0, r3
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
    _stringStorage.startString();
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4618      	mov	r0, r3
 8010472:	f7f3 f820 	bl	80034b6 <_ZN11ArduinoJson7V6211HB6detail12StringCopier11startStringEv>
    err = parseQuotedString();
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fcde 	bl	8010e38 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 801047c:	4603      	mov	r3, r0
 801047e:	75fb      	strb	r3, [r7, #23]
    if (err)
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8010486:	7dfb      	ldrb	r3, [r7, #23]
 8010488:	e00d      	b.n	80104a6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x42>
    variant.setString(_stringStorage.save());
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	f107 0308 	add.w	r3, r7, #8
 8010490:	4611      	mov	r1, r2
 8010492:	4618      	mov	r0, r3
 8010494:	f7f3 f82c 	bl	80034f0 <_ZN11ArduinoJson7V6211HB6detail12StringCopier4saveEv>
 8010498:	f107 0308 	add.w	r3, r7, #8
 801049c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801049e:	6838      	ldr	r0, [r7, #0]
 80104a0:	f7f1 fea8 	bl	80021f4 <_ZN11ArduinoJson7V6211HB6detail11VariantData9setStringENS0_10JsonStringE>
    return DeserializationError::Ok;
 80104a4:	2300      	movs	r3, #0
  }
 80104a6:	4618      	mov	r0, r3
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b084      	sub	sp, #16
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7ff fd78 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80104bc:	4603      	mov	r3, r0
 80104be:	73fb      	strb	r3, [r7, #15]
    move();
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fba5 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fd70 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80104cc:	4603      	mov	r3, r0
 80104ce:	73bb      	strb	r3, [r7, #14]
      move();
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 fb9d 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 80104d6:	7bba      	ldrb	r2, [r7, #14]
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d016      	beq.n	801050c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 80104de:	7bbb      	ldrb	r3, [r7, #14]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 80104e4:	2302      	movs	r3, #2
 80104e6:	e013      	b.n	8010510 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
 80104ea:	2b5c      	cmp	r3, #92	; 0x5c
 80104ec:	d1eb      	bne.n	80104c6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff fd5c 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bf14      	ite	ne
 80104fa:	2301      	movne	r3, #1
 80104fc:	2300      	moveq	r3, #0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	2b00      	cmp	r3, #0
 8010502:	d0e0      	beq.n	80104c6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
          move();
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fb83 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (;;) {
 801050a:	e7dc      	b.n	80104c6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        break;
 801050c:	bf00      	nop
    return DeserializationError::Ok;
 801050e:	2300      	movs	r3, #0
  }
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>:
  DeserializationError::Code skipKeyword(const char* s) {
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010522:	e016      	b.n	8010552 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x3a>
      char c = current();
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff fd41 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801052a:	4603      	mov	r3, r0
 801052c:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x20>
        return DeserializationError::IncompleteInput;
 8010534:	2302      	movs	r3, #2
 8010536:	e011      	b.n	801055c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      if (*s != c)
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	7bfa      	ldrb	r2, [r7, #15]
 801053e:	429a      	cmp	r2, r3
 8010540:	d001      	beq.n	8010546 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x2e>
        return DeserializationError::InvalidInput;
 8010542:	2303      	movs	r3, #3
 8010544:	e00a      	b.n	801055c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      ++s;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	3301      	adds	r3, #1
 801054a:	603b      	str	r3, [r7, #0]
      move();
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 fb5f 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    while (*s) {
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e4      	bne.n	8010524 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0xc>
    return DeserializationError::Ok;
 801055a:	2300      	movs	r3, #0
  }
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]
    char c = current();
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff fd1a 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010578:	4603      	mov	r3, r0
 801057a:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 801057c:	e010      	b.n	80105a0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x3c>
      move();
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fb46 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      _buffer[n++] = c;
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	73fa      	strb	r2, [r7, #15]
 801058a:	461a      	mov	r2, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4413      	add	r3, r2
 8010590:	7bba      	ldrb	r2, [r7, #14]
 8010592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      c = current();
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff fd08 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801059c:	4603      	mov	r3, r0
 801059e:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 80105a0:	7bbb      	ldrb	r3, [r7, #14]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 fcc9 	bl	8010f3a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d004      	beq.n	80105b8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 80105ae:	7bfb      	ldrb	r3, [r7, #15]
 80105b0:	2b3e      	cmp	r3, #62	; 0x3e
 80105b2:	d801      	bhi.n	80105b8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 80105b4:	2301      	movs	r3, #1
 80105b6:	e000      	b.n	80105ba <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x56>
 80105b8:	2300      	movs	r3, #0
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1df      	bne.n	801057e <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    _buffer[n] = 0;
 80105be:	7bfb      	ldrb	r3, [r7, #15]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	4413      	add	r3, r2
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (!parseNumber(_buffer, result))
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	3324      	adds	r3, #36	; 0x24
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7f2 fc99 	bl	8002f08 <_ZN11ArduinoJson7V6211HB6detail11parseNumberEPKcRNS1_11VariantDataE>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f083 0301 	eor.w	r3, r3, #1
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x82>
      return DeserializationError::InvalidInput;
 80105e2:	2303      	movs	r3, #3
 80105e4:	e000      	b.n	80105e8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x84>
    return DeserializationError::Ok;
 80105e6:	2300      	movs	r3, #0
  }
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
    char c = current();
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fcd7 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80105fe:	4603      	mov	r3, r0
 8010600:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8010602:	e007      	b.n	8010614 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x24>
      move();
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 fb03 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff fcce 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010610:	4603      	mov	r3, r0
 8010612:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	4618      	mov	r0, r3
 8010618:	f000 fc8f 	bl	8010f3a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f0      	bne.n	8010604 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8010622:	2300      	movs	r3, #0
  }
 8010624:	4618      	mov	r0, r3
 8010626:	3710      	adds	r7, #16
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 801062c:	b590      	push	{r4, r7, lr}
 801062e:	b089      	sub	sp, #36	; 0x24
 8010630:	af00      	add	r7, sp, #0
 8010632:	f107 0308 	add.w	r3, r7, #8
 8010636:	e883 0003 	stmia.w	r3, {r0, r1}
 801063a:	607a      	str	r2, [r7, #4]
  size_t size1 = s1.size();
 801063c:	f107 0308 	add.w	r3, r7, #8
 8010640:	4618      	mov	r0, r3
 8010642:	f7f1 fa89 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 8010646:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8010648:	1d3b      	adds	r3, r7, #4
 801064a:	4618      	mov	r0, r3
 801064c:	f7f1 fa1e 	bl	8001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>
 8010650:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8010652:	69ba      	ldr	r2, [r7, #24]
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	429a      	cmp	r2, r3
 8010658:	d001      	beq.n	801065e <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x32>
    return false;
 801065a:	2300      	movs	r3, #0
 801065c:	e021      	b.n	80106a2 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x76>
  for (size_t i = 0; i < size1; i++) {
 801065e:	2300      	movs	r3, #0
 8010660:	61fb      	str	r3, [r7, #28]
 8010662:	e019      	b.n	8010698 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x6c>
    if (s1[i] != s2[i])
 8010664:	f107 0308 	add.w	r3, r7, #8
 8010668:	69f9      	ldr	r1, [r7, #28]
 801066a:	4618      	mov	r0, r3
 801066c:	f7f1 fa80 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 8010670:	4603      	mov	r3, r0
 8010672:	461c      	mov	r4, r3
 8010674:	1d3b      	adds	r3, r7, #4
 8010676:	69f9      	ldr	r1, [r7, #28]
 8010678:	4618      	mov	r0, r3
 801067a:	f7f1 fa1b 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 801067e:	4603      	mov	r3, r0
 8010680:	429c      	cmp	r4, r3
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x66>
      return false;
 801068e:	2300      	movs	r3, #0
 8010690:	e007      	b.n	80106a2 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	3301      	adds	r3, #1
 8010696:	61fb      	str	r3, [r7, #28]
 8010698:	69fa      	ldr	r2, [r7, #28]
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	429a      	cmp	r2, r3
 801069e:	d3e1      	bcc.n	8010664 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x38>
  return true;
 80106a0:	2301      	movs	r3, #1
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3724      	adds	r7, #36	; 0x24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd90      	pop	{r4, r7, pc}

080106aa <_ZNK11ArduinoJson7V6211HB6detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80106b2:	687b      	ldr	r3, [r7, #4]
  }
 80106b4:	4618      	mov	r0, r3
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80106c0:	b590      	push	{r4, r7, lr}
 80106c2:	b087      	sub	sp, #28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 80106ca:	1d3b      	adds	r3, r7, #4
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7f1 f9dd 	bl	8001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>
 80106d2:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 80106d4:	463b      	mov	r3, r7
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7f1 f9d8 	bl	8001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>
 80106dc:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d001      	beq.n	80106ea <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 80106e6:	2300      	movs	r3, #0
 80106e8:	e020      	b.n	801072c <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 80106ea:	2300      	movs	r3, #0
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	e018      	b.n	8010722 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
    if (s1[i] != s2[i])
 80106f0:	1d3b      	adds	r3, r7, #4
 80106f2:	6979      	ldr	r1, [r7, #20]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7f1 f9dd 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 80106fa:	4603      	mov	r3, r0
 80106fc:	461c      	mov	r4, r3
 80106fe:	463b      	mov	r3, r7
 8010700:	6979      	ldr	r1, [r7, #20]
 8010702:	4618      	mov	r0, r3
 8010704:	f7f1 f9d6 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 8010708:	4603      	mov	r3, r0
 801070a:	429c      	cmp	r4, r3
 801070c:	bf14      	ite	ne
 801070e:	2301      	movne	r3, #1
 8010710:	2300      	moveq	r3, #0
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x5c>
      return false;
 8010718:	2300      	movs	r3, #0
 801071a:	e007      	b.n	801072c <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	3301      	adds	r3, #1
 8010720:	617b      	str	r3, [r7, #20]
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	429a      	cmp	r2, r3
 8010728:	d3e2      	bcc.n	80106f0 <_ZN11ArduinoJson7V6211HB6detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x30>
  return true;
 801072a:	2301      	movs	r3, #1
}
 801072c:	4618      	mov	r0, r3
 801072e:	371c      	adds	r7, #28
 8010730:	46bd      	mov	sp, r7
 8010732:	bd90      	pop	{r4, r7, pc}

08010734 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	4638      	mov	r0, r7
 801073e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 8010742:	463b      	mov	r3, r7
 8010744:	4618      	mov	r0, r3
 8010746:	f7f1 fa9f 	bl	8001c88 <_ZNK11ArduinoJson7V6211HB10JsonStringcvbEv>
 801074a:	4603      	mov	r3, r0
 801074c:	f083 0301 	eor.w	r3, r3, #1
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d106      	bne.n	8010764 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    _instance->setKey(s);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	463b      	mov	r3, r7
 801075c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801075e:	f7f1 fb3e 	bl	8001dde <_ZN11ArduinoJson7V6211HB6detail11VariantSlot6setKeyENS0_10JsonStringE>
 8010762:	e000      	b.n	8010766 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 8010764:	bf00      	nop
  }
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <_ZN11ArduinoJson7V6211HB6detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 8010776:	2301      	movs	r3, #1
 8010778:	461c      	mov	r4, r3
 801077a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801077e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010782:	f7f0 f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d001      	beq.n	8010790 <_ZN11ArduinoJson7V6211HB6detail5isnanIdEEbT_+0x24>
 801078c:	2300      	movs	r3, #0
 801078e:	461c      	mov	r4, r3
 8010790:	b2e3      	uxtb	r3, r4
}
 8010792:	4618      	mov	r0, r3
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	bd90      	pop	{r4, r7, pc}

0801079a <_ZN11ArduinoJson7V6211HB6detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 801079a:	b580      	push	{r7, lr}
 801079c:	b082      	sub	sp, #8
 801079e:	af00      	add	r7, sp, #0
 80107a0:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 80107a4:	f04f 0200 	mov.w	r2, #0
 80107a8:	f04f 0300 	mov.w	r3, #0
 80107ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107b0:	f7f0 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d110      	bne.n	80107dc <_ZN11ArduinoJson7V6211HB6detail5isinfIdEEbT_+0x42>
 80107ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	f7ef fd63 	bl	800028c <__adddf3>
 80107c6:	4602      	mov	r2, r0
 80107c8:	460b      	mov	r3, r1
 80107ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107ce:	f7f0 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d001      	beq.n	80107dc <_ZN11ArduinoJson7V6211HB6detail5isinfIdEEbT_+0x42>
 80107d8:	2301      	movs	r3, #1
 80107da:	e000      	b.n	80107de <_ZN11ArduinoJson7V6211HB6detail5isinfIdEEbT_+0x44>
 80107dc:	2300      	movs	r3, #0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
	...

080107e8 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 80107e8:	b5b0      	push	{r4, r5, r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 80107f4:	4b61      	ldr	r3, [pc, #388]	; (801097c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x194>)
 80107f6:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2209      	movs	r2, #9
 80107fc:	729a      	strb	r2, [r3, #10]

    exponent = normalize(value);
 80107fe:	463b      	mov	r3, r7
 8010800:	4618      	mov	r0, r3
 8010802:	f000 fbc1 	bl	8010f88 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd>
 8010806:	4603      	mov	r3, r0
 8010808:	461a      	mov	r2, r3
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	811a      	strh	r2, [r3, #8]

    integral = uint32_t(value);
 801080e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010812:	4610      	mov	r0, r2
 8010814:	4619      	mov	r1, r3
 8010816:	f7f0 f9b1 	bl	8000b7c <__aeabi_d2uiz>
 801081a:	4602      	mov	r2, r0
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	601a      	str	r2, [r3, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	61bb      	str	r3, [r7, #24]
 8010826:	e014      	b.n	8010852 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x6a>
      maxDecimalPart /= 10;
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	4a55      	ldr	r2, [pc, #340]	; (8010980 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x198>)
 801082c:	fba2 2303 	umull	r2, r3, r2, r3
 8010830:	08db      	lsrs	r3, r3, #3
 8010832:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801083a:	b2db      	uxtb	r3, r3
 801083c:	3b01      	subs	r3, #1
 801083e:	b2db      	uxtb	r3, r3
 8010840:	b25a      	sxtb	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	4a4d      	ldr	r2, [pc, #308]	; (8010980 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x198>)
 801084a:	fba2 2303 	umull	r2, r3, r2, r3
 801084e:	08db      	lsrs	r3, r3, #3
 8010850:	61bb      	str	r3, [r7, #24]
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	2b09      	cmp	r3, #9
 8010856:	d8e7      	bhi.n	8010828 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x40>
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 8010858:	e9d7 4500 	ldrd	r4, r5, [r7]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4618      	mov	r0, r3
 8010862:	f7ef fe4f 	bl	8000504 <__aeabi_ui2d>
 8010866:	4602      	mov	r2, r0
 8010868:	460b      	mov	r3, r1
 801086a:	4620      	mov	r0, r4
 801086c:	4629      	mov	r1, r5
 801086e:	f7ef fd0b 	bl	8000288 <__aeabi_dsub>
 8010872:	4602      	mov	r2, r0
 8010874:	460b      	mov	r3, r1
 8010876:	4614      	mov	r4, r2
 8010878:	461d      	mov	r5, r3
 801087a:	69f8      	ldr	r0, [r7, #28]
 801087c:	f7ef fe42 	bl	8000504 <__aeabi_ui2d>
 8010880:	4602      	mov	r2, r0
 8010882:	460b      	mov	r3, r1
 8010884:	4620      	mov	r0, r4
 8010886:	4629      	mov	r1, r5
 8010888:	f7ef feb6 	bl	80005f8 <__aeabi_dmul>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	e9c7 2304 	strd	r2, r3, [r7, #16]

    decimal = uint32_t(remainder);
 8010894:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010898:	f7f0 f970 	bl	8000b7c <__aeabi_d2uiz>
 801089c:	4602      	mov	r2, r0
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ef fe2c 	bl	8000504 <__aeabi_ui2d>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80108b4:	f7ef fce8 	bl	8000288 <__aeabi_dsub>
 80108b8:	4602      	mov	r2, r0
 80108ba:	460b      	mov	r3, r1
 80108bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	685c      	ldr	r4, [r3, #4]
 80108c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	f7ef fcde 	bl	800028c <__adddf3>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	4610      	mov	r0, r2
 80108d6:	4619      	mov	r1, r3
 80108d8:	f7f0 f950 	bl	8000b7c <__aeabi_d2uiz>
 80108dc:	4603      	mov	r3, r0
 80108de:	18e2      	adds	r2, r4, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	69fa      	ldr	r2, [r7, #28]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d82e      	bhi.n	801094c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x164>
      decimal = 0;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	605a      	str	r2, [r3, #4]
      integral++;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	1c5a      	adds	r2, r3, #1
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d021      	beq.n	801094c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x164>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b09      	cmp	r3, #9
 801090e:	d91d      	bls.n	801094c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x164>
        exponent++;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010916:	b29b      	uxth	r3, r3
 8010918:	3301      	adds	r3, #1
 801091a:	b29b      	uxth	r3, r3
 801091c:	b21a      	sxth	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	811a      	strh	r2, [r3, #8]
        integral = 1;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2201      	movs	r2, #1
 8010926:	601a      	str	r2, [r3, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 8010928:	e010      	b.n	801094c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x164>
      decimal /= 10;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	4a14      	ldr	r2, [pc, #80]	; (8010980 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x198>)
 8010930:	fba2 2303 	umull	r2, r3, r2, r3
 8010934:	08da      	lsrs	r2, r3, #3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8010940:	b2db      	uxtb	r3, r3
 8010942:	3b01      	subs	r3, #1
 8010944:	b2db      	uxtb	r3, r3
 8010946:	b25a      	sxtb	r2, r3
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6859      	ldr	r1, [r3, #4]
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x198>)
 8010952:	fba3 2301 	umull	r2, r3, r3, r1
 8010956:	08da      	lsrs	r2, r3, #3
 8010958:	4613      	mov	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4413      	add	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	1aca      	subs	r2, r1, r3
 8010962:	2a00      	cmp	r2, #0
 8010964:	d104      	bne.n	8010970 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x188>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801096c:	2b00      	cmp	r3, #0
 801096e:	dcdc      	bgt.n	801092a <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed+0x142>
    }
  }
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	4618      	mov	r0, r3
 8010974:	3720      	adds	r7, #32
 8010976:	46bd      	mov	sp, r7
 8010978:	bdb0      	pop	{r4, r5, r7, pc}
 801097a:	bf00      	nop
 801097c:	3b9aca00 	.word	0x3b9aca00
 8010980:	cccccccd 	.word	0xcccccccd

08010984 <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : _writer(writer), _count(0) {}
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	6812      	ldr	r2, [r2, #0]
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	605a      	str	r2, [r3, #4]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	ed87 0b00 	vstr	d0, [r7]
    _formatter.writeFloat(value);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	ed97 0b00 	vldr	d0, [r7]
 80109bc:	4618      	mov	r0, r3
 80109be:	f000 fbc1 	bl	8011144 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f000 f8bb 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80109c8:	4603      	mov	r3, r0
  }
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 80109d2:	b590      	push	{r4, r7, lr}
 80109d4:	b085      	sub	sp, #20
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	6039      	str	r1, [r7, #0]
    write('{');
 80109dc:	217b      	movs	r1, #123	; 0x7b
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 fc0e 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = object.head();
 80109e4:	6838      	ldr	r0, [r7, #0]
 80109e6:	f7f1 f98c 	bl	8001d02 <_ZNK11ArduinoJson7V6211HB6detail14CollectionData4headEv>
 80109ea:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 80109ec:	e01f      	b.n	8010a2e <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x5c>
      _formatter.writeString(slot->key());
 80109ee:	687c      	ldr	r4, [r7, #4]
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f7f1 fa1c 	bl	8001e2e <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot3keyEv>
 80109f6:	4603      	mov	r3, r0
 80109f8:	4619      	mov	r1, r3
 80109fa:	4620      	mov	r0, r4
 80109fc:	f000 fc10 	bl	8011220 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>
      write(':');
 8010a00:	213a      	movs	r1, #58	; 0x3a
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 fbfc 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      slot->data()->accept(*this);
 8010a08:	68f8      	ldr	r0, [r7, #12]
 8010a0a:	f7f1 f991 	bl	8001d30 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	6879      	ldr	r1, [r7, #4]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe ffb0 	bl	800f978 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f7f1 f9ab 	bl	8001d74 <_ZNK11ArduinoJson7V6211HB6detail11VariantSlot4nextEv>
 8010a1e:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d007      	beq.n	8010a36 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x64>
      write(',');
 8010a26:	212c      	movs	r1, #44	; 0x2c
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 fbe9 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1dc      	bne.n	80109ee <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x1c>
 8010a34:	e000      	b.n	8010a38 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x66>
        break;
 8010a36:	bf00      	nop
    write('}');
 8010a38:	217d      	movs	r1, #125	; 0x7d
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fbe0 	bl	8011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f87c 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010a46:	4603      	mov	r3, r0
  }
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd90      	pop	{r4, r7, pc}

08010a50 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
    _formatter.writeString(value, n);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	68b9      	ldr	r1, [r7, #8]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 fbfa 	bl	801125c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f000 f868 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010a6e:	4603      	mov	r3, r0
  }
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
    _formatter.writeRaw(data, n);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	68b9      	ldr	r1, [r7, #8]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 fc0b 	bl	80112a6 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f000 f854 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010a96:	4603      	mov	r3, r0
  }
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	e9c7 2300 	strd	r2, r3, [r7]
    _formatter.writeInteger(value);
 8010aac:	68f9      	ldr	r1, [r7, #12]
 8010aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ab2:	4608      	mov	r0, r1
 8010ab4:	f000 fc07 	bl	80112c6 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f000 f840 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010abe:	4603      	mov	r3, r0
  }
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	e9c7 2300 	strd	r2, r3, [r7]
    _formatter.writeInteger(value);
 8010ad4:	68f9      	ldr	r1, [r7, #12]
 8010ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ada:	4608      	mov	r0, r1
 8010adc:	f000 fc17 	bl	801130e <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f000 f82c 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010ae6:	4603      	mov	r3, r0
  }
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3710      	adds	r7, #16
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	460b      	mov	r3, r1
 8010afa:	70fb      	strb	r3, [r7, #3]
    _formatter.writeBoolean(value);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	78fa      	ldrb	r2, [r7, #3]
 8010b00:	4611      	mov	r1, r2
 8010b02:	4618      	mov	r0, r3
 8010b04:	f000 fc38 	bl	8011378 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 f818 	bl	8010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010b0e:	4603      	mov	r3, r0
  }
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
    _writer.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8010b22:	687c      	ldr	r4, [r7, #4]
 8010b24:	6838      	ldr	r0, [r7, #0]
 8010b26:	f7ef fba3 	bl	8000270 <strlen>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	6839      	ldr	r1, [r7, #0]
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 fc3b 	bl	80113ac <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8010b36:	bf00      	nop
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd90      	pop	{r4, r7, pc}

08010b3e <_ZNK11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
    return _formatter.bytesWritten();
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f000 fc45 	bl	80113d8 <_ZNK11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8010b4e:	4603      	mov	r3, r0
  }
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_>:
stringCompare(TAdaptedString1 s1, TAdaptedString2 s2) {
 8010b58:	b590      	push	{r4, r7, lr}
 8010b5a:	b089      	sub	sp, #36	; 0x24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	f107 0308 	add.w	r3, r7, #8
 8010b62:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b66:	607a      	str	r2, [r7, #4]
  size_t size1 = s1.size();
 8010b68:	f107 0308 	add.w	r3, r7, #8
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7f0 fff3 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 8010b72:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8010b74:	1d3b      	adds	r3, r7, #4
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f0 ff88 	bl	8001a8c <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamString4sizeEv>
 8010b7c:	6178      	str	r0, [r7, #20]
  size_t n = size1 < size2 ? size1 : size2;
 8010b7e:	69ba      	ldr	r2, [r7, #24]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d201      	bcs.n	8010b8a <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0x32>
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	e000      	b.n	8010b8c <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0x34>
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < n; i++) {
 8010b8e:	2300      	movs	r3, #0
 8010b90:	61fb      	str	r3, [r7, #28]
 8010b92:	e027      	b.n	8010be4 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0x8c>
    if (s1[i] != s2[i])
 8010b94:	f107 0308 	add.w	r3, r7, #8
 8010b98:	69f9      	ldr	r1, [r7, #28]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7f0 ffe8 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	461c      	mov	r4, r3
 8010ba4:	1d3b      	adds	r3, r7, #4
 8010ba6:	69f9      	ldr	r1, [r7, #28]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f0 ff83 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	429c      	cmp	r4, r3
 8010bb2:	bf14      	ite	ne
 8010bb4:	2301      	movne	r3, #1
 8010bb6:	2300      	moveq	r3, #0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d00f      	beq.n	8010bde <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0x86>
      return s1[i] - s2[i];
 8010bbe:	f107 0308 	add.w	r3, r7, #8
 8010bc2:	69f9      	ldr	r1, [r7, #28]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7f0 ffd3 	bl	8001b70 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamStringixEj>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	461c      	mov	r4, r3
 8010bce:	1d3b      	adds	r3, r7, #4
 8010bd0:	69f9      	ldr	r1, [r7, #28]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7f0 ff6e 	bl	8001ab4 <_ZNK11ArduinoJson7V6211HB6detail23ZeroTerminatedRamStringixEj>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	1ae3      	subs	r3, r4, r3
 8010bdc:	e014      	b.n	8010c08 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0xb0>
  for (size_t i = 0; i < n; i++) {
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	3301      	adds	r3, #1
 8010be2:	61fb      	str	r3, [r7, #28]
 8010be4:	69fa      	ldr	r2, [r7, #28]
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d3d3      	bcc.n	8010b94 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0x3c>
  if (size1 < size2)
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d202      	bcs.n	8010bfa <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0xa2>
    return -1;
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf8:	e006      	b.n	8010c08 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0xb0>
  if (size1 > size2)
 8010bfa:	69ba      	ldr	r2, [r7, #24]
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d901      	bls.n	8010c06 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0xae>
    return 1;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e000      	b.n	8010c08 <_ZN11ArduinoJson7V6211HB6detail13stringCompareINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEiE4typeES6_S7_+0xb0>
  return 0;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3724      	adds	r7, #36	; 0x24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd90      	pop	{r4, r7, pc}

08010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>:
  void move() {
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    _latch.clear();
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3314      	adds	r3, #20
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 fc01 	bl	8011424 <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>
  }
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>:
  bool eat(char charToSkip) {
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b082      	sub	sp, #8
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	460b      	mov	r3, r1
 8010c34:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff f9b8 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	461a      	mov	r2, r3
 8010c40:	78fb      	ldrb	r3, [r7, #3]
 8010c42:	4293      	cmp	r3, r2
 8010c44:	bf14      	ite	ne
 8010c46:	2301      	movne	r3, #1
 8010c48:	2300      	moveq	r3, #0
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x2a>
      return false;
 8010c50:	2300      	movs	r3, #0
 8010c52:	e003      	b.n	8010c5c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x32>
    move();
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff ffdb 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    return true;
 8010c5a:	2301      	movs	r3, #1
  }
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8010c6e:	bf00      	nop
  }
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7ff f95a 	bl	800ff40 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8010c90:	7bfb      	ldrb	r3, [r7, #15]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	e07c      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7ff f986 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b7b      	cmp	r3, #123	; 0x7b
 8010ca4:	dc71      	bgt.n	8010d8a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8010ca6:	2b5b      	cmp	r3, #91	; 0x5b
 8010ca8:	da04      	bge.n	8010cb4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8010caa:	2b22      	cmp	r3, #34	; 0x22
 8010cac:	d056      	beq.n	8010d5c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8010cae:	2b27      	cmp	r3, #39	; 0x27
 8010cb0:	d054      	beq.n	8010d5c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8010cb2:	e06a      	b.n	8010d8a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8010cb4:	3b5b      	subs	r3, #91	; 0x5b
 8010cb6:	2b20      	cmp	r3, #32
 8010cb8:	d867      	bhi.n	8010d8a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8010cba:	a201      	add	r2, pc, #4	; (adr r2, 8010cc0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010d45 	.word	0x08010d45
 8010cc4:	08010d8b 	.word	0x08010d8b
 8010cc8:	08010d8b 	.word	0x08010d8b
 8010ccc:	08010d8b 	.word	0x08010d8b
 8010cd0:	08010d8b 	.word	0x08010d8b
 8010cd4:	08010d8b 	.word	0x08010d8b
 8010cd8:	08010d8b 	.word	0x08010d8b
 8010cdc:	08010d8b 	.word	0x08010d8b
 8010ce0:	08010d8b 	.word	0x08010d8b
 8010ce4:	08010d8b 	.word	0x08010d8b
 8010ce8:	08010d8b 	.word	0x08010d8b
 8010cec:	08010d73 	.word	0x08010d73
 8010cf0:	08010d8b 	.word	0x08010d8b
 8010cf4:	08010d8b 	.word	0x08010d8b
 8010cf8:	08010d8b 	.word	0x08010d8b
 8010cfc:	08010d8b 	.word	0x08010d8b
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010d8b 	.word	0x08010d8b
 8010d08:	08010d8b 	.word	0x08010d8b
 8010d0c:	08010d7f 	.word	0x08010d7f
 8010d10:	08010d8b 	.word	0x08010d8b
 8010d14:	08010d8b 	.word	0x08010d8b
 8010d18:	08010d8b 	.word	0x08010d8b
 8010d1c:	08010d8b 	.word	0x08010d8b
 8010d20:	08010d8b 	.word	0x08010d8b
 8010d24:	08010d67 	.word	0x08010d67
 8010d28:	08010d8b 	.word	0x08010d8b
 8010d2c:	08010d8b 	.word	0x08010d8b
 8010d30:	08010d8b 	.word	0x08010d8b
 8010d34:	08010d8b 	.word	0x08010d8b
 8010d38:	08010d8b 	.word	0x08010d8b
 8010d3c:	08010d8b 	.word	0x08010d8b
 8010d40:	08010d51 	.word	0x08010d51
        return skipArray(nestingLimit);
 8010d44:	7839      	ldrb	r1, [r7, #0]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff f9cd 	bl	80100e6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	e021      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8010d50:	7839      	ldrb	r1, [r7, #0]
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f7ff fb06 	bl	8010364 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	e01b      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff fba6 	bl	80104ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 8010d62:	4603      	mov	r3, r0
 8010d64:	e016      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8010d66:	490d      	ldr	r1, [pc, #52]	; (8010d9c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7ff fbd5 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	e010      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8010d72:	490b      	ldr	r1, [pc, #44]	; (8010da0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff fbcf 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	e00a      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8010d7e:	4909      	ldr	r1, [pc, #36]	; (8010da4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7ff fbc9 	bl	8010518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 8010d86:	4603      	mov	r3, r0
 8010d88:	e004      	b.n	8010d94 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff fc30 	bl	80105f0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 8010d90:	4603      	mov	r3, r0
 8010d92:	bf00      	nop
  }
 8010d94:	4618      	mov	r0, r3
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	0801898c 	.word	0x0801898c
 8010da0:	08018994 	.word	0x08018994
 8010da4:	0801899c 	.word	0x0801899c

08010da8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
    _stringStorage.startString();
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f2 fb7f 	bl	80034b6 <_ZN11ArduinoJson7V6211HB6detail12StringCopier11startStringEv>
    if (isQuote(current())) {
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff f8f7 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f000 fb52 	bl	801146a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d004      	beq.n	8010dd6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 f833 	bl	8010e38 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	e004      	b.n	8010de0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 fb5b 	bl	8011492 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	bf00      	nop
  }
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <_ZNK11ArduinoJson7V6211HB6detail14AllowAllFilterixIPKcEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8010df2:	bf00      	nop
  }
 8010df4:	4618      	mov	r0, r3
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff f8cf 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 fb2a 	bl	801146a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d004      	beq.n	8010e26 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x26>
      return skipQuotedString();
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7ff fb46 	bl	80104ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 8010e22:	4603      	mov	r3, r0
 8010e24:	e004      	b.n	8010e30 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fb6c 	bl	8011504 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	bf00      	nop
  }
 8010e30:	4618      	mov	r0, r3
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8010e40:	f107 030c 	add.w	r3, r7, #12
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f2 fbe1 	bl	800360c <_ZN11ArduinoJson7V6211HB6detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7ff f8ae 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010e50:	4603      	mov	r3, r0
 8010e52:	75bb      	strb	r3, [r7, #22]
    move();
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff fedb 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f7ff f8a6 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010e60:	4603      	mov	r3, r0
 8010e62:	75fb      	strb	r3, [r7, #23]
      move();
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff fed3 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 8010e6a:	7dfa      	ldrb	r2, [r7, #23]
 8010e6c:	7dbb      	ldrb	r3, [r7, #22]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d051      	beq.n	8010f16 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d101      	bne.n	8010e7c <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8010e78:	2302      	movs	r3, #2
 8010e7a:	e05a      	b.n	8010f32 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
 8010e7e:	2b5c      	cmp	r3, #92	; 0x5c
 8010e80:	d140      	bne.n	8010f04 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xcc>
        c = current();
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff f892 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d101      	bne.n	8010e96 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8010e92:	2302      	movs	r3, #2
 8010e94:	e04d      	b.n	8010f32 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	2b75      	cmp	r3, #117	; 0x75
 8010e9a:	d125      	bne.n	8010ee8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xb0>
          move();
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7ff feb7 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          err = parseHex4(codeunit);
 8010ea2:	f107 030a 	add.w	r3, r7, #10
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 fb49 	bl	8011540 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	757b      	strb	r3, [r7, #21]
          if (err)
 8010eb2:	7d7b      	ldrb	r3, [r7, #21]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d001      	beq.n	8010ebc <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x84>
            return err;
 8010eb8:	7d7b      	ldrb	r3, [r7, #21]
 8010eba:	e03a      	b.n	8010f32 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8010ebc:	897a      	ldrh	r2, [r7, #10]
 8010ebe:	f107 030c 	add.w	r3, r7, #12
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f2 fbb2 	bl	800362e <_ZN11ArduinoJson7V6211HB6detail5Utf169Codepoint6appendEt>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d020      	beq.n	8010f12 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), _stringStorage);
 8010ed0:	f107 030c 	add.w	r3, r7, #12
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f2 fbdc 	bl	8003692 <_ZNK11ArduinoJson7V6211HB6detail5Utf169Codepoint5valueEv>
 8010eda:	4602      	mov	r2, r0
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f000 fb66 	bl	80115b2 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>
 8010ee6:	e7b8      	b.n	8010e5a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7f1 fcbc 	bl	8002868 <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence12unescapeCharEc>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d101      	bne.n	8010efe <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8010efa:	2303      	movs	r3, #3
 8010efc:	e019      	b.n	8010f32 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        move();
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f7ff fe86 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      _stringStorage.append(c);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7dfa      	ldrb	r2, [r7, #23]
 8010f08:	4611      	mov	r1, r2
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7f2 fb08 	bl	8003520 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc>
 8010f10:	e7a3      	b.n	8010e5a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
          continue;
 8010f12:	bf00      	nop
    for (;;) {
 8010f14:	e7a1      	b.n	8010e5a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        break;
 8010f16:	bf00      	nop
    if (!_stringStorage.isValid())
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7f2 fb21 	bl	8003562 <_ZNK11ArduinoJson7V6211HB6detail12StringCopier7isValidEv>
 8010f20:	4603      	mov	r3, r0
 8010f22:	f083 0301 	eor.w	r3, r3, #1
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8010f2c:	2304      	movs	r3, #4
 8010f2e:	e000      	b.n	8010f32 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8010f30:	2300      	movs	r3, #0
  }
 8010f32:	4618      	mov	r0, r3
 8010f34:	3718      	adds	r7, #24
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b082      	sub	sp, #8
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	4603      	mov	r3, r0
 8010f42:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	2239      	movs	r2, #57	; 0x39
 8010f48:	2130      	movs	r1, #48	; 0x30
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f000 fbaf 	bl	80116ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 8010f50:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10e      	bne.n	8010f74 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8010f56:	79fb      	ldrb	r3, [r7, #7]
 8010f58:	2b2b      	cmp	r3, #43	; 0x2b
 8010f5a:	d00b      	beq.n	8010f74 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8010f60:	d008      	beq.n	8010f74 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	2b2e      	cmp	r3, #46	; 0x2e
 8010f66:	d005      	beq.n	8010f74 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 8010f68:	79fb      	ldrb	r3, [r7, #7]
 8010f6a:	2b65      	cmp	r3, #101	; 0x65
 8010f6c:	d002      	beq.n	8010f74 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	2b45      	cmp	r3, #69	; 0x45
 8010f72:	d101      	bne.n	8010f78 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3e>
 8010f74:	2301      	movs	r3, #1
 8010f76:	e000      	b.n	8010f7a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x40>
 8010f78:	2300      	movs	r3, #0
  }
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	0000      	movs	r0, r0
 8010f84:	0000      	movs	r0, r0
	...

08010f88 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd>:

  static int16_t normalize(TFloat& value) {
 8010f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8a:	b089      	sub	sp, #36	; 0x24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	83fb      	strh	r3, [r7, #30]

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8010f94:	2308      	movs	r3, #8
 8010f96:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 8010f98:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa2:	61bb      	str	r3, [r7, #24]

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010faa:	a362      	add	r3, pc, #392	; (adr r3, 8011134 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x1ac>)
 8010fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb0:	f7ef fda8 	bl	8000b04 <__aeabi_dcmpge>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d04a      	beq.n	8011050 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 8010fba:	e045      	b.n	8011048 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0xc0>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010fc2:	f7fc faff 	bl	800d5c4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	60bb      	str	r3, [r7, #8]
 8010fca:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010fce:	f107 0308 	add.w	r3, r7, #8
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fc fb15 	bl	800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>
 8010fda:	ec53 2b10 	vmov	r2, r3, d0
 8010fde:	2101      	movs	r1, #1
 8010fe0:	460e      	mov	r6, r1
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef fd8d 	bl	8000b04 <__aeabi_dcmpge>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d101      	bne.n	8010ff4 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x6c>
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	461e      	mov	r6, r3
 8010ff4:	b2f3      	uxtb	r3, r6
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d01d      	beq.n	8011036 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0xae>
          value *= traits::negativeBinaryPowersOfTen()[index];
 8010ffa:	f7fc faf3 	bl	800d5e4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8010ffe:	4603      	mov	r3, r0
 8011000:	60fb      	str	r3, [r7, #12]
 8011002:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011006:	f107 030c 	add.w	r3, r7, #12
 801100a:	4611      	mov	r1, r2
 801100c:	4618      	mov	r0, r3
 801100e:	f7fc faf9 	bl	800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>
 8011012:	ec51 0b10 	vmov	r0, r1, d0
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101c:	f7ef faec 	bl	80005f8 <__aeabi_dmul>
 8011020:	4602      	mov	r2, r0
 8011022:	460b      	mov	r3, r1
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	b29a      	uxth	r2, r3
 801102e:	8bfb      	ldrh	r3, [r7, #30]
 8011030:	4413      	add	r3, r2
 8011032:	b29b      	uxth	r3, r3
 8011034:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 8011036:	69bb      	ldr	r3, [r7, #24]
 8011038:	105b      	asrs	r3, r3, #1
 801103a:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 801103c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011040:	b2db      	uxtb	r3, r3
 8011042:	3b01      	subs	r3, #1
 8011044:	b2db      	uxtb	r3, r3
 8011046:	777b      	strb	r3, [r7, #29]
 8011048:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801104c:	2b00      	cmp	r3, #0
 801104e:	dab5      	bge.n	8010fbc <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x34>
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011056:	f04f 0200 	mov.w	r2, #0
 801105a:	f04f 0300 	mov.w	r3, #0
 801105e:	f7ef fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d05c      	beq.n	8011122 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x19a>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801106e:	a333      	add	r3, pc, #204	; (adr r3, 801113c <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x1b4>)
 8011070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011074:	f7ef fd3c 	bl	8000af0 <__aeabi_dcmple>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	d051      	beq.n	8011122 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 801107e:	e04c      	b.n	801111a <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x192>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011086:	f7fc faad 	bl	800d5e4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 801108a:	4603      	mov	r3, r0
 801108c:	613b      	str	r3, [r7, #16]
 801108e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011092:	f107 0310 	add.w	r3, r7, #16
 8011096:	4611      	mov	r1, r2
 8011098:	4618      	mov	r0, r3
 801109a:	f7fc fab3 	bl	800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>
 801109e:	ec51 0b10 	vmov	r0, r1, d0
 80110a2:	f04f 0200 	mov.w	r2, #0
 80110a6:	4b22      	ldr	r3, [pc, #136]	; (8011130 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x1a8>)
 80110a8:	f7ef faa6 	bl	80005f8 <__aeabi_dmul>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	2101      	movs	r1, #1
 80110b2:	460e      	mov	r6, r1
 80110b4:	4620      	mov	r0, r4
 80110b6:	4629      	mov	r1, r5
 80110b8:	f7ef fd10 	bl	8000adc <__aeabi_dcmplt>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d101      	bne.n	80110c6 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x13e>
 80110c2:	2300      	movs	r3, #0
 80110c4:	461e      	mov	r6, r3
 80110c6:	b2f3      	uxtb	r3, r6
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d01d      	beq.n	8011108 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0x180>
          value *= traits::positiveBinaryPowersOfTen()[index];
 80110cc:	f7fc fa7a 	bl	800d5c4 <_ZN11ArduinoJson7V6211HB6detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80110d0:	4603      	mov	r3, r0
 80110d2:	617b      	str	r3, [r7, #20]
 80110d4:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80110d8:	f107 0314 	add.w	r3, r7, #20
 80110dc:	4611      	mov	r1, r2
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fc fa90 	bl	800d604 <_ZNK11ArduinoJson7V6211HB6detail7pgm_ptrIdEixEi>
 80110e4:	ec51 0b10 	vmov	r0, r1, d0
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f7ef fa83 	bl	80005f8 <__aeabi_dmul>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 80110fc:	8bfa      	ldrh	r2, [r7, #30]
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	b29b      	uxth	r3, r3
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	b29b      	uxth	r3, r3
 8011106:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	105b      	asrs	r3, r3, #1
 801110c:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 801110e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011112:	b2db      	uxtb	r3, r3
 8011114:	3b01      	subs	r3, #1
 8011116:	b2db      	uxtb	r3, r3
 8011118:	777b      	strb	r3, [r7, #29]
 801111a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801111e:	2b00      	cmp	r3, #0
 8011120:	daae      	bge.n	8011080 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdE9normalizeERd+0xf8>
      }
    }

    return powersOf10;
 8011122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 8011126:	4618      	mov	r0, r3
 8011128:	3724      	adds	r7, #36	; 0x24
 801112a:	46bd      	mov	sp, r7
 801112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801112e:	bf00      	nop
 8011130:	40240000 	.word	0x40240000
 8011134:	00000000 	.word	0x00000000
 8011138:	416312d0 	.word	0x416312d0
 801113c:	88e368f1 	.word	0x88e368f1
 8011140:	3ee4f8b5 	.word	0x3ee4f8b5

08011144 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b088      	sub	sp, #32
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 8011150:	ed97 0b00 	vldr	d0, [r7]
 8011154:	f7ff fb0a 	bl	801076c <_ZN11ArduinoJson7V6211HB6detail5isnanIdEEbT_>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d004      	beq.n	8011168 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 801115e:	4927      	ldr	r1, [pc, #156]	; (80111fc <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f7ff fcd9 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8011166:	e045      	b.n	80111f4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 8011168:	ed97 0b00 	vldr	d0, [r7]
 801116c:	f7ff fb15 	bl	801079a <_ZN11ArduinoJson7V6211HB6detail5isinfIdEEbT_>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d004      	beq.n	8011180 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 8011176:	4921      	ldr	r1, [pc, #132]	; (80111fc <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7ff fccd 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 801117e:	e039      	b.n	80111f4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 8011180:	f04f 0200 	mov.w	r2, #0
 8011184:	f04f 0300 	mov.w	r3, #0
 8011188:	e9d7 0100 	ldrd	r0, r1, [r7]
 801118c:	f7ef fca6 	bl	8000adc <__aeabi_dcmplt>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d009      	beq.n	80111aa <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 8011196:	212d      	movs	r1, #45	; 0x2d
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f000 fab7 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 801119e:	683c      	ldr	r4, [r7, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80111a6:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 80111aa:	f107 0314 	add.w	r3, r7, #20
 80111ae:	ed97 0b00 	vldr	d0, [r7]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff fb18 	bl	80107e8 <_ZN11ArduinoJson7V6211HB6detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	4619      	mov	r1, r3
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f000 fab5 	bl	801172c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 80111c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d006      	beq.n	80111d8 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80111d0:	4619      	mov	r1, r3
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f000 fadc 	bl	8011790 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 80111d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d009      	beq.n	80111f4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 80111e0:	2165      	movs	r1, #101	; 0x65
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f000 fa92 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 80111e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80111ec:	4619      	mov	r1, r3
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 fb12 	bl	8011818 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 80111f4:	3720      	adds	r7, #32
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bdb0      	pop	{r4, r5, r7, pc}
 80111fa:	bf00      	nop
 80111fc:	0801899c 	.word	0x0801899c

08011200 <_ZN11ArduinoJson7V6211HB6detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	460b      	mov	r3, r1
 801120a:	70fb      	strb	r3, [r7, #3]
    _formatter.writeRaw(c);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	78fa      	ldrb	r2, [r7, #3]
 8011210:	4611      	mov	r1, r2
 8011212:	4618      	mov	r0, r3
 8011214:	f000 fa7a 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8011218:	bf00      	nop
 801121a:	3708      	adds	r7, #8
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>:
  void writeString(const char* value) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 801122a:	2122      	movs	r1, #34	; 0x22
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f000 fa6d 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (*value)
 8011232:	e007      	b.n	8011244 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x24>
      writeChar(*value++);
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	1c5a      	adds	r2, r3, #1
 8011238:	603a      	str	r2, [r7, #0]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fb08 	bl	8011854 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (*value)
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1f3      	bne.n	8011234 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x14>
    writeRaw('\"');
 801124c:	2122      	movs	r1, #34	; 0x22
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fa5c 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8011254:	bf00      	nop
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8011268:	2122      	movs	r1, #34	; 0x22
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f000 fa4e 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 8011270:	e007      	b.n	8011282 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	60ba      	str	r2, [r7, #8]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	4619      	mov	r1, r3
 801127c:	68f8      	ldr	r0, [r7, #12]
 801127e:	f000 fae9 	bl	8011854 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	1e5a      	subs	r2, r3, #1
 8011286:	607a      	str	r2, [r7, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	bf14      	ite	ne
 801128c:	2301      	movne	r3, #1
 801128e:	2300      	moveq	r3, #0
 8011290:	b2db      	uxtb	r3, r3
 8011292:	2b00      	cmp	r3, #0
 8011294:	d1ed      	bne.n	8011272 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 8011296:	2122      	movs	r1, #34	; 0x22
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f000 fa37 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801129e:	bf00      	nop
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	60f8      	str	r0, [r7, #12]
 80112ae:	60b9      	str	r1, [r7, #8]
 80112b0:	607a      	str	r2, [r7, #4]
    _writer.write(reinterpret_cast<const uint8_t*>(s), n);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	68b9      	ldr	r1, [r7, #8]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 f877 	bl	80113ac <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80112be:	bf00      	nop
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 80112c6:	b5b0      	push	{r4, r5, r7, lr}
 80112c8:	b086      	sub	sp, #24
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	60f8      	str	r0, [r7, #12]
 80112ce:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 80112d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	da0c      	bge.n	80112f4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 80112da:	212d      	movs	r1, #45	; 0x2d
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 fa15 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80112e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112e6:	2100      	movs	r1, #0
 80112e8:	4254      	negs	r4, r2
 80112ea:	eb61 0503 	sbc.w	r5, r1, r3
 80112ee:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80112f2:	e003      	b.n	80112fc <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 80112f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 80112fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 f804 	bl	801130e <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8011306:	bf00      	nop
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bdb0      	pop	{r4, r5, r7, pc}

0801130e <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 801130e:	b580      	push	{r7, lr}
 8011310:	b08c      	sub	sp, #48	; 0x30
 8011312:	af00      	add	r7, sp, #0
 8011314:	60f8      	str	r0, [r7, #12]
 8011316:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 801131a:	f107 0310 	add.w	r3, r7, #16
 801131e:	3316      	adds	r3, #22
 8011320:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 8011322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011324:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 8011326:	e9d7 0100 	ldrd	r0, r1, [r7]
 801132a:	f04f 020a 	mov.w	r2, #10
 801132e:	f04f 0300 	mov.w	r3, #0
 8011332:	f7ef fc43 	bl	8000bbc <__aeabi_uldivmod>
 8011336:	b2d3      	uxtb	r3, r2
 8011338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801133a:	3a01      	subs	r2, #1
 801133c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801133e:	3330      	adds	r3, #48	; 0x30
 8011340:	b2da      	uxtb	r2, r3
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8011346:	e9d7 0100 	ldrd	r0, r1, [r7]
 801134a:	f04f 020a 	mov.w	r2, #10
 801134e:	f04f 0300 	mov.w	r3, #0
 8011352:	f7ef fc33 	bl	8000bbc <__aeabi_uldivmod>
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 801135e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011362:	4313      	orrs	r3, r2
 8011364:	d1df      	bne.n	8011326 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8011366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f000 fa9e 	bl	80118ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8011370:	bf00      	nop
 8011372:	3730      	adds	r7, #48	; 0x30
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	70fb      	strb	r3, [r7, #3]
    if (value)
 8011384:	78fb      	ldrb	r3, [r7, #3]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 801138a:	4906      	ldr	r1, [pc, #24]	; (80113a4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff fbc3 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8011392:	e003      	b.n	801139c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 8011394:	4904      	ldr	r1, [pc, #16]	; (80113a8 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7ff fbbe 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 801139c:	bf00      	nop
 801139e:	3708      	adds	r7, #8
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	0801898c 	.word	0x0801898c
 80113a8:	08018994 	.word	0x08018994

080113ac <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    _count += _writer.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
    _count += _writer.write(s, n);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 fa86 	bl	80118d0 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 80113c4:	4602      	mov	r2, r0
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	441a      	add	r2, r3
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	605a      	str	r2, [r3, #4]
  }
 80113d0:	bf00      	nop
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <_ZNK11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
    return _writer.count();
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f000 fa86 	bl	80118f4 <_ZNK11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 80113e8:	4603      	mov	r3, r0
  }
 80113ea:	4618      	mov	r0, r3
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <_ZN11ArduinoJson7V6211HB6detail21variantGetOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
    return 0;
  return var->getMember(key);
}

template <typename TAdaptedString>
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b084      	sub	sp, #16
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	60f8      	str	r0, [r7, #12]
 80113fa:	1d38      	adds	r0, r7, #4
 80113fc:	e880 0006 	stmia.w	r0, {r1, r2}
 8011400:	603b      	str	r3, [r7, #0]
                                   MemoryPool* pool) {
  if (!var)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <_ZN11ArduinoJson7V6211HB6detail21variantGetOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x1a>
    return 0;
 8011408:	2300      	movs	r3, #0
 801140a:	e007      	b.n	801141c <_ZN11ArduinoJson7V6211HB6detail21variantGetOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x2a>
  return var->getOrAddMember(key, pool);
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	1d3a      	adds	r2, r7, #4
 8011412:	ca06      	ldmia	r2, {r1, r2}
 8011414:	f000 fa7a 	bl	801190c <_ZN11ArduinoJson7V6211HB6detail11VariantData14getOrAddMemberINS1_14SizedRamStringEEEPS2_T_PNS1_10MemoryPoolE>
 8011418:	4603      	mov	r3, r0
 801141a:	bf00      	nop
}
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>:
  void clear() {
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
    _loaded = false;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	725a      	strb	r2, [r3, #9]
  }
 8011432:	bf00      	nop
 8011434:	370c      	adds	r7, #12
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr

0801143e <_ZN11ArduinoJson7V6211HB6detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>:
  }

 private:
  void load() {
 801143e:	b580      	push	{r7, lr}
 8011440:	b084      	sub	sp, #16
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!_ended);
    int c = _reader.read();
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 fa87 	bl	801195c <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>
 801144e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      _ended = true;
#endif
    _current = static_cast<char>(c > 0 ? c : 0);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011456:	b2da      	uxtb	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	721a      	strb	r2, [r3, #8]
    _loaded = true;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2201      	movs	r2, #1
 8011460:	725a      	strb	r2, [r3, #9]
  }
 8011462:	bf00      	nop
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 801146a:	b480      	push	{r7}
 801146c:	b083      	sub	sp, #12
 801146e:	af00      	add	r7, sp, #0
 8011470:	4603      	mov	r3, r0
 8011472:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8011474:	79fb      	ldrb	r3, [r7, #7]
 8011476:	2b27      	cmp	r3, #39	; 0x27
 8011478:	d002      	beq.n	8011480 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x16>
 801147a:	79fb      	ldrb	r3, [r7, #7]
 801147c:	2b22      	cmp	r3, #34	; 0x22
 801147e:	d101      	bne.n	8011484 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1a>
 8011480:	2301      	movs	r3, #1
 8011482:	e000      	b.n	8011486 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1c>
 8011484:	2300      	movs	r3, #0
  }
 8011486:	4618      	mov	r0, r3
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8011492:	b580      	push	{r7, lr}
 8011494:	b084      	sub	sp, #16
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
    char c = current();
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7fe fd86 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80114a0:	4603      	mov	r3, r0
 80114a2:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 80114a4:	7bfb      	ldrb	r3, [r7, #15]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f000 fa7b 	bl	80119a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d015      	beq.n	80114de <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x4c>
        move();
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fbac 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
        _stringStorage.append(c);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7bfa      	ldrb	r2, [r7, #15]
 80114bc:	4611      	mov	r1, r2
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f2 f82e 	bl	8003520 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc>
        c = current();
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7fe fd71 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80114ca:	4603      	mov	r3, r0
 80114cc:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 80114ce:	7bfb      	ldrb	r3, [r7, #15]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f000 fa66 	bl	80119a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d1ea      	bne.n	80114b2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x20>
 80114dc:	e001      	b.n	80114e2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 80114de:	2303      	movs	r3, #3
 80114e0:	e00c      	b.n	80114fc <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    if (!_stringStorage.isValid())
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7f2 f83c 	bl	8003562 <_ZNK11ArduinoJson7V6211HB6detail12StringCopier7isValidEv>
 80114ea:	4603      	mov	r3, r0
 80114ec:	f083 0301 	eor.w	r3, r3, #1
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d001      	beq.n	80114fa <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 80114f6:	2304      	movs	r3, #4
 80114f8:	e000      	b.n	80114fc <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80114fa:	2300      	movs	r3, #0
  }
 80114fc:	4618      	mov	r0, r3
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
    char c = current();
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7fe fd4d 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8011512:	4603      	mov	r3, r0
 8011514:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8011516:	e007      	b.n	8011528 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x24>
      move();
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7ff fb79 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7fe fd44 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fa39 	bl	80119a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1f0      	bne.n	8011518 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8011536:	2300      	movs	r3, #0
  }
 8011538:	4618      	mov	r0, r3
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
    result = 0;
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2200      	movs	r2, #0
 801154e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8011550:	2300      	movs	r3, #0
 8011552:	73fb      	strb	r3, [r7, #15]
 8011554:	e025      	b.n	80115a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x62>
      char digit = current();
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7fe fd28 	bl	800ffac <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801155c:	4603      	mov	r3, r0
 801155e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8011560:	7bbb      	ldrb	r3, [r7, #14]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d101      	bne.n	801156a <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 8011566:	2302      	movs	r3, #2
 8011568:	e01f      	b.n	80115aa <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 801156a:	7bbb      	ldrb	r3, [r7, #14]
 801156c:	4618      	mov	r0, r3
 801156e:	f000 fa3f 	bl	80119f0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>
 8011572:	4603      	mov	r3, r0
 8011574:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8011576:	7b7b      	ldrb	r3, [r7, #13]
 8011578:	2b0f      	cmp	r3, #15
 801157a:	d901      	bls.n	8011580 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 801157c:	2303      	movs	r3, #3
 801157e:	e014      	b.n	80115aa <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	011b      	lsls	r3, r3, #4
 8011586:	b21a      	sxth	r2, r3
 8011588:	7b7b      	ldrb	r3, [r7, #13]
 801158a:	b21b      	sxth	r3, r3
 801158c:	4313      	orrs	r3, r2
 801158e:	b21b      	sxth	r3, r3
 8011590:	b29a      	uxth	r2, r3
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	801a      	strh	r2, [r3, #0]
      move();
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7ff fb3a 	bl	8010c10 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	3301      	adds	r3, #1
 80115a0:	73fb      	strb	r3, [r7, #15]
 80115a2:	7bfb      	ldrb	r3, [r7, #15]
 80115a4:	2b03      	cmp	r3, #3
 80115a6:	d9d6      	bls.n	8011556 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 80115a8:	2300      	movs	r3, #0
  }
 80115aa:	4618      	mov	r0, r3
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b086      	sub	sp, #24
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b7f      	cmp	r3, #127	; 0x7f
 80115c0:	d806      	bhi.n	80115d0 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	4619      	mov	r1, r3
 80115c8:	6838      	ldr	r0, [r7, #0]
 80115ca:	f7f1 ffa9 	bl	8003520 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 80115ce:	e06a      	b.n	80116a6 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xf4>
    char* p = buf;
 80115d0:	f107 030c 	add.w	r3, r7, #12
 80115d4:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	617a      	str	r2, [r7, #20]
 80115dc:	2200      	movs	r2, #0
 80115de:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	1c59      	adds	r1, r3, #1
 80115ee:	6179      	str	r1, [r7, #20]
 80115f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80115f4:	b2d2      	uxtb	r2, r2
 80115f6:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	099b      	lsrs	r3, r3, #6
 80115fc:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80115fe:	8a7b      	ldrh	r3, [r7, #18]
 8011600:	2b1f      	cmp	r3, #31
 8011602:	d809      	bhi.n	8011618 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x66>
      *(p++) = char(codepoint16 | 0xC0);
 8011604:	8a7b      	ldrh	r3, [r7, #18]
 8011606:	b2da      	uxtb	r2, r3
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	6179      	str	r1, [r7, #20]
 801160e:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8011612:	b2d2      	uxtb	r2, r2
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	e03a      	b.n	801168e <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8011618:	8a7b      	ldrh	r3, [r7, #18]
 801161a:	b2db      	uxtb	r3, r3
 801161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011620:	b2da      	uxtb	r2, r3
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	1c59      	adds	r1, r3, #1
 8011626:	6179      	str	r1, [r7, #20]
 8011628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801162c:	b2d2      	uxtb	r2, r2
 801162e:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 8011630:	8a7b      	ldrh	r3, [r7, #18]
 8011632:	099b      	lsrs	r3, r3, #6
 8011634:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 8011636:	8a7b      	ldrh	r3, [r7, #18]
 8011638:	2b0f      	cmp	r3, #15
 801163a:	d809      	bhi.n	8011650 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x9e>
        *(p++) = char(codepoint16 | 0xE0);
 801163c:	8a7b      	ldrh	r3, [r7, #18]
 801163e:	b2da      	uxtb	r2, r3
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	1c59      	adds	r1, r3, #1
 8011644:	6179      	str	r1, [r7, #20]
 8011646:	f062 021f 	orn	r2, r2, #31
 801164a:	b2d2      	uxtb	r2, r2
 801164c:	701a      	strb	r2, [r3, #0]
 801164e:	e01e      	b.n	801168e <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8011650:	8a7b      	ldrh	r3, [r7, #18]
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011658:	b2da      	uxtb	r2, r3
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	1c59      	adds	r1, r3, #1
 801165e:	6179      	str	r1, [r7, #20]
 8011660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011664:	b2d2      	uxtb	r2, r2
 8011666:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8011668:	8a7b      	ldrh	r3, [r7, #18]
 801166a:	099b      	lsrs	r3, r3, #6
 801166c:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 801166e:	8a7b      	ldrh	r3, [r7, #18]
 8011670:	b2da      	uxtb	r2, r3
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	1c59      	adds	r1, r3, #1
 8011676:	6179      	str	r1, [r7, #20]
 8011678:	f062 020f 	orn	r2, r2, #15
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8011680:	e005      	b.n	801168e <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      str.append(*p);
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	4619      	mov	r1, r3
 8011688:	6838      	ldr	r0, [r7, #0]
 801168a:	f7f1 ff49 	bl	8003520 <_ZN11ArduinoJson7V6211HB6detail12StringCopier6appendEc>
    while (*(--p)) {
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	3b01      	subs	r3, #1
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	bf14      	ite	ne
 801169c:	2301      	movne	r3, #1
 801169e:	2300      	moveq	r3, #0
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1ed      	bne.n	8011682 <_ZN11ArduinoJson7V6211HB6detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xd0>
}
 80116a6:	bf00      	nop
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 80116ae:	b480      	push	{r7}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	4603      	mov	r3, r0
 80116b6:	71fb      	strb	r3, [r7, #7]
 80116b8:	460b      	mov	r3, r1
 80116ba:	71bb      	strb	r3, [r7, #6]
 80116bc:	4613      	mov	r3, r2
 80116be:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 80116c0:	79ba      	ldrb	r2, [r7, #6]
 80116c2:	79fb      	ldrb	r3, [r7, #7]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d805      	bhi.n	80116d4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 80116c8:	79fa      	ldrb	r2, [r7, #7]
 80116ca:	797b      	ldrb	r3, [r7, #5]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d801      	bhi.n	80116d4 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 80116d0:	2301      	movs	r3, #1
 80116d2:	e000      	b.n	80116d6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x28>
 80116d4:	2300      	movs	r3, #0
  }
 80116d6:	4618      	mov	r0, r3
 80116d8:	370c      	adds	r7, #12
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr

080116e2 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>:
VariantData* variantGetMember(const VariantData* var, TAdaptedString key) {
 80116e2:	b580      	push	{r7, lr}
 80116e4:	b082      	sub	sp, #8
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	6039      	str	r1, [r7, #0]
  if (!var)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d101      	bne.n	80116f6 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x14>
    return 0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	e006      	b.n	8011704 <_ZN11ArduinoJson7V6211HB6detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x22>
  return var->getMember(key);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6839      	ldr	r1, [r7, #0]
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fc f93d 	bl	800d97a <_ZNK11ArduinoJson7V6211HB6detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>
 8011700:	4603      	mov	r3, r0
 8011702:	bf00      	nop
}
 8011704:	4618      	mov	r0, r3
 8011706:	3708      	adds	r7, #8
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	460b      	mov	r3, r1
 8011716:	70fb      	strb	r3, [r7, #3]
    _writer.write(static_cast<uint8_t>(c));
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	78fa      	ldrb	r2, [r7, #3]
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f000 f97f 	bl	8011a22 <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 8011724:	bf00      	nop
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 801172c:	b580      	push	{r7, lr}
 801172e:	b08a      	sub	sp, #40	; 0x28
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	3316      	adds	r3, #22
 801173c:	623b      	str	r3, [r7, #32]
    char* begin = end;
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 8011742:	6839      	ldr	r1, [r7, #0]
 8011744:	4b11      	ldr	r3, [pc, #68]	; (801178c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8011746:	fba3 2301 	umull	r2, r3, r3, r1
 801174a:	08da      	lsrs	r2, r3, #3
 801174c:	4613      	mov	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4413      	add	r3, r2
 8011752:	005b      	lsls	r3, r3, #1
 8011754:	1aca      	subs	r2, r1, r3
 8011756:	b2d3      	uxtb	r3, r2
 8011758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801175a:	3a01      	subs	r2, #1
 801175c:	627a      	str	r2, [r7, #36]	; 0x24
 801175e:	3330      	adds	r3, #48	; 0x30
 8011760:	b2da      	uxtb	r2, r3
 8011762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011764:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	4a08      	ldr	r2, [pc, #32]	; (801178c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 801176a:	fba2 2303 	umull	r2, r3, r2, r3
 801176e:	08db      	lsrs	r3, r3, #3
 8011770:	603b      	str	r3, [r7, #0]
    } while (value);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d1e4      	bne.n	8011742 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8011778:	6a3a      	ldr	r2, [r7, #32]
 801177a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f895 	bl	80118ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8011782:	bf00      	nop
 8011784:	3728      	adds	r7, #40	; 0x28
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	cccccccd 	.word	0xcccccccd

08011790 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	; 0x28
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	4613      	mov	r3, r2
 801179c:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 801179e:	f107 0310 	add.w	r3, r7, #16
 80117a2:	3310      	adds	r3, #16
 80117a4:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80117a6:	6a3b      	ldr	r3, [r7, #32]
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 80117aa:	e017      	b.n	80117dc <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 80117ac:	68b9      	ldr	r1, [r7, #8]
 80117ae:	4b19      	ldr	r3, [pc, #100]	; (8011814 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80117b0:	fba3 2301 	umull	r2, r3, r3, r1
 80117b4:	08da      	lsrs	r2, r3, #3
 80117b6:	4613      	mov	r3, r2
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	4413      	add	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	1aca      	subs	r2, r1, r3
 80117c0:	b2d3      	uxtb	r3, r2
 80117c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117c4:	3a01      	subs	r2, #1
 80117c6:	627a      	str	r2, [r7, #36]	; 0x24
 80117c8:	3330      	adds	r3, #48	; 0x30
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ce:	701a      	strb	r2, [r3, #0]
      value /= 10;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	4a10      	ldr	r2, [pc, #64]	; (8011814 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80117d4:	fba2 2303 	umull	r2, r3, r2, r3
 80117d8:	08db      	lsrs	r3, r3, #3
 80117da:	60bb      	str	r3, [r7, #8]
    while (width--) {
 80117dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	3a01      	subs	r2, #1
 80117e4:	b2d2      	uxtb	r2, r2
 80117e6:	71fa      	strb	r2, [r7, #7]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	bf14      	ite	ne
 80117ec:	2301      	movne	r3, #1
 80117ee:	2300      	moveq	r3, #0
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1da      	bne.n	80117ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 80117f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f8:	3b01      	subs	r3, #1
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	222e      	movs	r2, #46	; 0x2e
 8011800:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8011802:	6a3a      	ldr	r2, [r7, #32]
 8011804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f000 f850 	bl	80118ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801180c:	bf00      	nop
 801180e:	3728      	adds	r7, #40	; 0x28
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	cccccccd 	.word	0xcccccccd

08011818 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	460b      	mov	r3, r1
 8011822:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8011824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011828:	2b00      	cmp	r3, #0
 801182a:	da07      	bge.n	801183c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 801182c:	212d      	movs	r1, #45	; 0x2d
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7ff ff6c 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8011834:	887b      	ldrh	r3, [r7, #2]
 8011836:	425b      	negs	r3, r3
 8011838:	81fb      	strh	r3, [r7, #14]
 801183a:	e001      	b.n	8011840 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 801183c:	887b      	ldrh	r3, [r7, #2]
 801183e:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8011840:	89fb      	ldrh	r3, [r7, #14]
 8011842:	4619      	mov	r1, r3
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 f903 	bl	8011a50 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 801184a:	bf00      	nop
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	4618      	mov	r0, r3
 8011864:	f7f0 ffe3 	bl	800282e <_ZN11ArduinoJson7V6211HB6detail14EscapeSequence10escapeCharEc>
 8011868:	4603      	mov	r3, r0
 801186a:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 801186c:	7bfb      	ldrb	r3, [r7, #15]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d009      	beq.n	8011886 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 8011872:	215c      	movs	r1, #92	; 0x5c
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7ff ff49 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 801187a:	7bfb      	ldrb	r3, [r7, #15]
 801187c:	4619      	mov	r1, r3
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f7ff ff44 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8011884:	e00c      	b.n	80118a0 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 8011886:	78fb      	ldrb	r3, [r7, #3]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d005      	beq.n	8011898 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 801188c:	78fb      	ldrb	r3, [r7, #3]
 801188e:	4619      	mov	r1, r3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff ff3b 	bl	801170c <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8011896:	e003      	b.n	80118a0 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8011898:	4903      	ldr	r1, [pc, #12]	; (80118a8 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f7ff f93c 	bl	8010b18 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80118a0:	bf00      	nop
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	080189a4 	.word	0x080189a4

080118ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
    _writer.write(reinterpret_cast<const uint8_t*>(begin),
 80118b8:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	1ad3      	subs	r3, r2, r3
    _writer.write(reinterpret_cast<const uint8_t*>(begin),
 80118c0:	461a      	mov	r2, r3
 80118c2:	68b9      	ldr	r1, [r7, #8]
 80118c4:	f7ff fd72 	bl	80113ac <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80118c8:	bf00      	nop
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    _str->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
    _str->append(reinterpret_cast<const char*>(s), n);
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f005 fe31 	bl	801754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 80118ea:	687b      	ldr	r3, [r7, #4]
  }
 80118ec:	4618      	mov	r0, r3
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <_ZNK11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
    return _count;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
  }
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <_ZN11ArduinoJson7V6211HB6detail11VariantData14getOrAddMemberINS1_14SizedRamStringEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	1d38      	adds	r0, r7, #4
 8011916:	e880 0006 	stmia.w	r0, {r1, r2}
 801191a:	603b      	str	r3, [r7, #0]
    if (isNull())
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f7f0 fc19 	bl	8002154 <_ZNK11ArduinoJson7V6211HB6detail11VariantData6isNullEv>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d002      	beq.n	801192e <_ZN11ArduinoJson7V6211HB6detail11VariantData14getOrAddMemberINS1_14SizedRamStringEEEPS2_T_PNS1_10MemoryPoolE+0x22>
      toObject();
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f7f0 fc9d 	bl	8002268 <_ZN11ArduinoJson7V6211HB6detail11VariantData8toObjectEv>
    if (!isObject())
 801192e:	68f8      	ldr	r0, [r7, #12]
 8011930:	f7f0 fbfd 	bl	800212e <_ZNK11ArduinoJson7V6211HB6detail11VariantData8isObjectEv>
 8011934:	4603      	mov	r3, r0
 8011936:	f083 0301 	eor.w	r3, r3, #1
 801193a:	b2db      	uxtb	r3, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	d001      	beq.n	8011944 <_ZN11ArduinoJson7V6211HB6detail11VariantData14getOrAddMemberINS1_14SizedRamStringEEEPS2_T_PNS1_10MemoryPoolE+0x38>
      return 0;
 8011940:	2300      	movs	r3, #0
 8011942:	e007      	b.n	8011954 <_ZN11ArduinoJson7V6211HB6detail11VariantData14getOrAddMemberINS1_14SizedRamStringEEEPS2_T_PNS1_10MemoryPoolE+0x48>
    return _content.asCollection.getOrAddMember(key, pool);
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	1d3a      	adds	r2, r7, #4
 801194a:	ca06      	ldmia	r2, {r1, r2}
 801194c:	f000 f8b4 	bl	8011ab8 <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8011950:	4603      	mov	r3, r0
 8011952:	bf00      	nop
  }
 8011954:	4618      	mov	r0, r3
 8011956:	3710      	adds	r7, #16
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>:
  int read() {
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
    if (_ptr < _end)
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3304      	adds	r3, #4
 801196a:	4619      	mov	r1, r3
 801196c:	4610      	mov	r0, r2
 801196e:	f000 f8cf 	bl	8011b10 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d00e      	beq.n	8011996 <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3a>
      return static_cast<unsigned char>(*_ptr++);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2100      	movs	r1, #0
 801197c:	4618      	mov	r0, r3
 801197e:	f000 f8df 	bl	8011b40 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>
 8011982:	4603      	mov	r3, r0
 8011984:	60fb      	str	r3, [r7, #12]
 8011986:	f107 030c 	add.w	r3, r7, #12
 801198a:	4618      	mov	r0, r3
 801198c:	f7fa ff34 	bl	800c7f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8011990:	4603      	mov	r3, r0
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	e001      	b.n	801199a <_ZN11ArduinoJson7V6211HB6detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3e>
      return -1;
 8011996:	f04f 33ff 	mov.w	r3, #4294967295
  }
 801199a:	4618      	mov	r0, r3
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b082      	sub	sp, #8
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	4603      	mov	r3, r0
 80119aa:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80119ac:	79fb      	ldrb	r3, [r7, #7]
 80119ae:	2239      	movs	r2, #57	; 0x39
 80119b0:	2130      	movs	r1, #48	; 0x30
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7ff fe7b 	bl	80116ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d111      	bne.n	80119e2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
 80119be:	79fb      	ldrb	r3, [r7, #7]
 80119c0:	227a      	movs	r2, #122	; 0x7a
 80119c2:	215f      	movs	r1, #95	; 0x5f
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7ff fe72 	bl	80116ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d108      	bne.n	80119e2 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 80119d0:	79fb      	ldrb	r3, [r7, #7]
 80119d2:	225a      	movs	r2, #90	; 0x5a
 80119d4:	2141      	movs	r1, #65	; 0x41
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7ff fe69 	bl	80116ae <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 80119dc:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x44>
 80119e2:	2301      	movs	r3, #1
 80119e4:	e000      	b.n	80119e8 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x46>
 80119e6:	2300      	movs	r3, #0
  }
 80119e8:	4618      	mov	r0, r3
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	4603      	mov	r3, r0
 80119f8:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 80119fa:	79fb      	ldrb	r3, [r7, #7]
 80119fc:	2b40      	cmp	r3, #64	; 0x40
 80119fe:	d803      	bhi.n	8011a08 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 8011a00:	79fb      	ldrb	r3, [r7, #7]
 8011a02:	3b30      	subs	r3, #48	; 0x30
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	e006      	b.n	8011a16 <_ZN11ArduinoJson7V6211HB6detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8011a08:	79fb      	ldrb	r3, [r7, #7]
 8011a0a:	f023 0320 	bic.w	r3, r3, #32
 8011a0e:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 8011a10:	79fb      	ldrb	r3, [r7, #7]
 8011a12:	3b37      	subs	r3, #55	; 0x37
 8011a14:	b2db      	uxtb	r3, r3
  }
 8011a16:	4618      	mov	r0, r3
 8011a18:	370c      	adds	r7, #12
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <_ZN11ArduinoJson7V6211HB6detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b082      	sub	sp, #8
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	70fb      	strb	r3, [r7, #3]
    _count += _writer.write(c);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	78fa      	ldrb	r2, [r7, #3]
 8011a32:	4611      	mov	r1, r2
 8011a34:	4618      	mov	r0, r3
 8011a36:	f000 f89b 	bl	8011b70 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	441a      	add	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	605a      	str	r2, [r3, #4]
  }
 8011a46:	bf00      	nop
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
	...

08011a50 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b08a      	sub	sp, #40	; 0x28
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8011a5c:	f107 0308 	add.w	r3, r7, #8
 8011a60:	3316      	adds	r3, #22
 8011a62:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 8011a68:	887a      	ldrh	r2, [r7, #2]
 8011a6a:	4b12      	ldr	r3, [pc, #72]	; (8011ab4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8011a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8011a70:	08d9      	lsrs	r1, r3, #3
 8011a72:	460b      	mov	r3, r1
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	440b      	add	r3, r1
 8011a78:	005b      	lsls	r3, r3, #1
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a82:	3a01      	subs	r2, #1
 8011a84:	627a      	str	r2, [r7, #36]	; 0x24
 8011a86:	3330      	adds	r3, #48	; 0x30
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8011a8e:	887b      	ldrh	r3, [r7, #2]
 8011a90:	4a08      	ldr	r2, [pc, #32]	; (8011ab4 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8011a92:	fba2 2303 	umull	r2, r3, r2, r3
 8011a96:	08db      	lsrs	r3, r3, #3
 8011a98:	807b      	strh	r3, [r7, #2]
    } while (value);
 8011a9a:	887b      	ldrh	r3, [r7, #2]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1e3      	bne.n	8011a68 <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8011aa0:	6a3a      	ldr	r2, [r7, #32]
 8011aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7ff ff01 	bl	80118ac <_ZN11ArduinoJson7V6211HB6detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8011aaa:	bf00      	nop
 8011aac:	3728      	adds	r7, #40	; 0x28
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	cccccccd 	.word	0xcccccccd

08011ab8 <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	1d38      	adds	r0, r7, #4
 8011ac2:	e880 0006 	stmia.w	r0, {r1, r2}
 8011ac6:	603b      	str	r3, [r7, #0]
  if (key.isNull())
 8011ac8:	1d3b      	adds	r3, r7, #4
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7f0 f833 	bl	8001b36 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString6isNullEv>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
    return 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e016      	b.n	8011b08 <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x50>
  VariantSlot* slot = getSlot(key);
 8011ada:	1d3b      	adds	r3, r7, #4
 8011adc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011ae0:	68f8      	ldr	r0, [r7, #12]
 8011ae2:	f7fd fe9b 	bl	800f81c <_ZNK11ArduinoJson7V6211HB6detail14CollectionData7getSlotINS1_14SizedRamStringEEEPNS1_11VariantSlotET_>
 8011ae6:	6178      	str	r0, [r7, #20]
  if (slot)
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d004      	beq.n	8011af8 <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x40>
    return slot->data();
 8011aee:	6978      	ldr	r0, [r7, #20]
 8011af0:	f7f0 f913 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 8011af4:	4603      	mov	r3, r0
 8011af6:	e007      	b.n	8011b08 <_ZN11ArduinoJson7V6211HB6detail14CollectionData14getOrAddMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x50>
  return addMember(key, pool);
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	1d3a      	adds	r2, r7, #4
 8011afc:	ca06      	ldmia	r2, {r1, r2}
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f000 f848 	bl	8011b94 <_ZN11ArduinoJson7V6211HB6detail14CollectionData9addMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8011b04:	4603      	mov	r3, r0
 8011b06:	bf00      	nop
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3718      	adds	r7, #24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011b10:	b590      	push	{r4, r7, lr}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() < __rhs.base(); }
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7fb fbbf 	bl	800d29e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8011b20:	4603      	mov	r3, r0
 8011b22:	681c      	ldr	r4, [r3, #0]
 8011b24:	6838      	ldr	r0, [r7, #0]
 8011b26:	f7fb fbba 	bl	800d29e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	429c      	cmp	r4, r3
 8011b30:	bf34      	ite	cc
 8011b32:	2301      	movcc	r3, #1
 8011b34:	2300      	movcs	r3, #0
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	4618      	mov	r0, r3
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd90      	pop	{r4, r7, pc}

08011b40 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current++); }
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	1c59      	adds	r1, r3, #1
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	6011      	str	r1, [r2, #0]
 8011b54:	60fb      	str	r3, [r7, #12]
 8011b56:	f107 020c 	add.w	r2, r7, #12
 8011b5a:	f107 0308 	add.w	r3, r7, #8
 8011b5e:	4611      	mov	r1, r2
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fb fb8c 	bl	800d27e <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <_ZN11ArduinoJson7V6211HB6detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	70fb      	strb	r3, [r7, #3]
    _str->push_back(static_cast<char>(c));
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f005 fb40 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8011b8a:	2301      	movs	r3, #1
  }
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <_ZN11ArduinoJson7V6211HB6detail14CollectionData9addMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	60f8      	str	r0, [r7, #12]
 8011b9c:	1d38      	adds	r0, r7, #4
 8011b9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8011ba2:	603b      	str	r3, [r7, #0]
  VariantSlot* slot = addSlot(pool);
 8011ba4:	6839      	ldr	r1, [r7, #0]
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f7f0 fda3 	bl	80026f2 <_ZN11ArduinoJson7V6211HB6detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8011bac:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	1d3a      	adds	r2, r7, #4
 8011bb2:	ca06      	ldmia	r2, {r1, r2}
 8011bb4:	6978      	ldr	r0, [r7, #20]
 8011bb6:	f000 f815 	bl	8011be4 <_ZN11ArduinoJson7V6211HB6detail10slotSetKeyINS1_14SizedRamStringEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	f083 0301 	eor.w	r3, r3, #1
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d005      	beq.n	8011bd2 <_ZN11ArduinoJson7V6211HB6detail14CollectionData9addMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3e>
    removeSlot(slot);
 8011bc6:	6979      	ldr	r1, [r7, #20]
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f7f0 fdfb 	bl	80027c4 <_ZN11ArduinoJson7V6211HB6detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	e004      	b.n	8011bdc <_ZN11ArduinoJson7V6211HB6detail14CollectionData9addMemberINS1_14SizedRamStringEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return slot->data();
 8011bd2:	6978      	ldr	r0, [r7, #20]
 8011bd4:	f7f0 f8a1 	bl	8001d1a <_ZN11ArduinoJson7V6211HB6detail11VariantSlot4dataEv>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	bf00      	nop
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3718      	adds	r7, #24
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <_ZN11ArduinoJson7V6211HB6detail10slotSetKeyINS1_14SizedRamStringEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	1d38      	adds	r0, r7, #4
 8011bee:	e880 0006 	stmia.w	r0, {r1, r2}
 8011bf2:	603b      	str	r3, [r7, #0]
  if (!var)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d101      	bne.n	8011bfe <_ZN11ArduinoJson7V6211HB6detail10slotSetKeyINS1_14SizedRamStringEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x1a>
    return false;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	e00d      	b.n	8011c1a <_ZN11ArduinoJson7V6211HB6detail10slotSetKeyINS1_14SizedRamStringEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x36>
  return storeString(pool, key, SlotKeySetter(var));
 8011bfe:	f107 0314 	add.w	r3, r7, #20
 8011c02:	68f9      	ldr	r1, [r7, #12]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7f0 fba5 	bl	8002354 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	1d3a      	adds	r2, r7, #4
 8011c0e:	ca06      	ldmia	r2, {r1, r2}
 8011c10:	6838      	ldr	r0, [r7, #0]
 8011c12:	f000 f806 	bl	8011c22 <_ZN11ArduinoJson7V6211HB6detail11storeStringINS1_14SizedRamStringENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 8011c16:	4603      	mov	r3, r0
 8011c18:	bf00      	nop
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3718      	adds	r7, #24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <_ZN11ArduinoJson7V6211HB6detail11storeStringINS1_14SizedRamStringENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
  else
    return storeString(pool, str, StringStoragePolicy::Copy(), callback);
}

template <typename TAdaptedString, typename TCallback>
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8011c22:	b590      	push	{r4, r7, lr}
 8011c24:	b087      	sub	sp, #28
 8011c26:	af02      	add	r7, sp, #8
 8011c28:	60f8      	str	r0, [r7, #12]
 8011c2a:	1d38      	adds	r0, r7, #4
 8011c2c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011c30:	603b      	str	r3, [r7, #0]
  return storeString(pool, str, str.storagePolicy(), callback);
 8011c32:	1d3b      	adds	r3, r7, #4
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ef ffab 	bl	8001b90 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString13storagePolicyEv>
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	4623      	mov	r3, r4
 8011c40:	1d3a      	adds	r2, r7, #4
 8011c42:	ca06      	ldmia	r2, {r1, r2}
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f000 f805 	bl	8011c54 <_ZN11ArduinoJson7V6211HB6detail11storeStringINS1_14SizedRamStringENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4CopyET0_>
 8011c4a:	4603      	mov	r3, r0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3714      	adds	r7, #20
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd90      	pop	{r4, r7, pc}

08011c54 <_ZN11ArduinoJson7V6211HB6detail11storeStringINS1_14SizedRamStringENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4CopyET0_>:
bool storeString(MemoryPool* pool, TAdaptedString str,
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b088      	sub	sp, #32
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	1d38      	adds	r0, r7, #4
 8011c5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8011c62:	703b      	strb	r3, [r7, #0]
  const char* copy = pool->saveString(str);
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	1d3b      	adds	r3, r7, #4
 8011c68:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011c6c:	f7fb fcf3 	bl	800d656 <_ZN11ArduinoJson7V6211HB6detail10MemoryPool10saveStringINS1_14SizedRamStringEEEPKcT_>
 8011c70:	61f8      	str	r0, [r7, #28]
  JsonString storedString(copy, str.size(), JsonString::Copied);
 8011c72:	1d3b      	adds	r3, r7, #4
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ef ff6f 	bl	8001b58 <_ZNK11ArduinoJson7V6211HB6detail14SizedRamString4sizeEv>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	f107 0010 	add.w	r0, r7, #16
 8011c80:	2300      	movs	r3, #0
 8011c82:	69f9      	ldr	r1, [r7, #28]
 8011c84:	f7ef ffc0 	bl	8001c08 <_ZN11ArduinoJson7V6211HB10JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 8011c88:	f107 0310 	add.w	r3, r7, #16
 8011c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011c92:	f7fe fd4f 	bl	8010734 <_ZN11ArduinoJson7V6211HB6detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return copy != 0;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	bf14      	ite	ne
 8011c9c:	2301      	movne	r3, #1
 8011c9e:	2300      	moveq	r3, #0
 8011ca0:	b2db      	uxtb	r3, r3
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3720      	adds	r7, #32
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <_ZN12JSON_HANDLERD1Ev>:
class JSON_HANDLER {
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f005 fa1c 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f005 fa16 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7f4 ff02 	bl	8006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f4 fefe 	bl	8006ada <_ZN11ArduinoJson7V6211HB18StaticJsonDocumentILj1024EED1Ev>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <_ZN11BUTTON_READD1Ev>:
class BUTTON_READ: public VARIABLES {
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7f4 feb8 	bl	8006a68 <_ZN9VARIABLESD1Ev>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <_ZN10UART_DEBUGD1Ev>:
class UART_DEBUG {
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b082      	sub	sp, #8
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	3314      	adds	r3, #20
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f005 f9f1 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <_ZN6NEOWAYD1Ev>:
class NEOWAY {
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b082      	sub	sp, #8
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f005 f9e2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f005 f9dc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	33f4      	adds	r3, #244	; 0xf4
 8011d42:	4618      	mov	r0, r3
 8011d44:	f005 f9d7 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	3364      	adds	r3, #100	; 0x64
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f005 f9d2 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	334c      	adds	r3, #76	; 0x4c
 8011d56:	4618      	mov	r0, r3
 8011d58:	f005 f9cd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3334      	adds	r3, #52	; 0x34
 8011d60:	4618      	mov	r0, r3
 8011d62:	f005 f9c8 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	331c      	adds	r3, #28
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f005 f9c3 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3304      	adds	r3, #4
 8011d74:	4618      	mov	r0, r3
 8011d76:	f005 f9be 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <_ZN12UART_PRINTERD1Ev>:
class UART_PRINTER {
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	4618      	mov	r0, r3
 8011d92:	f005 f9b0 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b0ca      	sub	sp, #296	; 0x128
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8011daa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011dae:	6018      	str	r0, [r3, #0]
 8011db0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8011db4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011db8:	6019      	str	r1, [r3, #0]
 8011dba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8011dbe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	f040 818b 	bne.w	80120e0 <_Z41__static_initialization_and_destruction_0ii+0x340>
 8011dca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8011dce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	f040 8181 	bne.w	80120e0 <_Z41__static_initialization_and_destruction_0ii+0x340>
string direction_return = "";
 8011dde:	f107 0308 	add.w	r3, r7, #8
 8011de2:	4618      	mov	r0, r3
 8011de4:	f005 f832 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011de8:	f107 0308 	add.w	r3, r7, #8
 8011dec:	461a      	mov	r2, r3
 8011dee:	49d9      	ldr	r1, [pc, #868]	; (8012154 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8011df0:	48d9      	ldr	r0, [pc, #868]	; (8012158 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8011df2:	f005 fce7 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011df6:	f107 0308 	add.w	r3, r7, #8
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f005 f828 	bl	8016e50 <_ZNSaIcED1Ev>
string config_file_name = "config.json";
 8011e00:	f107 030c 	add.w	r3, r7, #12
 8011e04:	4618      	mov	r0, r3
 8011e06:	f005 f821 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011e0a:	f107 030c 	add.w	r3, r7, #12
 8011e0e:	461a      	mov	r2, r3
 8011e10:	49d2      	ldr	r1, [pc, #840]	; (801215c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8011e12:	48d3      	ldr	r0, [pc, #844]	; (8012160 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8011e14:	f005 fcd6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011e18:	f107 030c 	add.w	r3, r7, #12
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f005 f817 	bl	8016e50 <_ZNSaIcED1Ev>

#include "../CUSTOM/VARIABLES.h"
DynamicArray<VARIABLES*> variables_pointer;
 8011e22:	48d0      	ldr	r0, [pc, #832]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011e24:	f7fb f860 	bl	800cee8 <_ZN12DynamicArrayIP9VARIABLESEC1Ev>
	PWR_PIN LED_1(UL1_GPIO_Port, UL1_Pin);

#endif

#if defined(AWS_2_0)
PWR_PIN MUX0(MUX0_GPIO_Port, MUX0_Pin);
 8011e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e2c:	49ce      	ldr	r1, [pc, #824]	; (8012168 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8011e2e:	48cf      	ldr	r0, [pc, #828]	; (801216c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011e30:	f7f1 fd1d 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>
PWR_PIN MUX1(MUX1_GPIO_Port, MUX1_Pin);
 8011e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e38:	49cb      	ldr	r1, [pc, #812]	; (8012168 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8011e3a:	48cd      	ldr	r0, [pc, #820]	; (8012170 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8011e3c:	f7f1 fd17 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>
PWR_PIN MUX2(MUX2_GPIO_Port, MUX2_Pin);
 8011e40:	2210      	movs	r2, #16
 8011e42:	49cc      	ldr	r1, [pc, #816]	; (8012174 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8011e44:	48cc      	ldr	r0, [pc, #816]	; (8012178 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8011e46:	f7f1 fd12 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>

#include "../CUSTOM/MUX.h"
MUX mux(&MUX0, &MUX1, &MUX2);
 8011e4a:	4bcb      	ldr	r3, [pc, #812]	; (8012178 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8011e4c:	4ac8      	ldr	r2, [pc, #800]	; (8012170 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8011e4e:	49c7      	ldr	r1, [pc, #796]	; (801216c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011e50:	48ca      	ldr	r0, [pc, #808]	; (801217c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8011e52:	f7f1 fd67 	bl	8003924 <_ZN3MUXC1EP7PWR_PINS1_S1_>
DynamicArray<bool> ble_print_arr, uart_print_arr;
 8011e56:	48ca      	ldr	r0, [pc, #808]	; (8012180 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8011e58:	f7fb f867 	bl	800cf2a <_ZN12DynamicArrayIbEC1Ev>
 8011e5c:	48c9      	ldr	r0, [pc, #804]	; (8012184 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8011e5e:	f7fb f864 	bl	800cf2a <_ZN12DynamicArrayIbEC1Ev>
#endif

#include "../CUSTOM/PRINT_CONTROL.h"
#include "../CUSTOM/UART_PRINTER.h"
#if defined(AWS_2_0)
UART_PRINTER debug(&hlpuart1, "123");
 8011e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e66:	4618      	mov	r0, r3
 8011e68:	f004 fff0 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011e6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e70:	f107 0310 	add.w	r3, r7, #16
 8011e74:	49c4      	ldr	r1, [pc, #784]	; (8012188 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8011e76:	4618      	mov	r0, r3
 8011e78:	f005 fca4 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011e7c:	f107 0310 	add.w	r3, r7, #16
 8011e80:	461a      	mov	r2, r3
 8011e82:	49c2      	ldr	r1, [pc, #776]	; (801218c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8011e84:	48c2      	ldr	r0, [pc, #776]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8011e86:	f7f1 fe2c 	bl	8003ae2 <_ZN12UART_PRINTERC1EP20__UART_HandleTypeDefNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8011e8a:	f107 0310 	add.w	r3, r7, #16
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f005 f931 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f004 ffd9 	bl	8016e50 <_ZNSaIcED1Ev>
#else
UART_PRINTER debug(&huart2, "123");
#endif

#include "../CUSTOM/NEOWAY.h"
NEOWAY neoway(&huart1);
 8011e9e:	49bd      	ldr	r1, [pc, #756]	; (8012194 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8011ea0:	48bd      	ldr	r0, [pc, #756]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8011ea2:	f7f1 fea1 	bl	8003be8 <_ZN6NEOWAYC1EP20__UART_HandleTypeDef>

#include "../CUSTOM/UART_DEBUG.h"
UART_DEBUG both_debug(vp, &debug, &neoway);
 8011ea6:	4bbc      	ldr	r3, [pc, #752]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8011ea8:	4ab9      	ldr	r2, [pc, #740]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8011eaa:	49ae      	ldr	r1, [pc, #696]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011eac:	48bb      	ldr	r0, [pc, #748]	; (801219c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8011eae:	f7f4 fa25 	bl	80062fc <_ZN10UART_DEBUGC1EP12DynamicArrayIP9VARIABLESEP12UART_PRINTERP6NEOWAY>
create(VARIABLES, WS);
 8011eb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f004 ffc8 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011ebc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ec4:	49b6      	ldr	r1, [pc, #728]	; (80121a0 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f005 fc7c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011ecc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	49a4      	ldr	r1, [pc, #656]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011ed4:	48b3      	ldr	r0, [pc, #716]	; (80121a4 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8011ed6:	f7f1 fc1d 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8011eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f005 f909 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f004 ffb1 	bl	8016e50 <_ZNSaIcED1Ev>
create(VARIABLES, DEVICE_ID);
 8011eee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f004 ffaa 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011ef8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f00:	49a9      	ldr	r1, [pc, #676]	; (80121a8 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8011f02:	4618      	mov	r0, r3
 8011f04:	f005 fc5e 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011f08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	4995      	ldr	r1, [pc, #596]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011f10:	48a6      	ldr	r0, [pc, #664]	; (80121ac <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8011f12:	f7f1 fbff 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8011f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f005 f8eb 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011f24:	4618      	mov	r0, r3
 8011f26:	f004 ff93 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, WAKEUP_INT);
 8011f2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f004 ff8c 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011f34:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8011f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011f3c:	499c      	ldr	r1, [pc, #624]	; (80121b0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f005 fc40 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011f44:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4986      	ldr	r1, [pc, #536]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011f4c:	4899      	ldr	r0, [pc, #612]	; (80121b4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8011f4e:	f7f1 fbe1 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8011f52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011f56:	4618      	mov	r0, r3
 8011f58:	f005 f8cd 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011f60:	4618      	mov	r0, r3
 8011f62:	f004 ff75 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, CHECK_OTA);
 8011f66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f004 ff6e 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011f70:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8011f74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011f78:	498f      	ldr	r1, [pc, #572]	; (80121b8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f005 fc22 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011f80:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8011f84:	2300      	movs	r3, #0
 8011f86:	4977      	ldr	r1, [pc, #476]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011f88:	488c      	ldr	r0, [pc, #560]	; (80121bc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8011f8a:	f7f1 fbc3 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8011f8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011f92:	4618      	mov	r0, r3
 8011f94:	f005 f8af 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f004 ff57 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, PRINT);
 8011fa2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f004 ff50 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011fac:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8011fb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011fb4:	4982      	ldr	r1, [pc, #520]	; (80121c0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f005 fc04 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011fbc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	4968      	ldr	r1, [pc, #416]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011fc4:	487f      	ldr	r0, [pc, #508]	; (80121c4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8011fc6:	f7f1 fba5 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8011fca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f005 f891 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f004 ff39 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, PRINT_ESSENTIALS);
 8011fde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f004 ff32 	bl	8016e4c <_ZNSaIcEC1Ev>
 8011fe8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8011fec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011ff0:	4975      	ldr	r1, [pc, #468]	; (80121c8 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f005 fbe6 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011ff8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	4959      	ldr	r1, [pc, #356]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8012000:	4872      	ldr	r0, [pc, #456]	; (80121cc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8012002:	f7f1 fb87 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8012006:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801200a:	4618      	mov	r0, r3
 801200c:	f005 f873 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012010:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012014:	4618      	mov	r0, r3
 8012016:	f004 ff1b 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, INSTALL_CERT);
 801201a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801201e:	4618      	mov	r0, r3
 8012020:	f004 ff14 	bl	8016e4c <_ZNSaIcEC1Ev>
 8012024:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8012028:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801202c:	4968      	ldr	r1, [pc, #416]	; (80121d0 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801202e:	4618      	mov	r0, r3
 8012030:	f005 fbc8 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012034:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8012038:	2300      	movs	r3, #0
 801203a:	494a      	ldr	r1, [pc, #296]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 801203c:	4865      	ldr	r0, [pc, #404]	; (80121d4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801203e:	f7f1 fb69 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8012042:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012046:	4618      	mov	r0, r3
 8012048:	f005 f855 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801204c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012050:	4618      	mov	r0, r3
 8012052:	f004 fefd 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(BUTTON_READ, BUTTON);
 8012056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801205a:	4618      	mov	r0, r3
 801205c:	f004 fef6 	bl	8016e4c <_ZNSaIcEC1Ev>
 8012060:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8012064:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012068:	495b      	ldr	r1, [pc, #364]	; (80121d8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 801206a:	4618      	mov	r0, r3
 801206c:	f005 fbaa 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012070:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012074:	2300      	movs	r3, #0
 8012076:	493b      	ldr	r1, [pc, #236]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8012078:	4858      	ldr	r0, [pc, #352]	; (80121dc <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 801207a:	f7f4 fd07 	bl	8006a8c <_ZN11BUTTON_READC1EP12DynamicArrayIP9VARIABLESENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 801207e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012082:	4618      	mov	r0, r3
 8012084:	f005 f837 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801208c:	4618      	mov	r0, r3
 801208e:	f004 fedf 	bl	8016e50 <_ZNSaIcED1Ev>
create_0(VARIABLES, EXIT);
 8012092:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012096:	4618      	mov	r0, r3
 8012098:	f004 fed8 	bl	8016e4c <_ZNSaIcEC1Ev>
 801209c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80120a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80120a4:	494e      	ldr	r1, [pc, #312]	; (80121e0 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 80120a6:	4618      	mov	r0, r3
 80120a8:	f005 fb8c 	bl	80177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80120ac:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80120b0:	2300      	movs	r3, #0
 80120b2:	492c      	ldr	r1, [pc, #176]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 80120b4:	484b      	ldr	r0, [pc, #300]	; (80121e4 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 80120b6:	f7f1 fb2d 	bl	8003714 <_ZN9VARIABLESC1EP12DynamicArrayIPS_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 80120ba:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80120be:	4618      	mov	r0, r3
 80120c0:	f005 f819 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80120c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80120c8:	4618      	mov	r0, r3
 80120ca:	f004 fec1 	bl	8016e50 <_ZNSaIcED1Ev>
JSON_HANDLER data_packet(variables_pointer);
 80120ce:	4925      	ldr	r1, [pc, #148]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 80120d0:	4845      	ldr	r0, [pc, #276]	; (80121e8 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 80120d2:	f7f4 fd0f 	bl	8006af4 <_ZN12JSON_HANDLERC1ER12DynamicArrayIP9VARIABLESE>
PWR_PIN V_12(EN_12V_GPIO_Port, EN_12V_Pin);
 80120d6:	2280      	movs	r2, #128	; 0x80
 80120d8:	4944      	ldr	r1, [pc, #272]	; (80121ec <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 80120da:	4845      	ldr	r0, [pc, #276]	; (80121f0 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 80120dc:	f7f1 fbc7 	bl	800386e <_ZN7PWR_PINC1EP12GPIO_TypeDeft>
 80120e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80120e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f040 8091 	bne.w	8012212 <_Z41__static_initialization_and_destruction_0ii+0x472>
 80120f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80120f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120fe:	4293      	cmp	r3, r2
 8012100:	f040 8087 	bne.w	8012212 <_Z41__static_initialization_and_destruction_0ii+0x472>
JSON_HANDLER data_packet(variables_pointer);
 8012104:	4838      	ldr	r0, [pc, #224]	; (80121e8 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8012106:	f7ff fdd0 	bl	8011caa <_ZN12JSON_HANDLERD1Ev>
create_0(VARIABLES, EXIT);
 801210a:	4836      	ldr	r0, [pc, #216]	; (80121e4 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 801210c:	f7f4 fcac 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create_0(BUTTON_READ, BUTTON);
 8012110:	4832      	ldr	r0, [pc, #200]	; (80121dc <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8012112:	f7ff fde9 	bl	8011ce8 <_ZN11BUTTON_READD1Ev>
create_0(VARIABLES, INSTALL_CERT);
 8012116:	482f      	ldr	r0, [pc, #188]	; (80121d4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8012118:	f7f4 fca6 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create_0(VARIABLES, PRINT_ESSENTIALS);
 801211c:	482b      	ldr	r0, [pc, #172]	; (80121cc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 801211e:	f7f4 fca3 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create_0(VARIABLES, PRINT);
 8012122:	4828      	ldr	r0, [pc, #160]	; (80121c4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8012124:	f7f4 fca0 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create_0(VARIABLES, CHECK_OTA);
 8012128:	4824      	ldr	r0, [pc, #144]	; (80121bc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 801212a:	f7f4 fc9d 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create_0(VARIABLES, WAKEUP_INT);
 801212e:	4821      	ldr	r0, [pc, #132]	; (80121b4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8012130:	f7f4 fc9a 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create(VARIABLES, DEVICE_ID);
 8012134:	481d      	ldr	r0, [pc, #116]	; (80121ac <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8012136:	f7f4 fc97 	bl	8006a68 <_ZN9VARIABLESD1Ev>
create(VARIABLES, WS);
 801213a:	481a      	ldr	r0, [pc, #104]	; (80121a4 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 801213c:	f7f4 fc94 	bl	8006a68 <_ZN9VARIABLESD1Ev>
 8012140:	4816      	ldr	r0, [pc, #88]	; (801219c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8012142:	f7ff fdde 	bl	8011d02 <_ZN10UART_DEBUGD1Ev>
NEOWAY neoway(&huart1);
 8012146:	4814      	ldr	r0, [pc, #80]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8012148:	f7ff fde9 	bl	8011d1e <_ZN6NEOWAYD1Ev>
UART_PRINTER debug(&hlpuart1, "123");
 801214c:	4810      	ldr	r0, [pc, #64]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 801214e:	f7ff fe19 	bl	8011d84 <_ZN12UART_PRINTERD1Ev>
 8012152:	e04f      	b.n	80121f4 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8012154:	08017e00 	.word	0x08017e00
 8012158:	20000110 	.word	0x20000110
 801215c:	080189ac 	.word	0x080189ac
 8012160:	20000128 	.word	0x20000128
 8012164:	20000144 	.word	0x20000144
 8012168:	48000400 	.word	0x48000400
 801216c:	2000014c 	.word	0x2000014c
 8012170:	20000154 	.word	0x20000154
 8012174:	48000800 	.word	0x48000800
 8012178:	2000015c 	.word	0x2000015c
 801217c:	20000164 	.word	0x20000164
 8012180:	20000174 	.word	0x20000174
 8012184:	2000017c 	.word	0x2000017c
 8012188:	080189b8 	.word	0x080189b8
 801218c:	20000d8c 	.word	0x20000d8c
 8012190:	20000184 	.word	0x20000184
 8012194:	20000e14 	.word	0x20000e14
 8012198:	200001a0 	.word	0x200001a0
 801219c:	200002dc 	.word	0x200002dc
 80121a0:	080189bc 	.word	0x080189bc
 80121a4:	20000310 	.word	0x20000310
 80121a8:	080189c0 	.word	0x080189c0
 80121ac:	20000340 	.word	0x20000340
 80121b0:	080189cc 	.word	0x080189cc
 80121b4:	20000370 	.word	0x20000370
 80121b8:	080189d8 	.word	0x080189d8
 80121bc:	200003a0 	.word	0x200003a0
 80121c0:	080189e4 	.word	0x080189e4
 80121c4:	200003d0 	.word	0x200003d0
 80121c8:	080189ec 	.word	0x080189ec
 80121cc:	20000400 	.word	0x20000400
 80121d0:	08018a00 	.word	0x08018a00
 80121d4:	20000430 	.word	0x20000430
 80121d8:	08018a10 	.word	0x08018a10
 80121dc:	20000460 	.word	0x20000460
 80121e0:	08018a18 	.word	0x08018a18
 80121e4:	20000498 	.word	0x20000498
 80121e8:	200004c8 	.word	0x200004c8
 80121ec:	48000c00 	.word	0x48000c00
 80121f0:	20000d50 	.word	0x20000d50
 80121f4:	4809      	ldr	r0, [pc, #36]	; (801221c <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 80121f6:	f000 f81b 	bl	8012230 <_ZN12DynamicArrayIbED1Ev>
 80121fa:	4809      	ldr	r0, [pc, #36]	; (8012220 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 80121fc:	f000 f818 	bl	8012230 <_ZN12DynamicArrayIbED1Ev>
DynamicArray<VARIABLES*> variables_pointer;
 8012200:	4808      	ldr	r0, [pc, #32]	; (8012224 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8012202:	f000 f820 	bl	8012246 <_ZN12DynamicArrayIP9VARIABLESED1Ev>
string config_file_name = "config.json";
 8012206:	4808      	ldr	r0, [pc, #32]	; (8012228 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8012208:	f004 ff75 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
string direction_return = "";
 801220c:	4807      	ldr	r0, [pc, #28]	; (801222c <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 801220e:	f004 ff72 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8012212:	bf00      	nop
 8012214:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	2000017c 	.word	0x2000017c
 8012220:	20000174 	.word	0x20000174
 8012224:	20000144 	.word	0x20000144
 8012228:	20000128 	.word	0x20000128
 801222c:	20000110 	.word	0x20000110

08012230 <_ZN12DynamicArrayIbED1Ev>:
		~DynamicArray() {
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
		}
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	4618      	mov	r0, r3
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr

08012246 <_ZN12DynamicArrayIP9VARIABLESED1Ev>:
		~DynamicArray() {
 8012246:	b480      	push	{r7}
 8012248:	b083      	sub	sp, #12
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
		}
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	4618      	mov	r0, r3
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <_GLOBAL__sub_I_neo_control>:
 801225c:	b580      	push	{r7, lr}
 801225e:	af00      	add	r7, sp, #0
 8012260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012264:	2001      	movs	r0, #1
 8012266:	f7ff fd9b 	bl	8011da0 <_Z41__static_initialization_and_destruction_0ii>
 801226a:	bd80      	pop	{r7, pc}

0801226c <_GLOBAL__sub_D_neo_control>:
 801226c:	b580      	push	{r7, lr}
 801226e:	af00      	add	r7, sp, #0
 8012270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012274:	2000      	movs	r0, #0
 8012276:	f7ff fd93 	bl	8011da0 <_Z41__static_initialization_and_destruction_0ii>
 801227a:	bd80      	pop	{r7, pc}

0801227c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b092      	sub	sp, #72	; 0x48
 8012280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8012282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012286:	2200      	movs	r2, #0
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	605a      	str	r2, [r3, #4]
 801228c:	609a      	str	r2, [r3, #8]
 801228e:	60da      	str	r2, [r3, #12]
 8012290:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8012292:	2300      	movs	r3, #0
 8012294:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8012296:	1d3b      	adds	r3, r7, #4
 8012298:	222c      	movs	r2, #44	; 0x2c
 801229a:	2100      	movs	r1, #0
 801229c:	4618      	mov	r0, r3
 801229e:	f005 fc9f 	bl	8017be0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80122a2:	4b47      	ldr	r3, [pc, #284]	; (80123c0 <MX_RTC_Init+0x144>)
 80122a4:	4a47      	ldr	r2, [pc, #284]	; (80123c4 <MX_RTC_Init+0x148>)
 80122a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80122a8:	4b45      	ldr	r3, [pc, #276]	; (80123c0 <MX_RTC_Init+0x144>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80122ae:	4b44      	ldr	r3, [pc, #272]	; (80123c0 <MX_RTC_Init+0x144>)
 80122b0:	227f      	movs	r2, #127	; 0x7f
 80122b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80122b4:	4b42      	ldr	r3, [pc, #264]	; (80123c0 <MX_RTC_Init+0x144>)
 80122b6:	22ff      	movs	r2, #255	; 0xff
 80122b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80122ba:	4b41      	ldr	r3, [pc, #260]	; (80123c0 <MX_RTC_Init+0x144>)
 80122bc:	2200      	movs	r2, #0
 80122be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80122c0:	4b3f      	ldr	r3, [pc, #252]	; (80123c0 <MX_RTC_Init+0x144>)
 80122c2:	2200      	movs	r2, #0
 80122c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80122c6:	4b3e      	ldr	r3, [pc, #248]	; (80123c0 <MX_RTC_Init+0x144>)
 80122c8:	2200      	movs	r2, #0
 80122ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80122cc:	4b3c      	ldr	r3, [pc, #240]	; (80123c0 <MX_RTC_Init+0x144>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80122d2:	483b      	ldr	r0, [pc, #236]	; (80123c0 <MX_RTC_Init+0x144>)
 80122d4:	f003 fa3e 	bl	8015754 <HAL_RTC_Init>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d001      	beq.n	80122e2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80122de:	f7fa f875 	bl	800c3cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80122e2:	2300      	movs	r3, #0
 80122e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 80122e8:	2300      	movs	r3, #0
 80122ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80122f4:	2300      	movs	r3, #0
 80122f6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 80122f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80122fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80122fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012302:	2200      	movs	r2, #0
 8012304:	4619      	mov	r1, r3
 8012306:	482e      	ldr	r0, [pc, #184]	; (80123c0 <MX_RTC_Init+0x144>)
 8012308:	f003 faac 	bl	8015864 <HAL_RTC_SetTime>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8012312:	f7fa f85b 	bl	800c3cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8012316:	2301      	movs	r3, #1
 8012318:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 801231c:	2301      	movs	r3, #1
 801231e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8012322:	2301      	movs	r3, #1
 8012324:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 8012328:	2300      	movs	r3, #0
 801232a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801232e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012332:	2200      	movs	r2, #0
 8012334:	4619      	mov	r1, r3
 8012336:	4822      	ldr	r0, [pc, #136]	; (80123c0 <MX_RTC_Init+0x144>)
 8012338:	f003 fb8d 	bl	8015a56 <HAL_RTC_SetDate>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8012342:	f7fa f843 	bl	800c3cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 12;
 8012346:	230c      	movs	r3, #12
 8012348:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8012352:	2300      	movs	r3, #0
 8012354:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012356:	2300      	movs	r3, #0
 8012358:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 801235a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801235e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8012360:	4b19      	ldr	r3, [pc, #100]	; (80123c8 <MX_RTC_Init+0x14c>)
 8012362:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012364:	2300      	movs	r3, #0
 8012366:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8012368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801236c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 801236e:	2301      	movs	r3, #1
 8012370:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8012374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801237a:	1d3b      	adds	r3, r7, #4
 801237c:	2200      	movs	r2, #0
 801237e:	4619      	mov	r1, r3
 8012380:	480f      	ldr	r0, [pc, #60]	; (80123c0 <MX_RTC_Init+0x144>)
 8012382:	f003 fc3d 	bl	8015c00 <HAL_RTC_SetAlarm_IT>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 801238c:	f7fa f81e 	bl	800c3cc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0;
 8012390:	2300      	movs	r3, #0
 8012392:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8012394:	2300      	movs	r3, #0
 8012396:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012398:	2300      	movs	r3, #0
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 801239c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80123a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80123a2:	1d3b      	adds	r3, r7, #4
 80123a4:	2200      	movs	r2, #0
 80123a6:	4619      	mov	r1, r3
 80123a8:	4805      	ldr	r0, [pc, #20]	; (80123c0 <MX_RTC_Init+0x144>)
 80123aa:	f003 fc29 	bl	8015c00 <HAL_RTC_SetAlarm_IT>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 80123b4:	f7fa f80a 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80123b8:	bf00      	nop
 80123ba:	3748      	adds	r7, #72	; 0x48
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	20000d64 	.word	0x20000d64
 80123c4:	40002800 	.word	0x40002800
 80123c8:	80000080 	.word	0x80000080

080123cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b09a      	sub	sp, #104	; 0x68
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80123d4:	f107 0308 	add.w	r3, r7, #8
 80123d8:	2260      	movs	r2, #96	; 0x60
 80123da:	2100      	movs	r1, #0
 80123dc:	4618      	mov	r0, r3
 80123de:	f005 fbff 	bl	8017be0 <memset>
  if(rtcHandle->Instance==RTC)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4a17      	ldr	r2, [pc, #92]	; (8012444 <HAL_RTC_MspInit+0x78>)
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d127      	bne.n	801243c <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80123ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80123f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80123f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80123f8:	f107 0308 	add.w	r3, r7, #8
 80123fc:	4618      	mov	r0, r3
 80123fe:	f002 fe6d 	bl	80150dc <HAL_RCCEx_PeriphCLKConfig>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8012408:	f7f9 ffe0 	bl	800c3cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 801240c:	4b0e      	ldr	r3, [pc, #56]	; (8012448 <HAL_RTC_MspInit+0x7c>)
 801240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012412:	4a0d      	ldr	r2, [pc, #52]	; (8012448 <HAL_RTC_MspInit+0x7c>)
 8012414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 801241c:	2200      	movs	r2, #0
 801241e:	2100      	movs	r1, #0
 8012420:	2003      	movs	r0, #3
 8012422:	f001 fade 	bl	80139e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8012426:	2003      	movs	r0, #3
 8012428:	f001 faf7 	bl	8013a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 801242c:	2200      	movs	r2, #0
 801242e:	2100      	movs	r1, #0
 8012430:	2029      	movs	r0, #41	; 0x29
 8012432:	f001 fad6 	bl	80139e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8012436:	2029      	movs	r0, #41	; 0x29
 8012438:	f001 faef 	bl	8013a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 801243c:	bf00      	nop
 801243e:	3768      	adds	r7, #104	; 0x68
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	40002800 	.word	0x40002800
 8012448:	40021000 	.word	0x40021000

0801244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012452:	4b14      	ldr	r3, [pc, #80]	; (80124a4 <HAL_MspInit+0x58>)
 8012454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012456:	4a13      	ldr	r2, [pc, #76]	; (80124a4 <HAL_MspInit+0x58>)
 8012458:	f043 0301 	orr.w	r3, r3, #1
 801245c:	6613      	str	r3, [r2, #96]	; 0x60
 801245e:	4b11      	ldr	r3, [pc, #68]	; (80124a4 <HAL_MspInit+0x58>)
 8012460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012462:	f003 0301 	and.w	r3, r3, #1
 8012466:	607b      	str	r3, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801246a:	4b0e      	ldr	r3, [pc, #56]	; (80124a4 <HAL_MspInit+0x58>)
 801246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801246e:	4a0d      	ldr	r2, [pc, #52]	; (80124a4 <HAL_MspInit+0x58>)
 8012470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012474:	6593      	str	r3, [r2, #88]	; 0x58
 8012476:	4b0b      	ldr	r3, [pc, #44]	; (80124a4 <HAL_MspInit+0x58>)
 8012478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801247e:	603b      	str	r3, [r7, #0]
 8012480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8012482:	2200      	movs	r2, #0
 8012484:	2100      	movs	r1, #0
 8012486:	2005      	movs	r0, #5
 8012488:	f001 faab 	bl	80139e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 801248c:	2005      	movs	r0, #5
 801248e:	f001 fac4 	bl	8013a1a <HAL_NVIC_EnableIRQ>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8012492:	f000 fb0b 	bl	8012aac <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8012496:	2002      	movs	r0, #2
 8012498:	f000 faf4 	bl	8012a84 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	40021000 	.word	0x40021000

080124a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80124a8:	b480      	push	{r7}
 80124aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80124ac:	e7fe      	b.n	80124ac <NMI_Handler+0x4>

080124ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80124ae:	b480      	push	{r7}
 80124b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80124b2:	e7fe      	b.n	80124b2 <HardFault_Handler+0x4>

080124b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80124b4:	b480      	push	{r7}
 80124b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80124b8:	e7fe      	b.n	80124b8 <MemManage_Handler+0x4>

080124ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80124ba:	b480      	push	{r7}
 80124bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80124be:	e7fe      	b.n	80124be <BusFault_Handler+0x4>

080124c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80124c4:	e7fe      	b.n	80124c4 <UsageFault_Handler+0x4>

080124c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80124c6:	b480      	push	{r7}
 80124c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80124ca:	bf00      	nop
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80124d4:	b480      	push	{r7}
 80124d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80124d8:	bf00      	nop
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80124e2:	b480      	push	{r7}
 80124e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80124e6:	bf00      	nop
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80124f4:	f000 fa82 	bl	80129fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80124f8:	bf00      	nop
 80124fa:	bd80      	pop	{r7, pc}

080124fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012500:	4802      	ldr	r0, [pc, #8]	; (801250c <RTC_WKUP_IRQHandler+0x10>)
 8012502:	f003 ff23 	bl	801634c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8012506:	bf00      	nop
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	20000d64 	.word	0x20000d64

08012510 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8012510:	b480      	push	{r7}
 8012512:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8012514:	bf00      	nop
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 801251e:	b580      	push	{r7, lr}
 8012520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RG_M_INT_Pin);
 8012522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012526:	f001 fe9d 	bl	8014264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 801252a:	bf00      	nop
 801252c:	bd80      	pop	{r7, pc}
	...

08012530 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8012534:	4802      	ldr	r0, [pc, #8]	; (8012540 <RTC_Alarm_IRQHandler+0x10>)
 8012536:	f003 fd5f 	bl	8015ff8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 801253a:	bf00      	nop
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	20000d64 	.word	0x20000d64

08012544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012544:	b480      	push	{r7}
 8012546:	af00      	add	r7, sp, #0
  return 1;
 8012548:	2301      	movs	r3, #1
}
 801254a:	4618      	mov	r0, r3
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <_kill>:

int _kill(int pid, int sig)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801255e:	f005 fb9b 	bl	8017c98 <__errno>
 8012562:	4603      	mov	r3, r0
 8012564:	2216      	movs	r2, #22
 8012566:	601a      	str	r2, [r3, #0]
  return -1;
 8012568:	f04f 33ff 	mov.w	r3, #4294967295
}
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_exit>:

void _exit (int status)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801257c:	f04f 31ff 	mov.w	r1, #4294967295
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7ff ffe7 	bl	8012554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012586:	e7fe      	b.n	8012586 <_exit+0x12>

08012588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012590:	4a14      	ldr	r2, [pc, #80]	; (80125e4 <_sbrk+0x5c>)
 8012592:	4b15      	ldr	r3, [pc, #84]	; (80125e8 <_sbrk+0x60>)
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801259c:	4b13      	ldr	r3, [pc, #76]	; (80125ec <_sbrk+0x64>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d102      	bne.n	80125aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80125a4:	4b11      	ldr	r3, [pc, #68]	; (80125ec <_sbrk+0x64>)
 80125a6:	4a12      	ldr	r2, [pc, #72]	; (80125f0 <_sbrk+0x68>)
 80125a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80125aa:	4b10      	ldr	r3, [pc, #64]	; (80125ec <_sbrk+0x64>)
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4413      	add	r3, r2
 80125b2:	693a      	ldr	r2, [r7, #16]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d207      	bcs.n	80125c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80125b8:	f005 fb6e 	bl	8017c98 <__errno>
 80125bc:	4603      	mov	r3, r0
 80125be:	220c      	movs	r2, #12
 80125c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80125c2:	f04f 33ff 	mov.w	r3, #4294967295
 80125c6:	e009      	b.n	80125dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80125c8:	4b08      	ldr	r3, [pc, #32]	; (80125ec <_sbrk+0x64>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80125ce:	4b07      	ldr	r3, [pc, #28]	; (80125ec <_sbrk+0x64>)
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4413      	add	r3, r2
 80125d6:	4a05      	ldr	r2, [pc, #20]	; (80125ec <_sbrk+0x64>)
 80125d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80125da:	68fb      	ldr	r3, [r7, #12]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	20010000 	.word	0x20010000
 80125e8:	00000400 	.word	0x00000400
 80125ec:	20000d88 	.word	0x20000d88
 80125f0:	20001078 	.word	0x20001078

080125f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80125f4:	b480      	push	{r7}
 80125f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80125f8:	4b06      	ldr	r3, [pc, #24]	; (8012614 <SystemInit+0x20>)
 80125fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125fe:	4a05      	ldr	r2, [pc, #20]	; (8012614 <SystemInit+0x20>)
 8012600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8012608:	bf00      	nop
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	e000ed00 	.word	0xe000ed00

08012618 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801261c:	4b12      	ldr	r3, [pc, #72]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 801261e:	4a13      	ldr	r2, [pc, #76]	; (801266c <MX_LPUART1_UART_Init+0x54>)
 8012620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012622:	4b11      	ldr	r3, [pc, #68]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801262a:	4b0f      	ldr	r3, [pc, #60]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 801262c:	2200      	movs	r2, #0
 801262e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012630:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012632:	2200      	movs	r2, #0
 8012634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012636:	4b0c      	ldr	r3, [pc, #48]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012638:	2200      	movs	r2, #0
 801263a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801263c:	4b0a      	ldr	r3, [pc, #40]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 801263e:	220c      	movs	r2, #12
 8012640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012642:	4b09      	ldr	r3, [pc, #36]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012644:	2200      	movs	r2, #0
 8012646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012648:	4b07      	ldr	r3, [pc, #28]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 801264a:	2200      	movs	r2, #0
 801264c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801264e:	4b06      	ldr	r3, [pc, #24]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012650:	2200      	movs	r2, #0
 8012652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012654:	4804      	ldr	r0, [pc, #16]	; (8012668 <MX_LPUART1_UART_Init+0x50>)
 8012656:	f003 fe9f 	bl	8016398 <HAL_UART_Init>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d001      	beq.n	8012664 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8012660:	f7f9 feb4 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012664:	bf00      	nop
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20000d8c 	.word	0x20000d8c
 801266c:	40008000 	.word	0x40008000

08012670 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012674:	4b14      	ldr	r3, [pc, #80]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 8012676:	4a15      	ldr	r2, [pc, #84]	; (80126cc <MX_USART1_UART_Init+0x5c>)
 8012678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801267a:	4b13      	ldr	r3, [pc, #76]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 801267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012682:	4b11      	ldr	r3, [pc, #68]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 8012684:	2200      	movs	r2, #0
 8012686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012688:	4b0f      	ldr	r3, [pc, #60]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 801268a:	2200      	movs	r2, #0
 801268c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801268e:	4b0e      	ldr	r3, [pc, #56]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 8012690:	2200      	movs	r2, #0
 8012692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012694:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 8012696:	220c      	movs	r2, #12
 8012698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801269a:	4b0b      	ldr	r3, [pc, #44]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 801269c:	2200      	movs	r2, #0
 801269e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80126a0:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80126a6:	4b08      	ldr	r3, [pc, #32]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 80126a8:	2200      	movs	r2, #0
 80126aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80126ac:	4b06      	ldr	r3, [pc, #24]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 80126ae:	2200      	movs	r2, #0
 80126b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80126b2:	4805      	ldr	r0, [pc, #20]	; (80126c8 <MX_USART1_UART_Init+0x58>)
 80126b4:	f003 fe70 	bl	8016398 <HAL_UART_Init>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d001      	beq.n	80126c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80126be:	f7f9 fe85 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80126c2:	bf00      	nop
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	20000e14 	.word	0x20000e14
 80126cc:	40013800 	.word	0x40013800

080126d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80126d4:	4b14      	ldr	r3, [pc, #80]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126d6:	4a15      	ldr	r2, [pc, #84]	; (801272c <MX_USART2_UART_Init+0x5c>)
 80126d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80126da:	4b13      	ldr	r3, [pc, #76]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80126e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80126e2:	4b11      	ldr	r3, [pc, #68]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80126e8:	4b0f      	ldr	r3, [pc, #60]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80126ee:	4b0e      	ldr	r3, [pc, #56]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80126f4:	4b0c      	ldr	r3, [pc, #48]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126f6:	220c      	movs	r2, #12
 80126f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80126fa:	4b0b      	ldr	r3, [pc, #44]	; (8012728 <MX_USART2_UART_Init+0x58>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012700:	4b09      	ldr	r3, [pc, #36]	; (8012728 <MX_USART2_UART_Init+0x58>)
 8012702:	2200      	movs	r2, #0
 8012704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012706:	4b08      	ldr	r3, [pc, #32]	; (8012728 <MX_USART2_UART_Init+0x58>)
 8012708:	2200      	movs	r2, #0
 801270a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801270c:	4b06      	ldr	r3, [pc, #24]	; (8012728 <MX_USART2_UART_Init+0x58>)
 801270e:	2200      	movs	r2, #0
 8012710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012712:	4805      	ldr	r0, [pc, #20]	; (8012728 <MX_USART2_UART_Init+0x58>)
 8012714:	f003 fe40 	bl	8016398 <HAL_UART_Init>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d001      	beq.n	8012722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 801271e:	f7f9 fe55 	bl	800c3cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8012722:	bf00      	nop
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	20000e9c 	.word	0x20000e9c
 801272c:	40004400 	.word	0x40004400

08012730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b0a6      	sub	sp, #152	; 0x98
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012738:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801273c:	2200      	movs	r2, #0
 801273e:	601a      	str	r2, [r3, #0]
 8012740:	605a      	str	r2, [r3, #4]
 8012742:	609a      	str	r2, [r3, #8]
 8012744:	60da      	str	r2, [r3, #12]
 8012746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801274c:	2260      	movs	r2, #96	; 0x60
 801274e:	2100      	movs	r1, #0
 8012750:	4618      	mov	r0, r3
 8012752:	f005 fa45 	bl	8017be0 <memset>
  if(uartHandle->Instance==LPUART1)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4a63      	ldr	r2, [pc, #396]	; (80128e8 <HAL_UART_MspInit+0x1b8>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d13d      	bne.n	80127dc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8012760:	2320      	movs	r3, #32
 8012762:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8012764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012768:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801276e:	4618      	mov	r0, r3
 8012770:	f002 fcb4 	bl	80150dc <HAL_RCCEx_PeriphCLKConfig>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 801277a:	f7f9 fe27 	bl	800c3cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801277e:	4b5b      	ldr	r3, [pc, #364]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012782:	4a5a      	ldr	r2, [pc, #360]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012784:	f043 0301 	orr.w	r3, r3, #1
 8012788:	65d3      	str	r3, [r2, #92]	; 0x5c
 801278a:	4b58      	ldr	r3, [pc, #352]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 801278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801278e:	f003 0301 	and.w	r3, r3, #1
 8012792:	623b      	str	r3, [r7, #32]
 8012794:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012796:	4b55      	ldr	r3, [pc, #340]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801279a:	4a54      	ldr	r2, [pc, #336]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 801279c:	f043 0301 	orr.w	r3, r3, #1
 80127a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80127a2:	4b52      	ldr	r3, [pc, #328]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 80127a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127a6:	f003 0301 	and.w	r3, r3, #1
 80127aa:	61fb      	str	r3, [r7, #28]
 80127ac:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80127ae:	230c      	movs	r3, #12
 80127b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127b4:	2302      	movs	r3, #2
 80127b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127ba:	2300      	movs	r3, #0
 80127bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127c0:	2303      	movs	r3, #3
 80127c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80127c6:	2308      	movs	r3, #8
 80127c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80127cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80127d0:	4619      	mov	r1, r3
 80127d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80127d6:	f001 fbb3 	bl	8013f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80127da:	e080      	b.n	80128de <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART1)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4a43      	ldr	r2, [pc, #268]	; (80128f0 <HAL_UART_MspInit+0x1c0>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d13b      	bne.n	801285e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80127e6:	2301      	movs	r3, #1
 80127e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80127ea:	2301      	movs	r3, #1
 80127ec:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80127ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127f2:	4618      	mov	r0, r3
 80127f4:	f002 fc72 	bl	80150dc <HAL_RCCEx_PeriphCLKConfig>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80127fe:	f7f9 fde5 	bl	800c3cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012802:	4b3a      	ldr	r3, [pc, #232]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012806:	4a39      	ldr	r2, [pc, #228]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801280c:	6613      	str	r3, [r2, #96]	; 0x60
 801280e:	4b37      	ldr	r3, [pc, #220]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012816:	61bb      	str	r3, [r7, #24]
 8012818:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801281a:	4b34      	ldr	r3, [pc, #208]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 801281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801281e:	4a33      	ldr	r2, [pc, #204]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012820:	f043 0302 	orr.w	r3, r3, #2
 8012824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012826:	4b31      	ldr	r3, [pc, #196]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801282a:	f003 0302 	and.w	r3, r3, #2
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8012832:	23c0      	movs	r3, #192	; 0xc0
 8012834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012838:	2302      	movs	r3, #2
 801283a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801283e:	2300      	movs	r3, #0
 8012840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012844:	2303      	movs	r3, #3
 8012846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801284a:	2307      	movs	r3, #7
 801284c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012850:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012854:	4619      	mov	r1, r3
 8012856:	4827      	ldr	r0, [pc, #156]	; (80128f4 <HAL_UART_MspInit+0x1c4>)
 8012858:	f001 fb72 	bl	8013f40 <HAL_GPIO_Init>
}
 801285c:	e03f      	b.n	80128de <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART2)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4a25      	ldr	r2, [pc, #148]	; (80128f8 <HAL_UART_MspInit+0x1c8>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d13a      	bne.n	80128de <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8012868:	2302      	movs	r3, #2
 801286a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 801286c:	2304      	movs	r3, #4
 801286e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012874:	4618      	mov	r0, r3
 8012876:	f002 fc31 	bl	80150dc <HAL_RCCEx_PeriphCLKConfig>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d001      	beq.n	8012884 <HAL_UART_MspInit+0x154>
      Error_Handler();
 8012880:	f7f9 fda4 	bl	800c3cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8012884:	4b19      	ldr	r3, [pc, #100]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012888:	4a18      	ldr	r2, [pc, #96]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 801288a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801288e:	6593      	str	r3, [r2, #88]	; 0x58
 8012890:	4b16      	ldr	r3, [pc, #88]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 8012892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012898:	613b      	str	r3, [r7, #16]
 801289a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801289c:	4b13      	ldr	r3, [pc, #76]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 801289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128a0:	4a12      	ldr	r2, [pc, #72]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 80128a2:	f043 0308 	orr.w	r3, r3, #8
 80128a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80128a8:	4b10      	ldr	r3, [pc, #64]	; (80128ec <HAL_UART_MspInit+0x1bc>)
 80128aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128ac:	f003 0308 	and.w	r3, r3, #8
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80128b4:	2360      	movs	r3, #96	; 0x60
 80128b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128ba:	2302      	movs	r3, #2
 80128bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128c0:	2300      	movs	r3, #0
 80128c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128c6:	2303      	movs	r3, #3
 80128c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80128cc:	2307      	movs	r3, #7
 80128ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80128d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80128d6:	4619      	mov	r1, r3
 80128d8:	4808      	ldr	r0, [pc, #32]	; (80128fc <HAL_UART_MspInit+0x1cc>)
 80128da:	f001 fb31 	bl	8013f40 <HAL_GPIO_Init>
}
 80128de:	bf00      	nop
 80128e0:	3798      	adds	r7, #152	; 0x98
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	40008000 	.word	0x40008000
 80128ec:	40021000 	.word	0x40021000
 80128f0:	40013800 	.word	0x40013800
 80128f4:	48000400 	.word	0x48000400
 80128f8:	40004400 	.word	0x40004400
 80128fc:	48000c00 	.word	0x48000c00

08012900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8012900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012938 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8012904:	f7ff fe76 	bl	80125f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012908:	480c      	ldr	r0, [pc, #48]	; (801293c <LoopForever+0x6>)
  ldr r1, =_edata
 801290a:	490d      	ldr	r1, [pc, #52]	; (8012940 <LoopForever+0xa>)
  ldr r2, =_sidata
 801290c:	4a0d      	ldr	r2, [pc, #52]	; (8012944 <LoopForever+0xe>)
  movs r3, #0
 801290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012910:	e002      	b.n	8012918 <LoopCopyDataInit>

08012912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012916:	3304      	adds	r3, #4

08012918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801291c:	d3f9      	bcc.n	8012912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801291e:	4a0a      	ldr	r2, [pc, #40]	; (8012948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8012920:	4c0a      	ldr	r4, [pc, #40]	; (801294c <LoopForever+0x16>)
  movs r3, #0
 8012922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012924:	e001      	b.n	801292a <LoopFillZerobss>

08012926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012928:	3204      	adds	r2, #4

0801292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801292c:	d3fb      	bcc.n	8012926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801292e:	f005 f9b9 	bl	8017ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8012932:	f7f9 fc0f 	bl	800c154 <main>

08012936 <LoopForever>:

LoopForever:
    b LoopForever
 8012936:	e7fe      	b.n	8012936 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8012938:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 801293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012940:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8012944:	08018e80 	.word	0x08018e80
  ldr r2, =_sbss
 8012948:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 801294c:	20001074 	.word	0x20001074

08012950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8012950:	e7fe      	b.n	8012950 <ADC1_IRQHandler>

08012952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012958:	2300      	movs	r3, #0
 801295a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801295c:	2003      	movs	r0, #3
 801295e:	f001 f835 	bl	80139cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012962:	200f      	movs	r0, #15
 8012964:	f000 f80e 	bl	8012984 <HAL_InitTick>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d002      	beq.n	8012974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	71fb      	strb	r3, [r7, #7]
 8012972:	e001      	b.n	8012978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012974:	f7ff fd6a 	bl	801244c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012978:	79fb      	ldrb	r3, [r7, #7]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801298c:	2300      	movs	r3, #0
 801298e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8012990:	4b17      	ldr	r3, [pc, #92]	; (80129f0 <HAL_InitTick+0x6c>)
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d023      	beq.n	80129e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8012998:	4b16      	ldr	r3, [pc, #88]	; (80129f4 <HAL_InitTick+0x70>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	4b14      	ldr	r3, [pc, #80]	; (80129f0 <HAL_InitTick+0x6c>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	4619      	mov	r1, r3
 80129a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80129a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80129aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80129ae:	4618      	mov	r0, r3
 80129b0:	f001 f841 	bl	8013a36 <HAL_SYSTICK_Config>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10f      	bne.n	80129da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b0f      	cmp	r3, #15
 80129be:	d809      	bhi.n	80129d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80129c0:	2200      	movs	r2, #0
 80129c2:	6879      	ldr	r1, [r7, #4]
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295
 80129c8:	f001 f80b 	bl	80139e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80129cc:	4a0a      	ldr	r2, [pc, #40]	; (80129f8 <HAL_InitTick+0x74>)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6013      	str	r3, [r2, #0]
 80129d2:	e007      	b.n	80129e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80129d4:	2301      	movs	r3, #1
 80129d6:	73fb      	strb	r3, [r7, #15]
 80129d8:	e004      	b.n	80129e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80129da:	2301      	movs	r3, #1
 80129dc:	73fb      	strb	r3, [r7, #15]
 80129de:	e001      	b.n	80129e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80129e0:	2301      	movs	r3, #1
 80129e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80129e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	2000000c 	.word	0x2000000c
 80129f4:	20000004 	.word	0x20000004
 80129f8:	20000008 	.word	0x20000008

080129fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80129fc:	b480      	push	{r7}
 80129fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012a00:	4b06      	ldr	r3, [pc, #24]	; (8012a1c <HAL_IncTick+0x20>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	461a      	mov	r2, r3
 8012a06:	4b06      	ldr	r3, [pc, #24]	; (8012a20 <HAL_IncTick+0x24>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	4a04      	ldr	r2, [pc, #16]	; (8012a20 <HAL_IncTick+0x24>)
 8012a0e:	6013      	str	r3, [r2, #0]
}
 8012a10:	bf00      	nop
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	2000000c 	.word	0x2000000c
 8012a20:	20000f24 	.word	0x20000f24

08012a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012a24:	b480      	push	{r7}
 8012a26:	af00      	add	r7, sp, #0
  return uwTick;
 8012a28:	4b03      	ldr	r3, [pc, #12]	; (8012a38 <HAL_GetTick+0x14>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop
 8012a38:	20000f24 	.word	0x20000f24

08012a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012a44:	f7ff ffee 	bl	8012a24 <HAL_GetTick>
 8012a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a54:	d005      	beq.n	8012a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8012a56:	4b0a      	ldr	r3, [pc, #40]	; (8012a80 <HAL_Delay+0x44>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	4413      	add	r3, r2
 8012a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012a62:	bf00      	nop
 8012a64:	f7ff ffde 	bl	8012a24 <HAL_GetTick>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	68fa      	ldr	r2, [r7, #12]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d8f7      	bhi.n	8012a64 <HAL_Delay+0x28>
  {
  }
}
 8012a74:	bf00      	nop
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	2000000c 	.word	0x2000000c

08012a84 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8012a8c:	4b06      	ldr	r3, [pc, #24]	; (8012aa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f023 0202 	bic.w	r2, r3, #2
 8012a94:	4904      	ldr	r1, [pc, #16]	; (8012aa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	600b      	str	r3, [r1, #0]
}
 8012a9c:	bf00      	nop
 8012a9e:	370c      	adds	r7, #12
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr
 8012aa8:	40010030 	.word	0x40010030

08012aac <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8012aac:	b480      	push	{r7}
 8012aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8012ab0:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	4a04      	ldr	r2, [pc, #16]	; (8012ac8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8012ab6:	f023 0301 	bic.w	r3, r3, #1
 8012aba:	6013      	str	r3, [r2, #0]
}
 8012abc:	bf00      	nop
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	40010030 	.word	0x40010030

08012acc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	689b      	ldr	r3, [r3, #8]
 8012ada:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	431a      	orrs	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	609a      	str	r2, [r3, #8]
}
 8012ae6:	bf00      	nop
 8012ae8:	370c      	adds	r7, #12
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr

08012af2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012af2:	b480      	push	{r7}
 8012af4:	b083      	sub	sp, #12
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	6078      	str	r0, [r7, #4]
 8012afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	431a      	orrs	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	609a      	str	r2, [r3, #8]
}
 8012b0c:	bf00      	nop
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b083      	sub	sp, #12
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b087      	sub	sp, #28
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
 8012b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	3360      	adds	r3, #96	; 0x60
 8012b46:	461a      	mov	r2, r3
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4413      	add	r3, r2
 8012b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	4b08      	ldr	r3, [pc, #32]	; (8012b78 <LL_ADC_SetOffset+0x44>)
 8012b56:	4013      	ands	r3, r2
 8012b58:	687a      	ldr	r2, [r7, #4]
 8012b5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8012b5e:	683a      	ldr	r2, [r7, #0]
 8012b60:	430a      	orrs	r2, r1
 8012b62:	4313      	orrs	r3, r2
 8012b64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8012b6c:	bf00      	nop
 8012b6e:	371c      	adds	r7, #28
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr
 8012b78:	03fff000 	.word	0x03fff000

08012b7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	3360      	adds	r3, #96	; 0x60
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	4413      	add	r3, r2
 8012b92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3714      	adds	r7, #20
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b087      	sub	sp, #28
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	3360      	adds	r3, #96	; 0x60
 8012bb8:	461a      	mov	r2, r3
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	4413      	add	r3, r2
 8012bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	431a      	orrs	r2, r3
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8012bd2:	bf00      	nop
 8012bd4:	371c      	adds	r7, #28
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8012bde:	b480      	push	{r7}
 8012be0:	b087      	sub	sp, #28
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	60b9      	str	r1, [r7, #8]
 8012be8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	3330      	adds	r3, #48	; 0x30
 8012bee:	461a      	mov	r2, r3
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	0a1b      	lsrs	r3, r3, #8
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	f003 030c 	and.w	r3, r3, #12
 8012bfa:	4413      	add	r3, r2
 8012bfc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	f003 031f 	and.w	r3, r3, #31
 8012c08:	211f      	movs	r1, #31
 8012c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c0e:	43db      	mvns	r3, r3
 8012c10:	401a      	ands	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	0e9b      	lsrs	r3, r3, #26
 8012c16:	f003 011f 	and.w	r1, r3, #31
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	f003 031f 	and.w	r3, r3, #31
 8012c20:	fa01 f303 	lsl.w	r3, r1, r3
 8012c24:	431a      	orrs	r2, r3
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8012c2a:	bf00      	nop
 8012c2c:	371c      	adds	r7, #28
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8012c36:	b480      	push	{r7}
 8012c38:	b087      	sub	sp, #28
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	3314      	adds	r3, #20
 8012c46:	461a      	mov	r2, r3
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	0e5b      	lsrs	r3, r3, #25
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	f003 0304 	and.w	r3, r3, #4
 8012c52:	4413      	add	r3, r2
 8012c54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	0d1b      	lsrs	r3, r3, #20
 8012c5e:	f003 031f 	and.w	r3, r3, #31
 8012c62:	2107      	movs	r1, #7
 8012c64:	fa01 f303 	lsl.w	r3, r1, r3
 8012c68:	43db      	mvns	r3, r3
 8012c6a:	401a      	ands	r2, r3
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	0d1b      	lsrs	r3, r3, #20
 8012c70:	f003 031f 	and.w	r3, r3, #31
 8012c74:	6879      	ldr	r1, [r7, #4]
 8012c76:	fa01 f303 	lsl.w	r3, r1, r3
 8012c7a:	431a      	orrs	r2, r3
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8012c80:	bf00      	nop
 8012c82:	371c      	adds	r7, #28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ca4:	43db      	mvns	r3, r3
 8012ca6:	401a      	ands	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f003 0318 	and.w	r3, r3, #24
 8012cae:	4908      	ldr	r1, [pc, #32]	; (8012cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8012cb0:	40d9      	lsrs	r1, r3
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	400b      	ands	r3, r1
 8012cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cba:	431a      	orrs	r2, r3
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8012cc2:	bf00      	nop
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	0007ffff 	.word	0x0007ffff

08012cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8012ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	6093      	str	r3, [r2, #8]
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	689b      	ldr	r3, [r3, #8]
 8012d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012d0c:	d101      	bne.n	8012d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e000      	b.n	8012d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8012d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8012d3c:	bf00      	nop
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012d5c:	d101      	bne.n	8012d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e000      	b.n	8012d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8012d62:	2300      	movs	r3, #0
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	689b      	ldr	r3, [r3, #8]
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d101      	bne.n	8012d88 <LL_ADC_IsEnabled+0x18>
 8012d84:	2301      	movs	r3, #1
 8012d86:	e000      	b.n	8012d8a <LL_ADC_IsEnabled+0x1a>
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	370c      	adds	r7, #12
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d94:	4770      	bx	lr

08012d96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012d96:	b480      	push	{r7}
 8012d98:	b083      	sub	sp, #12
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	f003 0304 	and.w	r3, r3, #4
 8012da6:	2b04      	cmp	r3, #4
 8012da8:	d101      	bne.n	8012dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8012daa:	2301      	movs	r3, #1
 8012dac:	e000      	b.n	8012db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	f003 0308 	and.w	r3, r3, #8
 8012dcc:	2b08      	cmp	r3, #8
 8012dce:	d101      	bne.n	8012dd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e000      	b.n	8012dd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012dd4:	2300      	movs	r3, #0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr
	...

08012de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b088      	sub	sp, #32
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8012df0:	2300      	movs	r3, #0
 8012df2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d101      	bne.n	8012dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e126      	b.n	801304c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	691b      	ldr	r3, [r3, #16]
 8012e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d109      	bne.n	8012e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7ee f8d5 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2200      	movs	r2, #0
 8012e16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff ff67 	bl	8012cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d004      	beq.n	8012e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff ff4d 	bl	8012cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ff ff82 	bl	8012d48 <LL_ADC_IsInternalRegulatorEnabled>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d115      	bne.n	8012e76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7ff ff66 	bl	8012d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012e54:	4b7f      	ldr	r3, [pc, #508]	; (8013054 <HAL_ADC_Init+0x270>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	099b      	lsrs	r3, r3, #6
 8012e5a:	4a7f      	ldr	r2, [pc, #508]	; (8013058 <HAL_ADC_Init+0x274>)
 8012e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8012e60:	099b      	lsrs	r3, r3, #6
 8012e62:	3301      	adds	r3, #1
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012e68:	e002      	b.n	8012e70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d1f9      	bne.n	8012e6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff ff64 	bl	8012d48 <LL_ADC_IsInternalRegulatorEnabled>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d10d      	bne.n	8012ea2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e8a:	f043 0210 	orr.w	r2, r3, #16
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e96:	f043 0201 	orr.w	r2, r3, #1
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff ff75 	bl	8012d96 <LL_ADC_REG_IsConversionOngoing>
 8012eac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eb2:	f003 0310 	and.w	r3, r3, #16
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	f040 80bf 	bne.w	801303a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f040 80bb 	bne.w	801303a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ec8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8012ecc:	f043 0202 	orr.w	r2, r3, #2
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff ff49 	bl	8012d70 <LL_ADC_IsEnabled>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d10b      	bne.n	8012efc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012ee4:	485d      	ldr	r0, [pc, #372]	; (801305c <HAL_ADC_Init+0x278>)
 8012ee6:	f7ff ff43 	bl	8012d70 <LL_ADC_IsEnabled>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d105      	bne.n	8012efc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	485a      	ldr	r0, [pc, #360]	; (8013060 <HAL_ADC_Init+0x27c>)
 8012ef8:	f7ff fde8 	bl	8012acc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	7e5b      	ldrb	r3, [r3, #25]
 8012f00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012f06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8012f0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8012f12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d106      	bne.n	8012f38 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	045b      	lsls	r3, r3, #17
 8012f32:	69ba      	ldr	r2, [r7, #24]
 8012f34:	4313      	orrs	r3, r2
 8012f36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d009      	beq.n	8012f54 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012f4e:	69ba      	ldr	r2, [r7, #24]
 8012f50:	4313      	orrs	r3, r2
 8012f52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	68da      	ldr	r2, [r3, #12]
 8012f5a:	4b42      	ldr	r3, [pc, #264]	; (8013064 <HAL_ADC_Init+0x280>)
 8012f5c:	4013      	ands	r3, r2
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	6812      	ldr	r2, [r2, #0]
 8012f62:	69b9      	ldr	r1, [r7, #24]
 8012f64:	430b      	orrs	r3, r1
 8012f66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff ff25 	bl	8012dbc <LL_ADC_INJ_IsConversionOngoing>
 8012f72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d13d      	bne.n	8012ff6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d13a      	bne.n	8012ff6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8012f84:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f9c:	f023 0302 	bic.w	r3, r3, #2
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	6812      	ldr	r2, [r2, #0]
 8012fa4:	69b9      	ldr	r1, [r7, #24]
 8012fa6:	430b      	orrs	r3, r1
 8012fa8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d118      	bne.n	8012fe6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	691b      	ldr	r3, [r3, #16]
 8012fba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012fbe:	f023 0304 	bic.w	r3, r3, #4
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012fca:	4311      	orrs	r1, r2
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012fd0:	4311      	orrs	r1, r2
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012fd6:	430a      	orrs	r2, r1
 8012fd8:	431a      	orrs	r2, r3
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f042 0201 	orr.w	r2, r2, #1
 8012fe2:	611a      	str	r2, [r3, #16]
 8012fe4:	e007      	b.n	8012ff6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	691a      	ldr	r2, [r3, #16]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f022 0201 	bic.w	r2, r2, #1
 8012ff4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	691b      	ldr	r3, [r3, #16]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d10c      	bne.n	8013018 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013004:	f023 010f 	bic.w	r1, r3, #15
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	69db      	ldr	r3, [r3, #28]
 801300c:	1e5a      	subs	r2, r3, #1
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	430a      	orrs	r2, r1
 8013014:	631a      	str	r2, [r3, #48]	; 0x30
 8013016:	e007      	b.n	8013028 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f022 020f 	bic.w	r2, r2, #15
 8013026:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302c:	f023 0303 	bic.w	r3, r3, #3
 8013030:	f043 0201 	orr.w	r2, r3, #1
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	655a      	str	r2, [r3, #84]	; 0x54
 8013038:	e007      	b.n	801304a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801303e:	f043 0210 	orr.w	r2, r3, #16
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013046:	2301      	movs	r3, #1
 8013048:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801304a:	7ffb      	ldrb	r3, [r7, #31]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3720      	adds	r7, #32
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	20000004 	.word	0x20000004
 8013058:	053e2d63 	.word	0x053e2d63
 801305c:	50040000 	.word	0x50040000
 8013060:	50040300 	.word	0x50040300
 8013064:	fff0c007 	.word	0xfff0c007

08013068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b0b6      	sub	sp, #216	; 0xd8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013072:	2300      	movs	r3, #0
 8013074:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8013078:	2300      	movs	r3, #0
 801307a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013082:	2b01      	cmp	r3, #1
 8013084:	d101      	bne.n	801308a <HAL_ADC_ConfigChannel+0x22>
 8013086:	2302      	movs	r3, #2
 8013088:	e3bb      	b.n	8013802 <HAL_ADC_ConfigChannel+0x79a>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2201      	movs	r2, #1
 801308e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	4618      	mov	r0, r3
 8013098:	f7ff fe7d 	bl	8012d96 <LL_ADC_REG_IsConversionOngoing>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	f040 83a0 	bne.w	80137e4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	2b05      	cmp	r3, #5
 80130b2:	d824      	bhi.n	80130fe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	3b02      	subs	r3, #2
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d81b      	bhi.n	80130f6 <HAL_ADC_ConfigChannel+0x8e>
 80130be:	a201      	add	r2, pc, #4	; (adr r2, 80130c4 <HAL_ADC_ConfigChannel+0x5c>)
 80130c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130c4:	080130d5 	.word	0x080130d5
 80130c8:	080130dd 	.word	0x080130dd
 80130cc:	080130e5 	.word	0x080130e5
 80130d0:	080130ed 	.word	0x080130ed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80130d4:	230c      	movs	r3, #12
 80130d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80130da:	e010      	b.n	80130fe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80130dc:	2312      	movs	r3, #18
 80130de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80130e2:	e00c      	b.n	80130fe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80130e4:	2318      	movs	r3, #24
 80130e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80130ea:	e008      	b.n	80130fe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80130ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80130f4:	e003      	b.n	80130fe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80130f6:	2306      	movs	r3, #6
 80130f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80130fc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6818      	ldr	r0, [r3, #0]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	461a      	mov	r2, r3
 8013108:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801310c:	f7ff fd67 	bl	8012bde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4618      	mov	r0, r3
 8013116:	f7ff fe3e 	bl	8012d96 <LL_ADC_REG_IsConversionOngoing>
 801311a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4618      	mov	r0, r3
 8013124:	f7ff fe4a 	bl	8012dbc <LL_ADC_INJ_IsConversionOngoing>
 8013128:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801312c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013130:	2b00      	cmp	r3, #0
 8013132:	f040 81a4 	bne.w	801347e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801313a:	2b00      	cmp	r3, #0
 801313c:	f040 819f 	bne.w	801347e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6818      	ldr	r0, [r3, #0]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	6819      	ldr	r1, [r3, #0]
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	461a      	mov	r2, r3
 801314e:	f7ff fd72 	bl	8012c36 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	695a      	ldr	r2, [r3, #20]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	68db      	ldr	r3, [r3, #12]
 801315c:	08db      	lsrs	r3, r3, #3
 801315e:	f003 0303 	and.w	r3, r3, #3
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	fa02 f303 	lsl.w	r3, r2, r3
 8013168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	691b      	ldr	r3, [r3, #16]
 8013170:	2b04      	cmp	r3, #4
 8013172:	d00a      	beq.n	801318a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	6919      	ldr	r1, [r3, #16]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013184:	f7ff fcd6 	bl	8012b34 <LL_ADC_SetOffset>
 8013188:	e179      	b.n	801347e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2100      	movs	r1, #0
 8013190:	4618      	mov	r0, r3
 8013192:	f7ff fcf3 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 8013196:	4603      	mov	r3, r0
 8013198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801319c:	2b00      	cmp	r3, #0
 801319e:	d10a      	bne.n	80131b6 <HAL_ADC_ConfigChannel+0x14e>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7ff fce8 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 80131ac:	4603      	mov	r3, r0
 80131ae:	0e9b      	lsrs	r3, r3, #26
 80131b0:	f003 021f 	and.w	r2, r3, #31
 80131b4:	e01e      	b.n	80131f4 <HAL_ADC_ConfigChannel+0x18c>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2100      	movs	r1, #0
 80131bc:	4618      	mov	r0, r3
 80131be:	f7ff fcdd 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 80131c2:	4603      	mov	r3, r0
 80131c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80131cc:	fa93 f3a3 	rbit	r3, r3
 80131d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80131d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80131d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80131dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d101      	bne.n	80131e8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80131e4:	2320      	movs	r3, #32
 80131e6:	e004      	b.n	80131f2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80131e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80131ec:	fab3 f383 	clz	r3, r3
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d105      	bne.n	801320c <HAL_ADC_ConfigChannel+0x1a4>
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	0e9b      	lsrs	r3, r3, #26
 8013206:	f003 031f 	and.w	r3, r3, #31
 801320a:	e018      	b.n	801323e <HAL_ADC_ConfigChannel+0x1d6>
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013218:	fa93 f3a3 	rbit	r3, r3
 801321c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8013220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8013228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8013230:	2320      	movs	r3, #32
 8013232:	e004      	b.n	801323e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8013234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013238:	fab3 f383 	clz	r3, r3
 801323c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801323e:	429a      	cmp	r2, r3
 8013240:	d106      	bne.n	8013250 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2200      	movs	r2, #0
 8013248:	2100      	movs	r1, #0
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff fcac 	bl	8012ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2101      	movs	r1, #1
 8013256:	4618      	mov	r0, r3
 8013258:	f7ff fc90 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 801325c:	4603      	mov	r3, r0
 801325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013262:	2b00      	cmp	r3, #0
 8013264:	d10a      	bne.n	801327c <HAL_ADC_ConfigChannel+0x214>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2101      	movs	r1, #1
 801326c:	4618      	mov	r0, r3
 801326e:	f7ff fc85 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 8013272:	4603      	mov	r3, r0
 8013274:	0e9b      	lsrs	r3, r3, #26
 8013276:	f003 021f 	and.w	r2, r3, #31
 801327a:	e01e      	b.n	80132ba <HAL_ADC_ConfigChannel+0x252>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2101      	movs	r1, #1
 8013282:	4618      	mov	r0, r3
 8013284:	f7ff fc7a 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 8013288:	4603      	mov	r3, r0
 801328a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801328e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013292:	fa93 f3a3 	rbit	r3, r3
 8013296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 801329a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801329e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80132a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80132aa:	2320      	movs	r3, #32
 80132ac:	e004      	b.n	80132b8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80132ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80132b2:	fab3 f383 	clz	r3, r3
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d105      	bne.n	80132d2 <HAL_ADC_ConfigChannel+0x26a>
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	0e9b      	lsrs	r3, r3, #26
 80132cc:	f003 031f 	and.w	r3, r3, #31
 80132d0:	e018      	b.n	8013304 <HAL_ADC_ConfigChannel+0x29c>
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80132da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80132de:	fa93 f3a3 	rbit	r3, r3
 80132e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80132e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80132ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d101      	bne.n	80132fa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80132f6:	2320      	movs	r3, #32
 80132f8:	e004      	b.n	8013304 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80132fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80132fe:	fab3 f383 	clz	r3, r3
 8013302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013304:	429a      	cmp	r2, r3
 8013306:	d106      	bne.n	8013316 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	2200      	movs	r2, #0
 801330e:	2101      	movs	r1, #1
 8013310:	4618      	mov	r0, r3
 8013312:	f7ff fc49 	bl	8012ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2102      	movs	r1, #2
 801331c:	4618      	mov	r0, r3
 801331e:	f7ff fc2d 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 8013322:	4603      	mov	r3, r0
 8013324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013328:	2b00      	cmp	r3, #0
 801332a:	d10a      	bne.n	8013342 <HAL_ADC_ConfigChannel+0x2da>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2102      	movs	r1, #2
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff fc22 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 8013338:	4603      	mov	r3, r0
 801333a:	0e9b      	lsrs	r3, r3, #26
 801333c:	f003 021f 	and.w	r2, r3, #31
 8013340:	e01e      	b.n	8013380 <HAL_ADC_ConfigChannel+0x318>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2102      	movs	r1, #2
 8013348:	4618      	mov	r0, r3
 801334a:	f7ff fc17 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 801334e:	4603      	mov	r3, r0
 8013350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013358:	fa93 f3a3 	rbit	r3, r3
 801335c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8013360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8013368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8013370:	2320      	movs	r3, #32
 8013372:	e004      	b.n	801337e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8013374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013378:	fab3 f383 	clz	r3, r3
 801337c:	b2db      	uxtb	r3, r3
 801337e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013388:	2b00      	cmp	r3, #0
 801338a:	d105      	bne.n	8013398 <HAL_ADC_ConfigChannel+0x330>
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	0e9b      	lsrs	r3, r3, #26
 8013392:	f003 031f 	and.w	r3, r3, #31
 8013396:	e014      	b.n	80133c2 <HAL_ADC_ConfigChannel+0x35a>
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801339e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133a0:	fa93 f3a3 	rbit	r3, r3
 80133a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80133a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80133ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d101      	bne.n	80133b8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80133b4:	2320      	movs	r3, #32
 80133b6:	e004      	b.n	80133c2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80133b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80133bc:	fab3 f383 	clz	r3, r3
 80133c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d106      	bne.n	80133d4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2200      	movs	r2, #0
 80133cc:	2102      	movs	r1, #2
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff fbea 	bl	8012ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2103      	movs	r1, #3
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff fbce 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 80133e0:	4603      	mov	r3, r0
 80133e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d10a      	bne.n	8013400 <HAL_ADC_ConfigChannel+0x398>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2103      	movs	r1, #3
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7ff fbc3 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 80133f6:	4603      	mov	r3, r0
 80133f8:	0e9b      	lsrs	r3, r3, #26
 80133fa:	f003 021f 	and.w	r2, r3, #31
 80133fe:	e017      	b.n	8013430 <HAL_ADC_ConfigChannel+0x3c8>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2103      	movs	r1, #3
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff fbb8 	bl	8012b7c <LL_ADC_GetOffsetChannel>
 801340c:	4603      	mov	r3, r0
 801340e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013412:	fa93 f3a3 	rbit	r3, r3
 8013416:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8013418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801341a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 801341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801341e:	2b00      	cmp	r3, #0
 8013420:	d101      	bne.n	8013426 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8013422:	2320      	movs	r3, #32
 8013424:	e003      	b.n	801342e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8013426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013428:	fab3 f383 	clz	r3, r3
 801342c:	b2db      	uxtb	r3, r3
 801342e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013438:	2b00      	cmp	r3, #0
 801343a:	d105      	bne.n	8013448 <HAL_ADC_ConfigChannel+0x3e0>
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	0e9b      	lsrs	r3, r3, #26
 8013442:	f003 031f 	and.w	r3, r3, #31
 8013446:	e011      	b.n	801346c <HAL_ADC_ConfigChannel+0x404>
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801344e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013450:	fa93 f3a3 	rbit	r3, r3
 8013454:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8013456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013458:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 801345a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8013460:	2320      	movs	r3, #32
 8013462:	e003      	b.n	801346c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8013464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013466:	fab3 f383 	clz	r3, r3
 801346a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801346c:	429a      	cmp	r2, r3
 801346e:	d106      	bne.n	801347e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2200      	movs	r2, #0
 8013476:	2103      	movs	r1, #3
 8013478:	4618      	mov	r0, r3
 801347a:	f7ff fb95 	bl	8012ba8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff fc74 	bl	8012d70 <LL_ADC_IsEnabled>
 8013488:	4603      	mov	r3, r0
 801348a:	2b00      	cmp	r3, #0
 801348c:	f040 8140 	bne.w	8013710 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6818      	ldr	r0, [r3, #0]
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	6819      	ldr	r1, [r3, #0]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	461a      	mov	r2, r3
 801349e:	f7ff fbf5 	bl	8012c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	4a8f      	ldr	r2, [pc, #572]	; (80136e4 <HAL_ADC_ConfigChannel+0x67c>)
 80134a8:	4293      	cmp	r3, r2
 80134aa:	f040 8131 	bne.w	8013710 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d10b      	bne.n	80134d6 <HAL_ADC_ConfigChannel+0x46e>
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	0e9b      	lsrs	r3, r3, #26
 80134c4:	3301      	adds	r3, #1
 80134c6:	f003 031f 	and.w	r3, r3, #31
 80134ca:	2b09      	cmp	r3, #9
 80134cc:	bf94      	ite	ls
 80134ce:	2301      	movls	r3, #1
 80134d0:	2300      	movhi	r3, #0
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	e019      	b.n	801350a <HAL_ADC_ConfigChannel+0x4a2>
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80134dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134de:	fa93 f3a3 	rbit	r3, r3
 80134e2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80134e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80134e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d101      	bne.n	80134f2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80134ee:	2320      	movs	r3, #32
 80134f0:	e003      	b.n	80134fa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80134f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134f4:	fab3 f383 	clz	r3, r3
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	3301      	adds	r3, #1
 80134fc:	f003 031f 	and.w	r3, r3, #31
 8013500:	2b09      	cmp	r3, #9
 8013502:	bf94      	ite	ls
 8013504:	2301      	movls	r3, #1
 8013506:	2300      	movhi	r3, #0
 8013508:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801350a:	2b00      	cmp	r3, #0
 801350c:	d079      	beq.n	8013602 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013516:	2b00      	cmp	r3, #0
 8013518:	d107      	bne.n	801352a <HAL_ADC_ConfigChannel+0x4c2>
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	0e9b      	lsrs	r3, r3, #26
 8013520:	3301      	adds	r3, #1
 8013522:	069b      	lsls	r3, r3, #26
 8013524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013528:	e015      	b.n	8013556 <HAL_ADC_ConfigChannel+0x4ee>
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013532:	fa93 f3a3 	rbit	r3, r3
 8013536:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8013538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801353a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 801353c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801353e:	2b00      	cmp	r3, #0
 8013540:	d101      	bne.n	8013546 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8013542:	2320      	movs	r3, #32
 8013544:	e003      	b.n	801354e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8013546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013548:	fab3 f383 	clz	r3, r3
 801354c:	b2db      	uxtb	r3, r3
 801354e:	3301      	adds	r3, #1
 8013550:	069b      	lsls	r3, r3, #26
 8013552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801355e:	2b00      	cmp	r3, #0
 8013560:	d109      	bne.n	8013576 <HAL_ADC_ConfigChannel+0x50e>
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	0e9b      	lsrs	r3, r3, #26
 8013568:	3301      	adds	r3, #1
 801356a:	f003 031f 	and.w	r3, r3, #31
 801356e:	2101      	movs	r1, #1
 8013570:	fa01 f303 	lsl.w	r3, r1, r3
 8013574:	e017      	b.n	80135a6 <HAL_ADC_ConfigChannel+0x53e>
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801357c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801357e:	fa93 f3a3 	rbit	r3, r3
 8013582:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8013584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013586:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8013588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801358a:	2b00      	cmp	r3, #0
 801358c:	d101      	bne.n	8013592 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 801358e:	2320      	movs	r3, #32
 8013590:	e003      	b.n	801359a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8013592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013594:	fab3 f383 	clz	r3, r3
 8013598:	b2db      	uxtb	r3, r3
 801359a:	3301      	adds	r3, #1
 801359c:	f003 031f 	and.w	r3, r3, #31
 80135a0:	2101      	movs	r1, #1
 80135a2:	fa01 f303 	lsl.w	r3, r1, r3
 80135a6:	ea42 0103 	orr.w	r1, r2, r3
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10a      	bne.n	80135cc <HAL_ADC_ConfigChannel+0x564>
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	0e9b      	lsrs	r3, r3, #26
 80135bc:	3301      	adds	r3, #1
 80135be:	f003 021f 	and.w	r2, r3, #31
 80135c2:	4613      	mov	r3, r2
 80135c4:	005b      	lsls	r3, r3, #1
 80135c6:	4413      	add	r3, r2
 80135c8:	051b      	lsls	r3, r3, #20
 80135ca:	e018      	b.n	80135fe <HAL_ADC_ConfigChannel+0x596>
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80135d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d4:	fa93 f3a3 	rbit	r3, r3
 80135d8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80135da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d101      	bne.n	80135e8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80135e4:	2320      	movs	r3, #32
 80135e6:	e003      	b.n	80135f0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80135e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ea:	fab3 f383 	clz	r3, r3
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	3301      	adds	r3, #1
 80135f2:	f003 021f 	and.w	r2, r3, #31
 80135f6:	4613      	mov	r3, r2
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	4413      	add	r3, r2
 80135fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80135fe:	430b      	orrs	r3, r1
 8013600:	e081      	b.n	8013706 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801360a:	2b00      	cmp	r3, #0
 801360c:	d107      	bne.n	801361e <HAL_ADC_ConfigChannel+0x5b6>
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	0e9b      	lsrs	r3, r3, #26
 8013614:	3301      	adds	r3, #1
 8013616:	069b      	lsls	r3, r3, #26
 8013618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801361c:	e015      	b.n	801364a <HAL_ADC_ConfigChannel+0x5e2>
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013626:	fa93 f3a3 	rbit	r3, r3
 801362a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 801362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8013630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8013636:	2320      	movs	r3, #32
 8013638:	e003      	b.n	8013642 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 801363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363c:	fab3 f383 	clz	r3, r3
 8013640:	b2db      	uxtb	r3, r3
 8013642:	3301      	adds	r3, #1
 8013644:	069b      	lsls	r3, r3, #26
 8013646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013652:	2b00      	cmp	r3, #0
 8013654:	d109      	bne.n	801366a <HAL_ADC_ConfigChannel+0x602>
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	0e9b      	lsrs	r3, r3, #26
 801365c:	3301      	adds	r3, #1
 801365e:	f003 031f 	and.w	r3, r3, #31
 8013662:	2101      	movs	r1, #1
 8013664:	fa01 f303 	lsl.w	r3, r1, r3
 8013668:	e017      	b.n	801369a <HAL_ADC_ConfigChannel+0x632>
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	fa93 f3a3 	rbit	r3, r3
 8013676:	61bb      	str	r3, [r7, #24]
  return result;
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 801367c:	6a3b      	ldr	r3, [r7, #32]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d101      	bne.n	8013686 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8013682:	2320      	movs	r3, #32
 8013684:	e003      	b.n	801368e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8013686:	6a3b      	ldr	r3, [r7, #32]
 8013688:	fab3 f383 	clz	r3, r3
 801368c:	b2db      	uxtb	r3, r3
 801368e:	3301      	adds	r3, #1
 8013690:	f003 031f 	and.w	r3, r3, #31
 8013694:	2101      	movs	r1, #1
 8013696:	fa01 f303 	lsl.w	r3, r1, r3
 801369a:	ea42 0103 	orr.w	r1, r2, r3
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d10d      	bne.n	80136c6 <HAL_ADC_ConfigChannel+0x65e>
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	0e9b      	lsrs	r3, r3, #26
 80136b0:	3301      	adds	r3, #1
 80136b2:	f003 021f 	and.w	r2, r3, #31
 80136b6:	4613      	mov	r3, r2
 80136b8:	005b      	lsls	r3, r3, #1
 80136ba:	4413      	add	r3, r2
 80136bc:	3b1e      	subs	r3, #30
 80136be:	051b      	lsls	r3, r3, #20
 80136c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80136c4:	e01e      	b.n	8013704 <HAL_ADC_ConfigChannel+0x69c>
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	fa93 f3a3 	rbit	r3, r3
 80136d2:	60fb      	str	r3, [r7, #12]
  return result;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d104      	bne.n	80136e8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80136de:	2320      	movs	r3, #32
 80136e0:	e006      	b.n	80136f0 <HAL_ADC_ConfigChannel+0x688>
 80136e2:	bf00      	nop
 80136e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	fab3 f383 	clz	r3, r3
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	3301      	adds	r3, #1
 80136f2:	f003 021f 	and.w	r2, r3, #31
 80136f6:	4613      	mov	r3, r2
 80136f8:	005b      	lsls	r3, r3, #1
 80136fa:	4413      	add	r3, r2
 80136fc:	3b1e      	subs	r3, #30
 80136fe:	051b      	lsls	r3, r3, #20
 8013700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013704:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8013706:	683a      	ldr	r2, [r7, #0]
 8013708:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801370a:	4619      	mov	r1, r3
 801370c:	f7ff fa93 	bl	8012c36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	4b3d      	ldr	r3, [pc, #244]	; (801380c <HAL_ADC_ConfigChannel+0x7a4>)
 8013716:	4013      	ands	r3, r2
 8013718:	2b00      	cmp	r3, #0
 801371a:	d06c      	beq.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801371c:	483c      	ldr	r0, [pc, #240]	; (8013810 <HAL_ADC_ConfigChannel+0x7a8>)
 801371e:	f7ff f9fb 	bl	8012b18 <LL_ADC_GetCommonPathInternalCh>
 8013722:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	4a3a      	ldr	r2, [pc, #232]	; (8013814 <HAL_ADC_ConfigChannel+0x7ac>)
 801372c:	4293      	cmp	r3, r2
 801372e:	d127      	bne.n	8013780 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8013730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013738:	2b00      	cmp	r3, #0
 801373a:	d121      	bne.n	8013780 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	4a35      	ldr	r2, [pc, #212]	; (8013818 <HAL_ADC_ConfigChannel+0x7b0>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d157      	bne.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801374a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801374e:	4619      	mov	r1, r3
 8013750:	482f      	ldr	r0, [pc, #188]	; (8013810 <HAL_ADC_ConfigChannel+0x7a8>)
 8013752:	f7ff f9ce 	bl	8012af2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013756:	4b31      	ldr	r3, [pc, #196]	; (801381c <HAL_ADC_ConfigChannel+0x7b4>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	099b      	lsrs	r3, r3, #6
 801375c:	4a30      	ldr	r2, [pc, #192]	; (8013820 <HAL_ADC_ConfigChannel+0x7b8>)
 801375e:	fba2 2303 	umull	r2, r3, r2, r3
 8013762:	099b      	lsrs	r3, r3, #6
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	4613      	mov	r3, r2
 8013768:	005b      	lsls	r3, r3, #1
 801376a:	4413      	add	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8013770:	e002      	b.n	8013778 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	3b01      	subs	r3, #1
 8013776:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d1f9      	bne.n	8013772 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801377e:	e03a      	b.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a27      	ldr	r2, [pc, #156]	; (8013824 <HAL_ADC_ConfigChannel+0x7bc>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d113      	bne.n	80137b2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801378a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013792:	2b00      	cmp	r3, #0
 8013794:	d10d      	bne.n	80137b2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	4a1f      	ldr	r2, [pc, #124]	; (8013818 <HAL_ADC_ConfigChannel+0x7b0>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d12a      	bne.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80137a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80137a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137a8:	4619      	mov	r1, r3
 80137aa:	4819      	ldr	r0, [pc, #100]	; (8013810 <HAL_ADC_ConfigChannel+0x7a8>)
 80137ac:	f7ff f9a1 	bl	8012af2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80137b0:	e021      	b.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a1c      	ldr	r2, [pc, #112]	; (8013828 <HAL_ADC_ConfigChannel+0x7c0>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d11c      	bne.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80137bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80137c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d116      	bne.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4a12      	ldr	r2, [pc, #72]	; (8013818 <HAL_ADC_ConfigChannel+0x7b0>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d111      	bne.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80137d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80137d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80137da:	4619      	mov	r1, r3
 80137dc:	480c      	ldr	r0, [pc, #48]	; (8013810 <HAL_ADC_ConfigChannel+0x7a8>)
 80137de:	f7ff f988 	bl	8012af2 <LL_ADC_SetCommonPathInternalCh>
 80137e2:	e008      	b.n	80137f6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137e8:	f043 0220 	orr.w	r2, r3, #32
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80137f0:	2301      	movs	r3, #1
 80137f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2200      	movs	r2, #0
 80137fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80137fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8013802:	4618      	mov	r0, r3
 8013804:	37d8      	adds	r7, #216	; 0xd8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
 801380a:	bf00      	nop
 801380c:	80080000 	.word	0x80080000
 8013810:	50040300 	.word	0x50040300
 8013814:	c7520000 	.word	0xc7520000
 8013818:	50040000 	.word	0x50040000
 801381c:	20000004 	.word	0x20000004
 8013820:	053e2d63 	.word	0x053e2d63
 8013824:	cb840000 	.word	0xcb840000
 8013828:	80000001 	.word	0x80000001

0801382c <__NVIC_SetPriorityGrouping>:
{
 801382c:	b480      	push	{r7}
 801382e:	b085      	sub	sp, #20
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f003 0307 	and.w	r3, r3, #7
 801383a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801383c:	4b0c      	ldr	r3, [pc, #48]	; (8013870 <__NVIC_SetPriorityGrouping+0x44>)
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013842:	68ba      	ldr	r2, [r7, #8]
 8013844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013848:	4013      	ands	r3, r2
 801384a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801385c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801385e:	4a04      	ldr	r2, [pc, #16]	; (8013870 <__NVIC_SetPriorityGrouping+0x44>)
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	60d3      	str	r3, [r2, #12]
}
 8013864:	bf00      	nop
 8013866:	3714      	adds	r7, #20
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr
 8013870:	e000ed00 	.word	0xe000ed00

08013874 <__NVIC_GetPriorityGrouping>:
{
 8013874:	b480      	push	{r7}
 8013876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013878:	4b04      	ldr	r3, [pc, #16]	; (801388c <__NVIC_GetPriorityGrouping+0x18>)
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	0a1b      	lsrs	r3, r3, #8
 801387e:	f003 0307 	and.w	r3, r3, #7
}
 8013882:	4618      	mov	r0, r3
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr
 801388c:	e000ed00 	.word	0xe000ed00

08013890 <__NVIC_EnableIRQ>:
{
 8013890:	b480      	push	{r7}
 8013892:	b083      	sub	sp, #12
 8013894:	af00      	add	r7, sp, #0
 8013896:	4603      	mov	r3, r0
 8013898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	db0b      	blt.n	80138ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80138a2:	79fb      	ldrb	r3, [r7, #7]
 80138a4:	f003 021f 	and.w	r2, r3, #31
 80138a8:	4907      	ldr	r1, [pc, #28]	; (80138c8 <__NVIC_EnableIRQ+0x38>)
 80138aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138ae:	095b      	lsrs	r3, r3, #5
 80138b0:	2001      	movs	r0, #1
 80138b2:	fa00 f202 	lsl.w	r2, r0, r2
 80138b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80138ba:	bf00      	nop
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	e000e100 	.word	0xe000e100

080138cc <__NVIC_SetPriority>:
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	4603      	mov	r3, r0
 80138d4:	6039      	str	r1, [r7, #0]
 80138d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80138d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	db0a      	blt.n	80138f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	b2da      	uxtb	r2, r3
 80138e4:	490c      	ldr	r1, [pc, #48]	; (8013918 <__NVIC_SetPriority+0x4c>)
 80138e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138ea:	0112      	lsls	r2, r2, #4
 80138ec:	b2d2      	uxtb	r2, r2
 80138ee:	440b      	add	r3, r1
 80138f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80138f4:	e00a      	b.n	801390c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	4908      	ldr	r1, [pc, #32]	; (801391c <__NVIC_SetPriority+0x50>)
 80138fc:	79fb      	ldrb	r3, [r7, #7]
 80138fe:	f003 030f 	and.w	r3, r3, #15
 8013902:	3b04      	subs	r3, #4
 8013904:	0112      	lsls	r2, r2, #4
 8013906:	b2d2      	uxtb	r2, r2
 8013908:	440b      	add	r3, r1
 801390a:	761a      	strb	r2, [r3, #24]
}
 801390c:	bf00      	nop
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr
 8013918:	e000e100 	.word	0xe000e100
 801391c:	e000ed00 	.word	0xe000ed00

08013920 <NVIC_EncodePriority>:
{
 8013920:	b480      	push	{r7}
 8013922:	b089      	sub	sp, #36	; 0x24
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f003 0307 	and.w	r3, r3, #7
 8013932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	f1c3 0307 	rsb	r3, r3, #7
 801393a:	2b04      	cmp	r3, #4
 801393c:	bf28      	it	cs
 801393e:	2304      	movcs	r3, #4
 8013940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	3304      	adds	r3, #4
 8013946:	2b06      	cmp	r3, #6
 8013948:	d902      	bls.n	8013950 <NVIC_EncodePriority+0x30>
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	3b03      	subs	r3, #3
 801394e:	e000      	b.n	8013952 <NVIC_EncodePriority+0x32>
 8013950:	2300      	movs	r3, #0
 8013952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013954:	f04f 32ff 	mov.w	r2, #4294967295
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	fa02 f303 	lsl.w	r3, r2, r3
 801395e:	43da      	mvns	r2, r3
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	401a      	ands	r2, r3
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013968:	f04f 31ff 	mov.w	r1, #4294967295
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	fa01 f303 	lsl.w	r3, r1, r3
 8013972:	43d9      	mvns	r1, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013978:	4313      	orrs	r3, r2
}
 801397a:	4618      	mov	r0, r3
 801397c:	3724      	adds	r7, #36	; 0x24
 801397e:	46bd      	mov	sp, r7
 8013980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013984:	4770      	bx	lr
	...

08013988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	3b01      	subs	r3, #1
 8013994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013998:	d301      	bcc.n	801399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801399a:	2301      	movs	r3, #1
 801399c:	e00f      	b.n	80139be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801399e:	4a0a      	ldr	r2, [pc, #40]	; (80139c8 <SysTick_Config+0x40>)
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	3b01      	subs	r3, #1
 80139a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80139a6:	210f      	movs	r1, #15
 80139a8:	f04f 30ff 	mov.w	r0, #4294967295
 80139ac:	f7ff ff8e 	bl	80138cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80139b0:	4b05      	ldr	r3, [pc, #20]	; (80139c8 <SysTick_Config+0x40>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80139b6:	4b04      	ldr	r3, [pc, #16]	; (80139c8 <SysTick_Config+0x40>)
 80139b8:	2207      	movs	r2, #7
 80139ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	e000e010 	.word	0xe000e010

080139cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff ff29 	bl	801382c <__NVIC_SetPriorityGrouping>
}
 80139da:	bf00      	nop
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}

080139e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b086      	sub	sp, #24
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	4603      	mov	r3, r0
 80139ea:	60b9      	str	r1, [r7, #8]
 80139ec:	607a      	str	r2, [r7, #4]
 80139ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80139f0:	2300      	movs	r3, #0
 80139f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80139f4:	f7ff ff3e 	bl	8013874 <__NVIC_GetPriorityGrouping>
 80139f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80139fa:	687a      	ldr	r2, [r7, #4]
 80139fc:	68b9      	ldr	r1, [r7, #8]
 80139fe:	6978      	ldr	r0, [r7, #20]
 8013a00:	f7ff ff8e 	bl	8013920 <NVIC_EncodePriority>
 8013a04:	4602      	mov	r2, r0
 8013a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7ff ff5d 	bl	80138cc <__NVIC_SetPriority>
}
 8013a12:	bf00      	nop
 8013a14:	3718      	adds	r7, #24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b082      	sub	sp, #8
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	4603      	mov	r3, r0
 8013a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff ff31 	bl	8013890 <__NVIC_EnableIRQ>
}
 8013a2e:	bf00      	nop
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b082      	sub	sp, #8
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff ffa2 	bl	8013988 <SysTick_Config>
 8013a44:	4603      	mov	r3, r0
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3708      	adds	r7, #8
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
	...

08013a50 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b086      	sub	sp, #24
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013a62:	4b2f      	ldr	r3, [pc, #188]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	d101      	bne.n	8013a6e <HAL_FLASH_Program+0x1e>
 8013a6a:	2302      	movs	r3, #2
 8013a6c:	e053      	b.n	8013b16 <HAL_FLASH_Program+0xc6>
 8013a6e:	4b2c      	ldr	r3, [pc, #176]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013a70:	2201      	movs	r2, #1
 8013a72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013a78:	f000 f888 	bl	8013b8c <FLASH_WaitForLastOperation>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8013a80:	7dfb      	ldrb	r3, [r7, #23]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d143      	bne.n	8013b0e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013a86:	4b26      	ldr	r3, [pc, #152]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8013a8c:	4b25      	ldr	r3, [pc, #148]	; (8013b24 <HAL_FLASH_Program+0xd4>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d009      	beq.n	8013aac <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8013a98:	4b22      	ldr	r3, [pc, #136]	; (8013b24 <HAL_FLASH_Program+0xd4>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	4a21      	ldr	r2, [pc, #132]	; (8013b24 <HAL_FLASH_Program+0xd4>)
 8013a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013aa2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8013aa4:	4b1e      	ldr	r3, [pc, #120]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013aa6:	2202      	movs	r2, #2
 8013aa8:	771a      	strb	r2, [r3, #28]
 8013aaa:	e002      	b.n	8013ab2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8013aac:	4b1c      	ldr	r3, [pc, #112]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d107      	bne.n	8013ac8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8013ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013abc:	68b8      	ldr	r0, [r7, #8]
 8013abe:	f000 f8bd 	bl	8013c3c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	613b      	str	r3, [r7, #16]
 8013ac6:	e010      	b.n	8013aea <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	d002      	beq.n	8013ad4 <HAL_FLASH_Program+0x84>
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d10a      	bne.n	8013aea <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	68b8      	ldr	r0, [r7, #8]
 8013ada:	f000 f8d5 	bl	8013c88 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d102      	bne.n	8013aea <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8013ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013ae8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013aea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013aee:	f000 f84d 	bl	8013b8c <FLASH_WaitForLastOperation>
 8013af2:	4603      	mov	r3, r0
 8013af4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d006      	beq.n	8013b0a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8013afc:	4b09      	ldr	r3, [pc, #36]	; (8013b24 <HAL_FLASH_Program+0xd4>)
 8013afe:	695a      	ldr	r2, [r3, #20]
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	43db      	mvns	r3, r3
 8013b04:	4907      	ldr	r1, [pc, #28]	; (8013b24 <HAL_FLASH_Program+0xd4>)
 8013b06:	4013      	ands	r3, r2
 8013b08:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8013b0a:	f000 f9cf 	bl	8013eac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013b0e:	4b04      	ldr	r3, [pc, #16]	; (8013b20 <HAL_FLASH_Program+0xd0>)
 8013b10:	2200      	movs	r2, #0
 8013b12:	701a      	strb	r2, [r3, #0]

  return status;
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3718      	adds	r7, #24
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	20000010 	.word	0x20000010
 8013b24:	40022000 	.word	0x40022000

08013b28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8013b32:	4b0b      	ldr	r3, [pc, #44]	; (8013b60 <HAL_FLASH_Unlock+0x38>)
 8013b34:	695b      	ldr	r3, [r3, #20]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	da0b      	bge.n	8013b52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013b3a:	4b09      	ldr	r3, [pc, #36]	; (8013b60 <HAL_FLASH_Unlock+0x38>)
 8013b3c:	4a09      	ldr	r2, [pc, #36]	; (8013b64 <HAL_FLASH_Unlock+0x3c>)
 8013b3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013b40:	4b07      	ldr	r3, [pc, #28]	; (8013b60 <HAL_FLASH_Unlock+0x38>)
 8013b42:	4a09      	ldr	r2, [pc, #36]	; (8013b68 <HAL_FLASH_Unlock+0x40>)
 8013b44:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8013b46:	4b06      	ldr	r3, [pc, #24]	; (8013b60 <HAL_FLASH_Unlock+0x38>)
 8013b48:	695b      	ldr	r3, [r3, #20]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	da01      	bge.n	8013b52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8013b52:	79fb      	ldrb	r3, [r7, #7]
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr
 8013b60:	40022000 	.word	0x40022000
 8013b64:	45670123 	.word	0x45670123
 8013b68:	cdef89ab 	.word	0xcdef89ab

08013b6c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8013b70:	4b05      	ldr	r3, [pc, #20]	; (8013b88 <HAL_FLASH_Lock+0x1c>)
 8013b72:	695b      	ldr	r3, [r3, #20]
 8013b74:	4a04      	ldr	r2, [pc, #16]	; (8013b88 <HAL_FLASH_Lock+0x1c>)
 8013b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013b7a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr
 8013b88:	40022000 	.word	0x40022000

08013b8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8013b94:	f7fe ff46 	bl	8012a24 <HAL_GetTick>
 8013b98:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8013b9a:	e00d      	b.n	8013bb8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba2:	d009      	beq.n	8013bb8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8013ba4:	f7fe ff3e 	bl	8012a24 <HAL_GetTick>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	1ad3      	subs	r3, r2, r3
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d801      	bhi.n	8013bb8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	e036      	b.n	8013c26 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8013bb8:	4b1d      	ldr	r3, [pc, #116]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013bba:	691b      	ldr	r3, [r3, #16]
 8013bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d1eb      	bne.n	8013b9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8013bc4:	4b1a      	ldr	r3, [pc, #104]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013bc6:	691a      	ldr	r2, [r3, #16]
 8013bc8:	4b1a      	ldr	r3, [pc, #104]	; (8013c34 <FLASH_WaitForLastOperation+0xa8>)
 8013bca:	4013      	ands	r3, r2
 8013bcc:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d01e      	beq.n	8013c12 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8013bd4:	4b18      	ldr	r3, [pc, #96]	; (8013c38 <FLASH_WaitForLastOperation+0xac>)
 8013bd6:	685a      	ldr	r2, [r3, #4]
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	4a16      	ldr	r2, [pc, #88]	; (8013c38 <FLASH_WaitForLastOperation+0xac>)
 8013bde:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d007      	beq.n	8013bfa <FLASH_WaitForLastOperation+0x6e>
 8013bea:	4b11      	ldr	r3, [pc, #68]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013bec:	699a      	ldr	r2, [r3, #24]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8013bf4:	490e      	ldr	r1, [pc, #56]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	618b      	str	r3, [r1, #24]
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d004      	beq.n	8013c0e <FLASH_WaitForLastOperation+0x82>
 8013c04:	4a0a      	ldr	r2, [pc, #40]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8013c0c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e009      	b.n	8013c26 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8013c12:	4b07      	ldr	r3, [pc, #28]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013c14:	691b      	ldr	r3, [r3, #16]
 8013c16:	f003 0301 	and.w	r3, r3, #1
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d002      	beq.n	8013c24 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013c1e:	4b04      	ldr	r3, [pc, #16]	; (8013c30 <FLASH_WaitForLastOperation+0xa4>)
 8013c20:	2201      	movs	r2, #1
 8013c22:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8013c24:	2300      	movs	r3, #0
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	40022000 	.word	0x40022000
 8013c34:	0002c3fa 	.word	0x0002c3fa
 8013c38:	20000010 	.word	0x20000010

08013c3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8013c48:	4b0e      	ldr	r3, [pc, #56]	; (8013c84 <FLASH_Program_DoubleWord+0x48>)
 8013c4a:	695b      	ldr	r3, [r3, #20]
 8013c4c:	4a0d      	ldr	r2, [pc, #52]	; (8013c84 <FLASH_Program_DoubleWord+0x48>)
 8013c4e:	f043 0301 	orr.w	r3, r3, #1
 8013c52:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8013c5a:	f3bf 8f6f 	isb	sy
}
 8013c5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8013c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013c64:	f04f 0200 	mov.w	r2, #0
 8013c68:	f04f 0300 	mov.w	r3, #0
 8013c6c:	000a      	movs	r2, r1
 8013c6e:	2300      	movs	r3, #0
 8013c70:	68f9      	ldr	r1, [r7, #12]
 8013c72:	3104      	adds	r1, #4
 8013c74:	4613      	mov	r3, r2
 8013c76:	600b      	str	r3, [r1, #0]
}
 8013c78:	bf00      	nop
 8013c7a:	3714      	adds	r7, #20
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	40022000 	.word	0x40022000

08013c88 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b089      	sub	sp, #36	; 0x24
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8013c92:	2340      	movs	r3, #64	; 0x40
 8013c94:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8013c9e:	4b14      	ldr	r3, [pc, #80]	; (8013cf0 <FLASH_Program_Fast+0x68>)
 8013ca0:	695b      	ldr	r3, [r3, #20]
 8013ca2:	4a13      	ldr	r2, [pc, #76]	; (8013cf0 <FLASH_Program_Fast+0x68>)
 8013ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013ca8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013caa:	f3ef 8310 	mrs	r3, PRIMASK
 8013cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cb0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8013cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cb4:	b672      	cpsid	i
}
 8013cb6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	3304      	adds	r3, #4
 8013cca:	617b      	str	r3, [r7, #20]
    row_index--;
 8013ccc:	7ffb      	ldrb	r3, [r7, #31]
 8013cce:	3b01      	subs	r3, #1
 8013cd0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8013cd2:	7ffb      	ldrb	r3, [r7, #31]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1ef      	bne.n	8013cb8 <FLASH_Program_Fast+0x30>
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	f383 8810 	msr	PRIMASK, r3
}
 8013ce2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8013ce4:	bf00      	nop
 8013ce6:	3724      	adds	r7, #36	; 0x24
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr
 8013cf0:	40022000 	.word	0x40022000

08013cf4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013cfe:	4b48      	ldr	r3, [pc, #288]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	d101      	bne.n	8013d0a <HAL_FLASHEx_Erase+0x16>
 8013d06:	2302      	movs	r3, #2
 8013d08:	e085      	b.n	8013e16 <HAL_FLASHEx_Erase+0x122>
 8013d0a:	4b45      	ldr	r3, [pc, #276]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013d10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013d14:	f7ff ff3a 	bl	8013b8c <FLASH_WaitForLastOperation>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8013d1c:	7bfb      	ldrb	r3, [r7, #15]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d175      	bne.n	8013e0e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013d22:	4b3f      	ldr	r3, [pc, #252]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d24:	2200      	movs	r2, #0
 8013d26:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8013d28:	4b3e      	ldr	r3, [pc, #248]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d013      	beq.n	8013d5c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8013d34:	4b3b      	ldr	r3, [pc, #236]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d009      	beq.n	8013d54 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8013d40:	4b38      	ldr	r3, [pc, #224]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	4a37      	ldr	r2, [pc, #220]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d4a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8013d4c:	4b34      	ldr	r3, [pc, #208]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d4e:	2203      	movs	r2, #3
 8013d50:	771a      	strb	r2, [r3, #28]
 8013d52:	e016      	b.n	8013d82 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8013d54:	4b32      	ldr	r3, [pc, #200]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d56:	2201      	movs	r2, #1
 8013d58:	771a      	strb	r2, [r3, #28]
 8013d5a:	e012      	b.n	8013d82 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8013d5c:	4b31      	ldr	r3, [pc, #196]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d009      	beq.n	8013d7c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8013d68:	4b2e      	ldr	r3, [pc, #184]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4a2d      	ldr	r2, [pc, #180]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d72:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8013d74:	4b2a      	ldr	r3, [pc, #168]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d76:	2202      	movs	r2, #2
 8013d78:	771a      	strb	r2, [r3, #28]
 8013d7a:	e002      	b.n	8013d82 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8013d7c:	4b28      	ldr	r3, [pc, #160]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013d7e:	2200      	movs	r2, #0
 8013d80:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d111      	bne.n	8013dae <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f000 f84a 	bl	8013e28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013d98:	f7ff fef8 	bl	8013b8c <FLASH_WaitForLastOperation>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8013da0:	4b20      	ldr	r3, [pc, #128]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013da2:	695b      	ldr	r3, [r3, #20]
 8013da4:	4a1f      	ldr	r2, [pc, #124]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013da6:	f023 0304 	bic.w	r3, r3, #4
 8013daa:	6153      	str	r3, [r2, #20]
 8013dac:	e02d      	b.n	8013e0a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	f04f 32ff 	mov.w	r2, #4294967295
 8013db4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	689b      	ldr	r3, [r3, #8]
 8013dba:	60bb      	str	r3, [r7, #8]
 8013dbc:	e01d      	b.n	8013dfa <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	68b8      	ldr	r0, [r7, #8]
 8013dc6:	f000 f84d 	bl	8013e64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013dca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013dce:	f7ff fedd 	bl	8013b8c <FLASH_WaitForLastOperation>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8013dd6:	4b13      	ldr	r3, [pc, #76]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013dd8:	695b      	ldr	r3, [r3, #20]
 8013dda:	4a12      	ldr	r2, [pc, #72]	; (8013e24 <HAL_FLASHEx_Erase+0x130>)
 8013ddc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8013de0:	f023 0302 	bic.w	r3, r3, #2
 8013de4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8013de6:	7bfb      	ldrb	r3, [r7, #15]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d003      	beq.n	8013df4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	68ba      	ldr	r2, [r7, #8]
 8013df0:	601a      	str	r2, [r3, #0]
          break;
 8013df2:	e00a      	b.n	8013e0a <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	3301      	adds	r3, #1
 8013df8:	60bb      	str	r3, [r7, #8]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	689a      	ldr	r2, [r3, #8]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	4413      	add	r3, r2
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d3d9      	bcc.n	8013dbe <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8013e0a:	f000 f84f 	bl	8013eac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013e0e:	4b04      	ldr	r3, [pc, #16]	; (8013e20 <HAL_FLASHEx_Erase+0x12c>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	701a      	strb	r2, [r3, #0]

  return status;
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20000010 	.word	0x20000010
 8013e24:	40022000 	.word	0x40022000

08013e28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f003 0301 	and.w	r3, r3, #1
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d005      	beq.n	8013e46 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8013e3a:	4b09      	ldr	r3, [pc, #36]	; (8013e60 <FLASH_MassErase+0x38>)
 8013e3c:	695b      	ldr	r3, [r3, #20]
 8013e3e:	4a08      	ldr	r2, [pc, #32]	; (8013e60 <FLASH_MassErase+0x38>)
 8013e40:	f043 0304 	orr.w	r3, r3, #4
 8013e44:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8013e46:	4b06      	ldr	r3, [pc, #24]	; (8013e60 <FLASH_MassErase+0x38>)
 8013e48:	695b      	ldr	r3, [r3, #20]
 8013e4a:	4a05      	ldr	r2, [pc, #20]	; (8013e60 <FLASH_MassErase+0x38>)
 8013e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e50:	6153      	str	r3, [r2, #20]
}
 8013e52:	bf00      	nop
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	40022000 	.word	0x40022000

08013e64 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8013e6e:	4b0e      	ldr	r3, [pc, #56]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e70:	695b      	ldr	r3, [r3, #20]
 8013e72:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	00db      	lsls	r3, r3, #3
 8013e7a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8013e7e:	490a      	ldr	r1, [pc, #40]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e80:	4313      	orrs	r3, r2
 8013e82:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8013e84:	4b08      	ldr	r3, [pc, #32]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e86:	695b      	ldr	r3, [r3, #20]
 8013e88:	4a07      	ldr	r2, [pc, #28]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e8a:	f043 0302 	orr.w	r3, r3, #2
 8013e8e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8013e90:	4b05      	ldr	r3, [pc, #20]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	4a04      	ldr	r2, [pc, #16]	; (8013ea8 <FLASH_PageErase+0x44>)
 8013e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e9a:	6153      	str	r3, [r2, #20]
}
 8013e9c:	bf00      	nop
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	40022000 	.word	0x40022000

08013eac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b083      	sub	sp, #12
 8013eb0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8013eb2:	4b21      	ldr	r3, [pc, #132]	; (8013f38 <FLASH_FlushCaches+0x8c>)
 8013eb4:	7f1b      	ldrb	r3, [r3, #28]
 8013eb6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8013eb8:	79fb      	ldrb	r3, [r7, #7]
 8013eba:	2b01      	cmp	r3, #1
 8013ebc:	d002      	beq.n	8013ec4 <FLASH_FlushCaches+0x18>
 8013ebe:	79fb      	ldrb	r3, [r7, #7]
 8013ec0:	2b03      	cmp	r3, #3
 8013ec2:	d117      	bne.n	8013ef4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8013ec4:	4b1d      	ldr	r3, [pc, #116]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4a1c      	ldr	r2, [pc, #112]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013eca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ece:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8013ed0:	4b1a      	ldr	r3, [pc, #104]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	4a19      	ldr	r2, [pc, #100]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013eda:	6013      	str	r3, [r2, #0]
 8013edc:	4b17      	ldr	r3, [pc, #92]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4a16      	ldr	r2, [pc, #88]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ee6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013ee8:	4b14      	ldr	r3, [pc, #80]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	4a13      	ldr	r2, [pc, #76]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013ef2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8013ef4:	79fb      	ldrb	r3, [r7, #7]
 8013ef6:	2b02      	cmp	r3, #2
 8013ef8:	d002      	beq.n	8013f00 <FLASH_FlushCaches+0x54>
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	d111      	bne.n	8013f24 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013f00:	4b0e      	ldr	r3, [pc, #56]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4a0d      	ldr	r2, [pc, #52]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013f0a:	6013      	str	r3, [r2, #0]
 8013f0c:	4b0b      	ldr	r3, [pc, #44]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	4a0a      	ldr	r2, [pc, #40]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8013f18:	4b08      	ldr	r3, [pc, #32]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a07      	ldr	r2, [pc, #28]	; (8013f3c <FLASH_FlushCaches+0x90>)
 8013f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013f22:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8013f24:	4b04      	ldr	r3, [pc, #16]	; (8013f38 <FLASH_FlushCaches+0x8c>)
 8013f26:	2200      	movs	r2, #0
 8013f28:	771a      	strb	r2, [r3, #28]
}
 8013f2a:	bf00      	nop
 8013f2c:	370c      	adds	r7, #12
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop
 8013f38:	20000010 	.word	0x20000010
 8013f3c:	40022000 	.word	0x40022000

08013f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b087      	sub	sp, #28
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013f4e:	e154      	b.n	80141fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	2101      	movs	r1, #1
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	fa01 f303 	lsl.w	r3, r1, r3
 8013f5c:	4013      	ands	r3, r2
 8013f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f000 8146 	beq.w	80141f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	f003 0303 	and.w	r3, r3, #3
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d005      	beq.n	8013f80 <HAL_GPIO_Init+0x40>
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	f003 0303 	and.w	r3, r3, #3
 8013f7c:	2b02      	cmp	r3, #2
 8013f7e:	d130      	bne.n	8013fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	2203      	movs	r2, #3
 8013f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f90:	43db      	mvns	r3, r3
 8013f92:	693a      	ldr	r2, [r7, #16]
 8013f94:	4013      	ands	r3, r2
 8013f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8013fa4:	693a      	ldr	r2, [r7, #16]
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	693a      	ldr	r2, [r7, #16]
 8013fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	fa02 f303 	lsl.w	r3, r2, r3
 8013fbe:	43db      	mvns	r3, r3
 8013fc0:	693a      	ldr	r2, [r7, #16]
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	091b      	lsrs	r3, r3, #4
 8013fcc:	f003 0201 	and.w	r2, r3, #1
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd6:	693a      	ldr	r2, [r7, #16]
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	693a      	ldr	r2, [r7, #16]
 8013fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	f003 0303 	and.w	r3, r3, #3
 8013fea:	2b03      	cmp	r3, #3
 8013fec:	d017      	beq.n	801401e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	005b      	lsls	r3, r3, #1
 8013ff8:	2203      	movs	r2, #3
 8013ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8013ffe:	43db      	mvns	r3, r3
 8014000:	693a      	ldr	r2, [r7, #16]
 8014002:	4013      	ands	r3, r2
 8014004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	689a      	ldr	r2, [r3, #8]
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	fa02 f303 	lsl.w	r3, r2, r3
 8014012:	693a      	ldr	r2, [r7, #16]
 8014014:	4313      	orrs	r3, r2
 8014016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	693a      	ldr	r2, [r7, #16]
 801401c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	f003 0303 	and.w	r3, r3, #3
 8014026:	2b02      	cmp	r3, #2
 8014028:	d123      	bne.n	8014072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	08da      	lsrs	r2, r3, #3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	3208      	adds	r2, #8
 8014032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	f003 0307 	and.w	r3, r3, #7
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	220f      	movs	r2, #15
 8014042:	fa02 f303 	lsl.w	r3, r2, r3
 8014046:	43db      	mvns	r3, r3
 8014048:	693a      	ldr	r2, [r7, #16]
 801404a:	4013      	ands	r3, r2
 801404c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	691a      	ldr	r2, [r3, #16]
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	f003 0307 	and.w	r3, r3, #7
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	fa02 f303 	lsl.w	r3, r2, r3
 801405e:	693a      	ldr	r2, [r7, #16]
 8014060:	4313      	orrs	r3, r2
 8014062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	08da      	lsrs	r2, r3, #3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	3208      	adds	r2, #8
 801406c:	6939      	ldr	r1, [r7, #16]
 801406e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	2203      	movs	r2, #3
 801407e:	fa02 f303 	lsl.w	r3, r2, r3
 8014082:	43db      	mvns	r3, r3
 8014084:	693a      	ldr	r2, [r7, #16]
 8014086:	4013      	ands	r3, r2
 8014088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	f003 0203 	and.w	r2, r3, #3
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	005b      	lsls	r3, r3, #1
 8014096:	fa02 f303 	lsl.w	r3, r2, r3
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	4313      	orrs	r3, r2
 801409e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	693a      	ldr	r2, [r7, #16]
 80140a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	f000 80a0 	beq.w	80141f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80140b4:	4b58      	ldr	r3, [pc, #352]	; (8014218 <HAL_GPIO_Init+0x2d8>)
 80140b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140b8:	4a57      	ldr	r2, [pc, #348]	; (8014218 <HAL_GPIO_Init+0x2d8>)
 80140ba:	f043 0301 	orr.w	r3, r3, #1
 80140be:	6613      	str	r3, [r2, #96]	; 0x60
 80140c0:	4b55      	ldr	r3, [pc, #340]	; (8014218 <HAL_GPIO_Init+0x2d8>)
 80140c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140c4:	f003 0301 	and.w	r3, r3, #1
 80140c8:	60bb      	str	r3, [r7, #8]
 80140ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80140cc:	4a53      	ldr	r2, [pc, #332]	; (801421c <HAL_GPIO_Init+0x2dc>)
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	089b      	lsrs	r3, r3, #2
 80140d2:	3302      	adds	r3, #2
 80140d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	f003 0303 	and.w	r3, r3, #3
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	220f      	movs	r2, #15
 80140e4:	fa02 f303 	lsl.w	r3, r2, r3
 80140e8:	43db      	mvns	r3, r3
 80140ea:	693a      	ldr	r2, [r7, #16]
 80140ec:	4013      	ands	r3, r2
 80140ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80140f6:	d019      	beq.n	801412c <HAL_GPIO_Init+0x1ec>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	4a49      	ldr	r2, [pc, #292]	; (8014220 <HAL_GPIO_Init+0x2e0>)
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d013      	beq.n	8014128 <HAL_GPIO_Init+0x1e8>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	4a48      	ldr	r2, [pc, #288]	; (8014224 <HAL_GPIO_Init+0x2e4>)
 8014104:	4293      	cmp	r3, r2
 8014106:	d00d      	beq.n	8014124 <HAL_GPIO_Init+0x1e4>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	4a47      	ldr	r2, [pc, #284]	; (8014228 <HAL_GPIO_Init+0x2e8>)
 801410c:	4293      	cmp	r3, r2
 801410e:	d007      	beq.n	8014120 <HAL_GPIO_Init+0x1e0>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	4a46      	ldr	r2, [pc, #280]	; (801422c <HAL_GPIO_Init+0x2ec>)
 8014114:	4293      	cmp	r3, r2
 8014116:	d101      	bne.n	801411c <HAL_GPIO_Init+0x1dc>
 8014118:	2304      	movs	r3, #4
 801411a:	e008      	b.n	801412e <HAL_GPIO_Init+0x1ee>
 801411c:	2307      	movs	r3, #7
 801411e:	e006      	b.n	801412e <HAL_GPIO_Init+0x1ee>
 8014120:	2303      	movs	r3, #3
 8014122:	e004      	b.n	801412e <HAL_GPIO_Init+0x1ee>
 8014124:	2302      	movs	r3, #2
 8014126:	e002      	b.n	801412e <HAL_GPIO_Init+0x1ee>
 8014128:	2301      	movs	r3, #1
 801412a:	e000      	b.n	801412e <HAL_GPIO_Init+0x1ee>
 801412c:	2300      	movs	r3, #0
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	f002 0203 	and.w	r2, r2, #3
 8014134:	0092      	lsls	r2, r2, #2
 8014136:	4093      	lsls	r3, r2
 8014138:	693a      	ldr	r2, [r7, #16]
 801413a:	4313      	orrs	r3, r2
 801413c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801413e:	4937      	ldr	r1, [pc, #220]	; (801421c <HAL_GPIO_Init+0x2dc>)
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	089b      	lsrs	r3, r3, #2
 8014144:	3302      	adds	r3, #2
 8014146:	693a      	ldr	r2, [r7, #16]
 8014148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801414c:	4b38      	ldr	r3, [pc, #224]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	43db      	mvns	r3, r3
 8014156:	693a      	ldr	r2, [r7, #16]
 8014158:	4013      	ands	r3, r2
 801415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	685b      	ldr	r3, [r3, #4]
 8014160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014164:	2b00      	cmp	r3, #0
 8014166:	d003      	beq.n	8014170 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8014168:	693a      	ldr	r2, [r7, #16]
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	4313      	orrs	r3, r2
 801416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8014170:	4a2f      	ldr	r2, [pc, #188]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8014176:	4b2e      	ldr	r3, [pc, #184]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	43db      	mvns	r3, r3
 8014180:	693a      	ldr	r2, [r7, #16]
 8014182:	4013      	ands	r3, r2
 8014184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801418e:	2b00      	cmp	r3, #0
 8014190:	d003      	beq.n	801419a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8014192:	693a      	ldr	r2, [r7, #16]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	4313      	orrs	r3, r2
 8014198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801419a:	4a25      	ldr	r2, [pc, #148]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80141a0:	4b23      	ldr	r3, [pc, #140]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	43db      	mvns	r3, r3
 80141aa:	693a      	ldr	r2, [r7, #16]
 80141ac:	4013      	ands	r3, r2
 80141ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d003      	beq.n	80141c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80141bc:	693a      	ldr	r2, [r7, #16]
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	4313      	orrs	r3, r2
 80141c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80141c4:	4a1a      	ldr	r2, [pc, #104]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 80141c6:	693b      	ldr	r3, [r7, #16]
 80141c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80141ca:	4b19      	ldr	r3, [pc, #100]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	43db      	mvns	r3, r3
 80141d4:	693a      	ldr	r2, [r7, #16]
 80141d6:	4013      	ands	r3, r2
 80141d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d003      	beq.n	80141ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80141ee:	4a10      	ldr	r2, [pc, #64]	; (8014230 <HAL_GPIO_Init+0x2f0>)
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	3301      	adds	r3, #1
 80141f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	fa22 f303 	lsr.w	r3, r2, r3
 8014204:	2b00      	cmp	r3, #0
 8014206:	f47f aea3 	bne.w	8013f50 <HAL_GPIO_Init+0x10>
  }
}
 801420a:	bf00      	nop
 801420c:	bf00      	nop
 801420e:	371c      	adds	r7, #28
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr
 8014218:	40021000 	.word	0x40021000
 801421c:	40010000 	.word	0x40010000
 8014220:	48000400 	.word	0x48000400
 8014224:	48000800 	.word	0x48000800
 8014228:	48000c00 	.word	0x48000c00
 801422c:	48001000 	.word	0x48001000
 8014230:	40010400 	.word	0x40010400

08014234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014234:	b480      	push	{r7}
 8014236:	b083      	sub	sp, #12
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	460b      	mov	r3, r1
 801423e:	807b      	strh	r3, [r7, #2]
 8014240:	4613      	mov	r3, r2
 8014242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014244:	787b      	ldrb	r3, [r7, #1]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d003      	beq.n	8014252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801424a:	887a      	ldrh	r2, [r7, #2]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8014250:	e002      	b.n	8014258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8014252:	887a      	ldrh	r2, [r7, #2]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	4603      	mov	r3, r0
 801426c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801426e:	4b08      	ldr	r3, [pc, #32]	; (8014290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014270:	695a      	ldr	r2, [r3, #20]
 8014272:	88fb      	ldrh	r3, [r7, #6]
 8014274:	4013      	ands	r3, r2
 8014276:	2b00      	cmp	r3, #0
 8014278:	d006      	beq.n	8014288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801427a:	4a05      	ldr	r2, [pc, #20]	; (8014290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801427c:	88fb      	ldrh	r3, [r7, #6]
 801427e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014280:	88fb      	ldrh	r3, [r7, #6]
 8014282:	4618      	mov	r0, r3
 8014284:	f000 f806 	bl	8014294 <HAL_GPIO_EXTI_Callback>
  }
}
 8014288:	bf00      	nop
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	40010400 	.word	0x40010400

08014294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	4603      	mov	r3, r0
 801429c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801429e:	bf00      	nop
 80142a0:	370c      	adds	r7, #12
 80142a2:	46bd      	mov	sp, r7
 80142a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a8:	4770      	bx	lr

080142aa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80142aa:	b580      	push	{r7, lr}
 80142ac:	b084      	sub	sp, #16
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d101      	bne.n	80142bc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80142b8:	2301      	movs	r3, #1
 80142ba:	e041      	b.n	8014340 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80142c4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f245 5255 	movw	r2, #21845	; 0x5555
 80142ce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	6852      	ldr	r2, [r2, #4]
 80142d8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	687a      	ldr	r2, [r7, #4]
 80142e0:	6892      	ldr	r2, [r2, #8]
 80142e2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80142e4:	f7fe fb9e 	bl	8012a24 <HAL_GetTick>
 80142e8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80142ea:	e00f      	b.n	801430c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80142ec:	f7fe fb9a 	bl	8012a24 <HAL_GetTick>
 80142f0:	4602      	mov	r2, r0
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	2b31      	cmp	r3, #49	; 0x31
 80142f8:	d908      	bls.n	801430c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	f003 0307 	and.w	r3, r3, #7
 8014304:	2b00      	cmp	r3, #0
 8014306:	d001      	beq.n	801430c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8014308:	2303      	movs	r3, #3
 801430a:	e019      	b.n	8014340 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	68db      	ldr	r3, [r3, #12]
 8014312:	f003 0307 	and.w	r3, r3, #7
 8014316:	2b00      	cmp	r3, #0
 8014318:	d1e8      	bne.n	80142ec <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	691a      	ldr	r2, [r3, #16]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	429a      	cmp	r2, r3
 8014326:	d005      	beq.n	8014334 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	68d2      	ldr	r2, [r2, #12]
 8014330:	611a      	str	r2, [r3, #16]
 8014332:	e004      	b.n	801433e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801433c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801433e:	2300      	movs	r3, #0
}
 8014340:	4618      	mov	r0, r3
 8014342:	3710      	adds	r7, #16
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014358:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801435a:	2300      	movs	r3, #0
}
 801435c:	4618      	mov	r0, r3
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014368:	b480      	push	{r7}
 801436a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801436c:	4b05      	ldr	r3, [pc, #20]	; (8014384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4a04      	ldr	r2, [pc, #16]	; (8014384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8014372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014376:	6013      	str	r3, [r2, #0]
}
 8014378:	bf00      	nop
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop
 8014384:	40007000 	.word	0x40007000

08014388 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8014388:	b480      	push	{r7}
 801438a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 801438c:	4b05      	ldr	r3, [pc, #20]	; (80143a4 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801438e:	691b      	ldr	r3, [r3, #16]
 8014390:	4a04      	ldr	r2, [pc, #16]	; (80143a4 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8014392:	f023 0302 	bic.w	r3, r3, #2
 8014396:	6113      	str	r3, [r2, #16]
}
 8014398:	bf00      	nop
 801439a:	46bd      	mov	sp, r7
 801439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop
 80143a4:	e000ed00 	.word	0xe000ed00

080143a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80143a8:	b480      	push	{r7}
 80143aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80143ac:	4b04      	ldr	r3, [pc, #16]	; (80143c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	40007000 	.word	0x40007000

080143c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143d2:	d130      	bne.n	8014436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80143d4:	4b23      	ldr	r3, [pc, #140]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80143dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143e0:	d038      	beq.n	8014454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80143e2:	4b20      	ldr	r3, [pc, #128]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80143ea:	4a1e      	ldr	r2, [pc, #120]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80143ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80143f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80143f2:	4b1d      	ldr	r3, [pc, #116]	; (8014468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2232      	movs	r2, #50	; 0x32
 80143f8:	fb02 f303 	mul.w	r3, r2, r3
 80143fc:	4a1b      	ldr	r2, [pc, #108]	; (801446c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80143fe:	fba2 2303 	umull	r2, r3, r2, r3
 8014402:	0c9b      	lsrs	r3, r3, #18
 8014404:	3301      	adds	r3, #1
 8014406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014408:	e002      	b.n	8014410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	3b01      	subs	r3, #1
 801440e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014410:	4b14      	ldr	r3, [pc, #80]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014412:	695b      	ldr	r3, [r3, #20]
 8014414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801441c:	d102      	bne.n	8014424 <HAL_PWREx_ControlVoltageScaling+0x60>
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d1f2      	bne.n	801440a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8014424:	4b0f      	ldr	r3, [pc, #60]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014426:	695b      	ldr	r3, [r3, #20]
 8014428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014430:	d110      	bne.n	8014454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8014432:	2303      	movs	r3, #3
 8014434:	e00f      	b.n	8014456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8014436:	4b0b      	ldr	r3, [pc, #44]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014442:	d007      	beq.n	8014454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8014444:	4b07      	ldr	r3, [pc, #28]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801444c:	4a05      	ldr	r2, [pc, #20]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801444e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3714      	adds	r7, #20
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	40007000 	.word	0x40007000
 8014468:	20000004 	.word	0x20000004
 801446c:	431bde83 	.word	0x431bde83

08014470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b088      	sub	sp, #32
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d102      	bne.n	8014484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801447e:	2301      	movs	r3, #1
 8014480:	f000 bc02 	b.w	8014c88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014484:	4b96      	ldr	r3, [pc, #600]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	f003 030c 	and.w	r3, r3, #12
 801448c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801448e:	4b94      	ldr	r3, [pc, #592]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	f003 0303 	and.w	r3, r3, #3
 8014496:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f003 0310 	and.w	r3, r3, #16
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f000 80e4 	beq.w	801466e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d007      	beq.n	80144bc <HAL_RCC_OscConfig+0x4c>
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	2b0c      	cmp	r3, #12
 80144b0:	f040 808b 	bne.w	80145ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	f040 8087 	bne.w	80145ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80144bc:	4b88      	ldr	r3, [pc, #544]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f003 0302 	and.w	r3, r3, #2
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d005      	beq.n	80144d4 <HAL_RCC_OscConfig+0x64>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d101      	bne.n	80144d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80144d0:	2301      	movs	r3, #1
 80144d2:	e3d9      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6a1a      	ldr	r2, [r3, #32]
 80144d8:	4b81      	ldr	r3, [pc, #516]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f003 0308 	and.w	r3, r3, #8
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d004      	beq.n	80144ee <HAL_RCC_OscConfig+0x7e>
 80144e4:	4b7e      	ldr	r3, [pc, #504]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144ec:	e005      	b.n	80144fa <HAL_RCC_OscConfig+0x8a>
 80144ee:	4b7c      	ldr	r3, [pc, #496]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80144f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80144f4:	091b      	lsrs	r3, r3, #4
 80144f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d223      	bcs.n	8014546 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	6a1b      	ldr	r3, [r3, #32]
 8014502:	4618      	mov	r0, r3
 8014504:	f000 fd8a 	bl	801501c <RCC_SetFlashLatencyFromMSIRange>
 8014508:	4603      	mov	r3, r0
 801450a:	2b00      	cmp	r3, #0
 801450c:	d001      	beq.n	8014512 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 801450e:	2301      	movs	r3, #1
 8014510:	e3ba      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014512:	4b73      	ldr	r3, [pc, #460]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4a72      	ldr	r2, [pc, #456]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014518:	f043 0308 	orr.w	r3, r3, #8
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	4b70      	ldr	r3, [pc, #448]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6a1b      	ldr	r3, [r3, #32]
 801452a:	496d      	ldr	r1, [pc, #436]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801452c:	4313      	orrs	r3, r2
 801452e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014530:	4b6b      	ldr	r3, [pc, #428]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	69db      	ldr	r3, [r3, #28]
 801453c:	021b      	lsls	r3, r3, #8
 801453e:	4968      	ldr	r1, [pc, #416]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014540:	4313      	orrs	r3, r2
 8014542:	604b      	str	r3, [r1, #4]
 8014544:	e025      	b.n	8014592 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014546:	4b66      	ldr	r3, [pc, #408]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4a65      	ldr	r2, [pc, #404]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801454c:	f043 0308 	orr.w	r3, r3, #8
 8014550:	6013      	str	r3, [r2, #0]
 8014552:	4b63      	ldr	r3, [pc, #396]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6a1b      	ldr	r3, [r3, #32]
 801455e:	4960      	ldr	r1, [pc, #384]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014560:	4313      	orrs	r3, r2
 8014562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014564:	4b5e      	ldr	r3, [pc, #376]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	69db      	ldr	r3, [r3, #28]
 8014570:	021b      	lsls	r3, r3, #8
 8014572:	495b      	ldr	r1, [pc, #364]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014574:	4313      	orrs	r3, r2
 8014576:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d109      	bne.n	8014592 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	4618      	mov	r0, r3
 8014584:	f000 fd4a 	bl	801501c <RCC_SetFlashLatencyFromMSIRange>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 801458e:	2301      	movs	r3, #1
 8014590:	e37a      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014592:	f000 fc81 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 8014596:	4602      	mov	r2, r0
 8014598:	4b51      	ldr	r3, [pc, #324]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801459a:	689b      	ldr	r3, [r3, #8]
 801459c:	091b      	lsrs	r3, r3, #4
 801459e:	f003 030f 	and.w	r3, r3, #15
 80145a2:	4950      	ldr	r1, [pc, #320]	; (80146e4 <HAL_RCC_OscConfig+0x274>)
 80145a4:	5ccb      	ldrb	r3, [r1, r3]
 80145a6:	f003 031f 	and.w	r3, r3, #31
 80145aa:	fa22 f303 	lsr.w	r3, r2, r3
 80145ae:	4a4e      	ldr	r2, [pc, #312]	; (80146e8 <HAL_RCC_OscConfig+0x278>)
 80145b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80145b2:	4b4e      	ldr	r3, [pc, #312]	; (80146ec <HAL_RCC_OscConfig+0x27c>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fe f9e4 	bl	8012984 <HAL_InitTick>
 80145bc:	4603      	mov	r3, r0
 80145be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80145c0:	7bfb      	ldrb	r3, [r7, #15]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d052      	beq.n	801466c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80145c6:	7bfb      	ldrb	r3, [r7, #15]
 80145c8:	e35e      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	699b      	ldr	r3, [r3, #24]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d032      	beq.n	8014638 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80145d2:	4b43      	ldr	r3, [pc, #268]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	4a42      	ldr	r2, [pc, #264]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80145d8:	f043 0301 	orr.w	r3, r3, #1
 80145dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80145de:	f7fe fa21 	bl	8012a24 <HAL_GetTick>
 80145e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80145e4:	e008      	b.n	80145f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80145e6:	f7fe fa1d 	bl	8012a24 <HAL_GetTick>
 80145ea:	4602      	mov	r2, r0
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d901      	bls.n	80145f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80145f4:	2303      	movs	r3, #3
 80145f6:	e347      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80145f8:	4b39      	ldr	r3, [pc, #228]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f003 0302 	and.w	r3, r3, #2
 8014600:	2b00      	cmp	r3, #0
 8014602:	d0f0      	beq.n	80145e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014604:	4b36      	ldr	r3, [pc, #216]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	4a35      	ldr	r2, [pc, #212]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801460a:	f043 0308 	orr.w	r3, r3, #8
 801460e:	6013      	str	r3, [r2, #0]
 8014610:	4b33      	ldr	r3, [pc, #204]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6a1b      	ldr	r3, [r3, #32]
 801461c:	4930      	ldr	r1, [pc, #192]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801461e:	4313      	orrs	r3, r2
 8014620:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014622:	4b2f      	ldr	r3, [pc, #188]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	69db      	ldr	r3, [r3, #28]
 801462e:	021b      	lsls	r3, r3, #8
 8014630:	492b      	ldr	r1, [pc, #172]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014632:	4313      	orrs	r3, r2
 8014634:	604b      	str	r3, [r1, #4]
 8014636:	e01a      	b.n	801466e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014638:	4b29      	ldr	r3, [pc, #164]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4a28      	ldr	r2, [pc, #160]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801463e:	f023 0301 	bic.w	r3, r3, #1
 8014642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014644:	f7fe f9ee 	bl	8012a24 <HAL_GetTick>
 8014648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801464a:	e008      	b.n	801465e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801464c:	f7fe f9ea 	bl	8012a24 <HAL_GetTick>
 8014650:	4602      	mov	r2, r0
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	2b02      	cmp	r3, #2
 8014658:	d901      	bls.n	801465e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 801465a:	2303      	movs	r3, #3
 801465c:	e314      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801465e:	4b20      	ldr	r3, [pc, #128]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f003 0302 	and.w	r3, r3, #2
 8014666:	2b00      	cmp	r3, #0
 8014668:	d1f0      	bne.n	801464c <HAL_RCC_OscConfig+0x1dc>
 801466a:	e000      	b.n	801466e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801466c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f003 0301 	and.w	r3, r3, #1
 8014676:	2b00      	cmp	r3, #0
 8014678:	d073      	beq.n	8014762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	2b08      	cmp	r3, #8
 801467e:	d005      	beq.n	801468c <HAL_RCC_OscConfig+0x21c>
 8014680:	69bb      	ldr	r3, [r7, #24]
 8014682:	2b0c      	cmp	r3, #12
 8014684:	d10e      	bne.n	80146a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	2b03      	cmp	r3, #3
 801468a:	d10b      	bne.n	80146a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801468c:	4b14      	ldr	r3, [pc, #80]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014694:	2b00      	cmp	r3, #0
 8014696:	d063      	beq.n	8014760 <HAL_RCC_OscConfig+0x2f0>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d15f      	bne.n	8014760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80146a0:	2301      	movs	r3, #1
 80146a2:	e2f1      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146ac:	d106      	bne.n	80146bc <HAL_RCC_OscConfig+0x24c>
 80146ae:	4b0c      	ldr	r3, [pc, #48]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4a0b      	ldr	r2, [pc, #44]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	e025      	b.n	8014708 <HAL_RCC_OscConfig+0x298>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80146c4:	d114      	bne.n	80146f0 <HAL_RCC_OscConfig+0x280>
 80146c6:	4b06      	ldr	r3, [pc, #24]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a05      	ldr	r2, [pc, #20]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80146d0:	6013      	str	r3, [r2, #0]
 80146d2:	4b03      	ldr	r3, [pc, #12]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	4a02      	ldr	r2, [pc, #8]	; (80146e0 <HAL_RCC_OscConfig+0x270>)
 80146d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80146dc:	6013      	str	r3, [r2, #0]
 80146de:	e013      	b.n	8014708 <HAL_RCC_OscConfig+0x298>
 80146e0:	40021000 	.word	0x40021000
 80146e4:	08018c48 	.word	0x08018c48
 80146e8:	20000004 	.word	0x20000004
 80146ec:	20000008 	.word	0x20000008
 80146f0:	4ba0      	ldr	r3, [pc, #640]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4a9f      	ldr	r2, [pc, #636]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80146f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80146fa:	6013      	str	r3, [r2, #0]
 80146fc:	4b9d      	ldr	r3, [pc, #628]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4a9c      	ldr	r2, [pc, #624]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	685b      	ldr	r3, [r3, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d013      	beq.n	8014738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014710:	f7fe f988 	bl	8012a24 <HAL_GetTick>
 8014714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014716:	e008      	b.n	801472a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014718:	f7fe f984 	bl	8012a24 <HAL_GetTick>
 801471c:	4602      	mov	r2, r0
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	1ad3      	subs	r3, r2, r3
 8014722:	2b64      	cmp	r3, #100	; 0x64
 8014724:	d901      	bls.n	801472a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8014726:	2303      	movs	r3, #3
 8014728:	e2ae      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801472a:	4b92      	ldr	r3, [pc, #584]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014732:	2b00      	cmp	r3, #0
 8014734:	d0f0      	beq.n	8014718 <HAL_RCC_OscConfig+0x2a8>
 8014736:	e014      	b.n	8014762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014738:	f7fe f974 	bl	8012a24 <HAL_GetTick>
 801473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801473e:	e008      	b.n	8014752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014740:	f7fe f970 	bl	8012a24 <HAL_GetTick>
 8014744:	4602      	mov	r2, r0
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	2b64      	cmp	r3, #100	; 0x64
 801474c:	d901      	bls.n	8014752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801474e:	2303      	movs	r3, #3
 8014750:	e29a      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014752:	4b88      	ldr	r3, [pc, #544]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801475a:	2b00      	cmp	r3, #0
 801475c:	d1f0      	bne.n	8014740 <HAL_RCC_OscConfig+0x2d0>
 801475e:	e000      	b.n	8014762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	f003 0302 	and.w	r3, r3, #2
 801476a:	2b00      	cmp	r3, #0
 801476c:	d060      	beq.n	8014830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801476e:	69bb      	ldr	r3, [r7, #24]
 8014770:	2b04      	cmp	r3, #4
 8014772:	d005      	beq.n	8014780 <HAL_RCC_OscConfig+0x310>
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	2b0c      	cmp	r3, #12
 8014778:	d119      	bne.n	80147ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	2b02      	cmp	r3, #2
 801477e:	d116      	bne.n	80147ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014780:	4b7c      	ldr	r3, [pc, #496]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014788:	2b00      	cmp	r3, #0
 801478a:	d005      	beq.n	8014798 <HAL_RCC_OscConfig+0x328>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d101      	bne.n	8014798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8014794:	2301      	movs	r3, #1
 8014796:	e277      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014798:	4b76      	ldr	r3, [pc, #472]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 801479a:	685b      	ldr	r3, [r3, #4]
 801479c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	061b      	lsls	r3, r3, #24
 80147a6:	4973      	ldr	r1, [pc, #460]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147a8:	4313      	orrs	r3, r2
 80147aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80147ac:	e040      	b.n	8014830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	68db      	ldr	r3, [r3, #12]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d023      	beq.n	80147fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80147b6:	4b6f      	ldr	r3, [pc, #444]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4a6e      	ldr	r2, [pc, #440]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80147c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147c2:	f7fe f92f 	bl	8012a24 <HAL_GetTick>
 80147c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80147c8:	e008      	b.n	80147dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80147ca:	f7fe f92b 	bl	8012a24 <HAL_GetTick>
 80147ce:	4602      	mov	r2, r0
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	d901      	bls.n	80147dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80147d8:	2303      	movs	r3, #3
 80147da:	e255      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80147dc:	4b65      	ldr	r3, [pc, #404]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d0f0      	beq.n	80147ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147e8:	4b62      	ldr	r3, [pc, #392]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	691b      	ldr	r3, [r3, #16]
 80147f4:	061b      	lsls	r3, r3, #24
 80147f6:	495f      	ldr	r1, [pc, #380]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80147f8:	4313      	orrs	r3, r2
 80147fa:	604b      	str	r3, [r1, #4]
 80147fc:	e018      	b.n	8014830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80147fe:	4b5d      	ldr	r3, [pc, #372]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	4a5c      	ldr	r2, [pc, #368]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801480a:	f7fe f90b 	bl	8012a24 <HAL_GetTick>
 801480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014810:	e008      	b.n	8014824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014812:	f7fe f907 	bl	8012a24 <HAL_GetTick>
 8014816:	4602      	mov	r2, r0
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	2b02      	cmp	r3, #2
 801481e:	d901      	bls.n	8014824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8014820:	2303      	movs	r3, #3
 8014822:	e231      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014824:	4b53      	ldr	r3, [pc, #332]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801482c:	2b00      	cmp	r3, #0
 801482e:	d1f0      	bne.n	8014812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	f003 0308 	and.w	r3, r3, #8
 8014838:	2b00      	cmp	r3, #0
 801483a:	d03c      	beq.n	80148b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	695b      	ldr	r3, [r3, #20]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d01c      	beq.n	801487e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014844:	4b4b      	ldr	r3, [pc, #300]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801484a:	4a4a      	ldr	r2, [pc, #296]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 801484c:	f043 0301 	orr.w	r3, r3, #1
 8014850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014854:	f7fe f8e6 	bl	8012a24 <HAL_GetTick>
 8014858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801485a:	e008      	b.n	801486e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801485c:	f7fe f8e2 	bl	8012a24 <HAL_GetTick>
 8014860:	4602      	mov	r2, r0
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	1ad3      	subs	r3, r2, r3
 8014866:	2b02      	cmp	r3, #2
 8014868:	d901      	bls.n	801486e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801486a:	2303      	movs	r3, #3
 801486c:	e20c      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801486e:	4b41      	ldr	r3, [pc, #260]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014874:	f003 0302 	and.w	r3, r3, #2
 8014878:	2b00      	cmp	r3, #0
 801487a:	d0ef      	beq.n	801485c <HAL_RCC_OscConfig+0x3ec>
 801487c:	e01b      	b.n	80148b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801487e:	4b3d      	ldr	r3, [pc, #244]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014884:	4a3b      	ldr	r2, [pc, #236]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014886:	f023 0301 	bic.w	r3, r3, #1
 801488a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801488e:	f7fe f8c9 	bl	8012a24 <HAL_GetTick>
 8014892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014894:	e008      	b.n	80148a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014896:	f7fe f8c5 	bl	8012a24 <HAL_GetTick>
 801489a:	4602      	mov	r2, r0
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	1ad3      	subs	r3, r2, r3
 80148a0:	2b02      	cmp	r3, #2
 80148a2:	d901      	bls.n	80148a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80148a4:	2303      	movs	r3, #3
 80148a6:	e1ef      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80148a8:	4b32      	ldr	r3, [pc, #200]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80148aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80148ae:	f003 0302 	and.w	r3, r3, #2
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d1ef      	bne.n	8014896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	f003 0304 	and.w	r3, r3, #4
 80148be:	2b00      	cmp	r3, #0
 80148c0:	f000 80a6 	beq.w	8014a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80148c4:	2300      	movs	r3, #0
 80148c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80148c8:	4b2a      	ldr	r3, [pc, #168]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80148ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d10d      	bne.n	80148f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80148d4:	4b27      	ldr	r3, [pc, #156]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80148d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148d8:	4a26      	ldr	r2, [pc, #152]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80148da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148de:	6593      	str	r3, [r2, #88]	; 0x58
 80148e0:	4b24      	ldr	r3, [pc, #144]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 80148e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148e8:	60bb      	str	r3, [r7, #8]
 80148ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80148ec:	2301      	movs	r3, #1
 80148ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80148f0:	4b21      	ldr	r3, [pc, #132]	; (8014978 <HAL_RCC_OscConfig+0x508>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d118      	bne.n	801492e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80148fc:	4b1e      	ldr	r3, [pc, #120]	; (8014978 <HAL_RCC_OscConfig+0x508>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4a1d      	ldr	r2, [pc, #116]	; (8014978 <HAL_RCC_OscConfig+0x508>)
 8014902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014908:	f7fe f88c 	bl	8012a24 <HAL_GetTick>
 801490c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801490e:	e008      	b.n	8014922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014910:	f7fe f888 	bl	8012a24 <HAL_GetTick>
 8014914:	4602      	mov	r2, r0
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	1ad3      	subs	r3, r2, r3
 801491a:	2b02      	cmp	r3, #2
 801491c:	d901      	bls.n	8014922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801491e:	2303      	movs	r3, #3
 8014920:	e1b2      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014922:	4b15      	ldr	r3, [pc, #84]	; (8014978 <HAL_RCC_OscConfig+0x508>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801492a:	2b00      	cmp	r3, #0
 801492c:	d0f0      	beq.n	8014910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	2b01      	cmp	r3, #1
 8014934:	d108      	bne.n	8014948 <HAL_RCC_OscConfig+0x4d8>
 8014936:	4b0f      	ldr	r3, [pc, #60]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801493c:	4a0d      	ldr	r2, [pc, #52]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 801493e:	f043 0301 	orr.w	r3, r3, #1
 8014942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014946:	e029      	b.n	801499c <HAL_RCC_OscConfig+0x52c>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	689b      	ldr	r3, [r3, #8]
 801494c:	2b05      	cmp	r3, #5
 801494e:	d115      	bne.n	801497c <HAL_RCC_OscConfig+0x50c>
 8014950:	4b08      	ldr	r3, [pc, #32]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014956:	4a07      	ldr	r2, [pc, #28]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014958:	f043 0304 	orr.w	r3, r3, #4
 801495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014960:	4b04      	ldr	r3, [pc, #16]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014966:	4a03      	ldr	r2, [pc, #12]	; (8014974 <HAL_RCC_OscConfig+0x504>)
 8014968:	f043 0301 	orr.w	r3, r3, #1
 801496c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014970:	e014      	b.n	801499c <HAL_RCC_OscConfig+0x52c>
 8014972:	bf00      	nop
 8014974:	40021000 	.word	0x40021000
 8014978:	40007000 	.word	0x40007000
 801497c:	4b9a      	ldr	r3, [pc, #616]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 801497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014982:	4a99      	ldr	r2, [pc, #612]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014984:	f023 0301 	bic.w	r3, r3, #1
 8014988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801498c:	4b96      	ldr	r3, [pc, #600]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 801498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014992:	4a95      	ldr	r2, [pc, #596]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014994:	f023 0304 	bic.w	r3, r3, #4
 8014998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	689b      	ldr	r3, [r3, #8]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d016      	beq.n	80149d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80149a4:	f7fe f83e 	bl	8012a24 <HAL_GetTick>
 80149a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80149aa:	e00a      	b.n	80149c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80149ac:	f7fe f83a 	bl	8012a24 <HAL_GetTick>
 80149b0:	4602      	mov	r2, r0
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	1ad3      	subs	r3, r2, r3
 80149b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80149ba:	4293      	cmp	r3, r2
 80149bc:	d901      	bls.n	80149c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80149be:	2303      	movs	r3, #3
 80149c0:	e162      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80149c2:	4b89      	ldr	r3, [pc, #548]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 80149c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149c8:	f003 0302 	and.w	r3, r3, #2
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d0ed      	beq.n	80149ac <HAL_RCC_OscConfig+0x53c>
 80149d0:	e015      	b.n	80149fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80149d2:	f7fe f827 	bl	8012a24 <HAL_GetTick>
 80149d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80149d8:	e00a      	b.n	80149f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80149da:	f7fe f823 	bl	8012a24 <HAL_GetTick>
 80149de:	4602      	mov	r2, r0
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	1ad3      	subs	r3, r2, r3
 80149e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80149e8:	4293      	cmp	r3, r2
 80149ea:	d901      	bls.n	80149f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80149ec:	2303      	movs	r3, #3
 80149ee:	e14b      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80149f0:	4b7d      	ldr	r3, [pc, #500]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 80149f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149f6:	f003 0302 	and.w	r3, r3, #2
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d1ed      	bne.n	80149da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80149fe:	7ffb      	ldrb	r3, [r7, #31]
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d105      	bne.n	8014a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014a04:	4b78      	ldr	r3, [pc, #480]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a08:	4a77      	ldr	r2, [pc, #476]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014a0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f003 0320 	and.w	r3, r3, #32
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d03c      	beq.n	8014a96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d01c      	beq.n	8014a5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014a24:	4b70      	ldr	r3, [pc, #448]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014a2a:	4a6f      	ldr	r2, [pc, #444]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a2c:	f043 0301 	orr.w	r3, r3, #1
 8014a30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a34:	f7fd fff6 	bl	8012a24 <HAL_GetTick>
 8014a38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8014a3a:	e008      	b.n	8014a4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014a3c:	f7fd fff2 	bl	8012a24 <HAL_GetTick>
 8014a40:	4602      	mov	r2, r0
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	2b02      	cmp	r3, #2
 8014a48:	d901      	bls.n	8014a4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8014a4a:	2303      	movs	r3, #3
 8014a4c:	e11c      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8014a4e:	4b66      	ldr	r3, [pc, #408]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014a54:	f003 0302 	and.w	r3, r3, #2
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d0ef      	beq.n	8014a3c <HAL_RCC_OscConfig+0x5cc>
 8014a5c:	e01b      	b.n	8014a96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014a5e:	4b62      	ldr	r3, [pc, #392]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014a64:	4a60      	ldr	r2, [pc, #384]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a66:	f023 0301 	bic.w	r3, r3, #1
 8014a6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a6e:	f7fd ffd9 	bl	8012a24 <HAL_GetTick>
 8014a72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014a74:	e008      	b.n	8014a88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014a76:	f7fd ffd5 	bl	8012a24 <HAL_GetTick>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	2b02      	cmp	r3, #2
 8014a82:	d901      	bls.n	8014a88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8014a84:	2303      	movs	r3, #3
 8014a86:	e0ff      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014a88:	4b57      	ldr	r3, [pc, #348]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014a8e:	f003 0302 	and.w	r3, r3, #2
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d1ef      	bne.n	8014a76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	f000 80f3 	beq.w	8014c86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aa4:	2b02      	cmp	r3, #2
 8014aa6:	f040 80c9 	bne.w	8014c3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8014aaa:	4b4f      	ldr	r3, [pc, #316]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	f003 0203 	and.w	r2, r3, #3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d12c      	bne.n	8014b18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d123      	bne.n	8014b18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ada:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d11b      	bne.n	8014b18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d113      	bne.n	8014b18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014afa:	085b      	lsrs	r3, r3, #1
 8014afc:	3b01      	subs	r3, #1
 8014afe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d109      	bne.n	8014b18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0e:	085b      	lsrs	r3, r3, #1
 8014b10:	3b01      	subs	r3, #1
 8014b12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d06b      	beq.n	8014bf0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	2b0c      	cmp	r3, #12
 8014b1c:	d062      	beq.n	8014be4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014b1e:	4b32      	ldr	r3, [pc, #200]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d001      	beq.n	8014b2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e0ac      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014b2e:	4b2e      	ldr	r3, [pc, #184]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4a2d      	ldr	r2, [pc, #180]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014b38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014b3a:	f7fd ff73 	bl	8012a24 <HAL_GetTick>
 8014b3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014b40:	e008      	b.n	8014b54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014b42:	f7fd ff6f 	bl	8012a24 <HAL_GetTick>
 8014b46:	4602      	mov	r2, r0
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	2b02      	cmp	r3, #2
 8014b4e:	d901      	bls.n	8014b54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8014b50:	2303      	movs	r3, #3
 8014b52:	e099      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014b54:	4b24      	ldr	r3, [pc, #144]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d1f0      	bne.n	8014b42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014b60:	4b21      	ldr	r3, [pc, #132]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014b62:	68da      	ldr	r2, [r3, #12]
 8014b64:	4b21      	ldr	r3, [pc, #132]	; (8014bec <HAL_RCC_OscConfig+0x77c>)
 8014b66:	4013      	ands	r3, r2
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014b6c:	687a      	ldr	r2, [r7, #4]
 8014b6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014b70:	3a01      	subs	r2, #1
 8014b72:	0112      	lsls	r2, r2, #4
 8014b74:	4311      	orrs	r1, r2
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014b7a:	0212      	lsls	r2, r2, #8
 8014b7c:	4311      	orrs	r1, r2
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014b82:	0852      	lsrs	r2, r2, #1
 8014b84:	3a01      	subs	r2, #1
 8014b86:	0552      	lsls	r2, r2, #21
 8014b88:	4311      	orrs	r1, r2
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014b8e:	0852      	lsrs	r2, r2, #1
 8014b90:	3a01      	subs	r2, #1
 8014b92:	0652      	lsls	r2, r2, #25
 8014b94:	4311      	orrs	r1, r2
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014b9a:	06d2      	lsls	r2, r2, #27
 8014b9c:	430a      	orrs	r2, r1
 8014b9e:	4912      	ldr	r1, [pc, #72]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8014ba4:	4b10      	ldr	r3, [pc, #64]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	4a0f      	ldr	r2, [pc, #60]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014bb0:	4b0d      	ldr	r3, [pc, #52]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	4a0c      	ldr	r2, [pc, #48]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014bbc:	f7fd ff32 	bl	8012a24 <HAL_GetTick>
 8014bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014bc2:	e008      	b.n	8014bd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014bc4:	f7fd ff2e 	bl	8012a24 <HAL_GetTick>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	1ad3      	subs	r3, r2, r3
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d901      	bls.n	8014bd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	e058      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014bd6:	4b04      	ldr	r3, [pc, #16]	; (8014be8 <HAL_RCC_OscConfig+0x778>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d0f0      	beq.n	8014bc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014be2:	e050      	b.n	8014c86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014be4:	2301      	movs	r3, #1
 8014be6:	e04f      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
 8014be8:	40021000 	.word	0x40021000
 8014bec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014bf0:	4b27      	ldr	r3, [pc, #156]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d144      	bne.n	8014c86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014bfc:	4b24      	ldr	r3, [pc, #144]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4a23      	ldr	r2, [pc, #140]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014c08:	4b21      	ldr	r3, [pc, #132]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	4a20      	ldr	r2, [pc, #128]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014c14:	f7fd ff06 	bl	8012a24 <HAL_GetTick>
 8014c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014c1a:	e008      	b.n	8014c2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014c1c:	f7fd ff02 	bl	8012a24 <HAL_GetTick>
 8014c20:	4602      	mov	r2, r0
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	2b02      	cmp	r3, #2
 8014c28:	d901      	bls.n	8014c2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8014c2a:	2303      	movs	r3, #3
 8014c2c:	e02c      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014c2e:	4b18      	ldr	r3, [pc, #96]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d0f0      	beq.n	8014c1c <HAL_RCC_OscConfig+0x7ac>
 8014c3a:	e024      	b.n	8014c86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	2b0c      	cmp	r3, #12
 8014c40:	d01f      	beq.n	8014c82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c42:	4b13      	ldr	r3, [pc, #76]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4a12      	ldr	r2, [pc, #72]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c4e:	f7fd fee9 	bl	8012a24 <HAL_GetTick>
 8014c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014c54:	e008      	b.n	8014c68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014c56:	f7fd fee5 	bl	8012a24 <HAL_GetTick>
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	1ad3      	subs	r3, r2, r3
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	d901      	bls.n	8014c68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e00f      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014c68:	4b09      	ldr	r3, [pc, #36]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d1f0      	bne.n	8014c56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8014c74:	4b06      	ldr	r3, [pc, #24]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c76:	68da      	ldr	r2, [r3, #12]
 8014c78:	4905      	ldr	r1, [pc, #20]	; (8014c90 <HAL_RCC_OscConfig+0x820>)
 8014c7a:	4b06      	ldr	r3, [pc, #24]	; (8014c94 <HAL_RCC_OscConfig+0x824>)
 8014c7c:	4013      	ands	r3, r2
 8014c7e:	60cb      	str	r3, [r1, #12]
 8014c80:	e001      	b.n	8014c86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8014c82:	2301      	movs	r3, #1
 8014c84:	e000      	b.n	8014c88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8014c86:	2300      	movs	r3, #0
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3720      	adds	r7, #32
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	40021000 	.word	0x40021000
 8014c94:	feeefffc 	.word	0xfeeefffc

08014c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d101      	bne.n	8014cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	e0e7      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014cac:	4b75      	ldr	r3, [pc, #468]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f003 0307 	and.w	r3, r3, #7
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d910      	bls.n	8014cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014cba:	4b72      	ldr	r3, [pc, #456]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	f023 0207 	bic.w	r2, r3, #7
 8014cc2:	4970      	ldr	r1, [pc, #448]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014cca:	4b6e      	ldr	r3, [pc, #440]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f003 0307 	and.w	r3, r3, #7
 8014cd2:	683a      	ldr	r2, [r7, #0]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d001      	beq.n	8014cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e0cf      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f003 0302 	and.w	r3, r3, #2
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d010      	beq.n	8014d0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	689a      	ldr	r2, [r3, #8]
 8014cec:	4b66      	ldr	r3, [pc, #408]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014cee:	689b      	ldr	r3, [r3, #8]
 8014cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d908      	bls.n	8014d0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014cf8:	4b63      	ldr	r3, [pc, #396]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	689b      	ldr	r3, [r3, #8]
 8014d04:	4960      	ldr	r1, [pc, #384]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d06:	4313      	orrs	r3, r2
 8014d08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f003 0301 	and.w	r3, r3, #1
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d04c      	beq.n	8014db0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	2b03      	cmp	r3, #3
 8014d1c:	d107      	bne.n	8014d2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014d1e:	4b5a      	ldr	r3, [pc, #360]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d121      	bne.n	8014d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	e0a6      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	2b02      	cmp	r3, #2
 8014d34:	d107      	bne.n	8014d46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014d36:	4b54      	ldr	r3, [pc, #336]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d115      	bne.n	8014d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8014d42:	2301      	movs	r3, #1
 8014d44:	e09a      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d107      	bne.n	8014d5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014d4e:	4b4e      	ldr	r3, [pc, #312]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f003 0302 	and.w	r3, r3, #2
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d109      	bne.n	8014d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	e08e      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014d5e:	4b4a      	ldr	r3, [pc, #296]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d101      	bne.n	8014d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	e086      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014d6e:	4b46      	ldr	r3, [pc, #280]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	f023 0203 	bic.w	r2, r3, #3
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	4943      	ldr	r1, [pc, #268]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d80:	f7fd fe50 	bl	8012a24 <HAL_GetTick>
 8014d84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014d86:	e00a      	b.n	8014d9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014d88:	f7fd fe4c 	bl	8012a24 <HAL_GetTick>
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d901      	bls.n	8014d9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8014d9a:	2303      	movs	r3, #3
 8014d9c:	e06e      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014d9e:	4b3a      	ldr	r3, [pc, #232]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	f003 020c 	and.w	r2, r3, #12
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d1eb      	bne.n	8014d88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	f003 0302 	and.w	r3, r3, #2
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d010      	beq.n	8014dde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	689a      	ldr	r2, [r3, #8]
 8014dc0:	4b31      	ldr	r3, [pc, #196]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d208      	bcs.n	8014dde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014dcc:	4b2e      	ldr	r3, [pc, #184]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014dce:	689b      	ldr	r3, [r3, #8]
 8014dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	492b      	ldr	r1, [pc, #172]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014dda:	4313      	orrs	r3, r2
 8014ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014dde:	4b29      	ldr	r3, [pc, #164]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	f003 0307 	and.w	r3, r3, #7
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d210      	bcs.n	8014e0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014dec:	4b25      	ldr	r3, [pc, #148]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f023 0207 	bic.w	r2, r3, #7
 8014df4:	4923      	ldr	r1, [pc, #140]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	4313      	orrs	r3, r2
 8014dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014dfc:	4b21      	ldr	r3, [pc, #132]	; (8014e84 <HAL_RCC_ClockConfig+0x1ec>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f003 0307 	and.w	r3, r3, #7
 8014e04:	683a      	ldr	r2, [r7, #0]
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d001      	beq.n	8014e0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e036      	b.n	8014e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	f003 0304 	and.w	r3, r3, #4
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d008      	beq.n	8014e2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014e1a:	4b1b      	ldr	r3, [pc, #108]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	4918      	ldr	r1, [pc, #96]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014e28:	4313      	orrs	r3, r2
 8014e2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f003 0308 	and.w	r3, r3, #8
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d009      	beq.n	8014e4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014e38:	4b13      	ldr	r3, [pc, #76]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	691b      	ldr	r3, [r3, #16]
 8014e44:	00db      	lsls	r3, r3, #3
 8014e46:	4910      	ldr	r1, [pc, #64]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014e4c:	f000 f824 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 8014e50:	4602      	mov	r2, r0
 8014e52:	4b0d      	ldr	r3, [pc, #52]	; (8014e88 <HAL_RCC_ClockConfig+0x1f0>)
 8014e54:	689b      	ldr	r3, [r3, #8]
 8014e56:	091b      	lsrs	r3, r3, #4
 8014e58:	f003 030f 	and.w	r3, r3, #15
 8014e5c:	490b      	ldr	r1, [pc, #44]	; (8014e8c <HAL_RCC_ClockConfig+0x1f4>)
 8014e5e:	5ccb      	ldrb	r3, [r1, r3]
 8014e60:	f003 031f 	and.w	r3, r3, #31
 8014e64:	fa22 f303 	lsr.w	r3, r2, r3
 8014e68:	4a09      	ldr	r2, [pc, #36]	; (8014e90 <HAL_RCC_ClockConfig+0x1f8>)
 8014e6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014e6c:	4b09      	ldr	r3, [pc, #36]	; (8014e94 <HAL_RCC_ClockConfig+0x1fc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7fd fd87 	bl	8012984 <HAL_InitTick>
 8014e76:	4603      	mov	r3, r0
 8014e78:	72fb      	strb	r3, [r7, #11]

  return status;
 8014e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	40022000 	.word	0x40022000
 8014e88:	40021000 	.word	0x40021000
 8014e8c:	08018c48 	.word	0x08018c48
 8014e90:	20000004 	.word	0x20000004
 8014e94:	20000008 	.word	0x20000008

08014e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b089      	sub	sp, #36	; 0x24
 8014e9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	61fb      	str	r3, [r7, #28]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014ea6:	4b3e      	ldr	r3, [pc, #248]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	f003 030c 	and.w	r3, r3, #12
 8014eae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014eb0:	4b3b      	ldr	r3, [pc, #236]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	f003 0303 	and.w	r3, r3, #3
 8014eb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d005      	beq.n	8014ecc <HAL_RCC_GetSysClockFreq+0x34>
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	2b0c      	cmp	r3, #12
 8014ec4:	d121      	bne.n	8014f0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d11e      	bne.n	8014f0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8014ecc:	4b34      	ldr	r3, [pc, #208]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	f003 0308 	and.w	r3, r3, #8
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d107      	bne.n	8014ee8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8014ed8:	4b31      	ldr	r3, [pc, #196]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ede:	0a1b      	lsrs	r3, r3, #8
 8014ee0:	f003 030f 	and.w	r3, r3, #15
 8014ee4:	61fb      	str	r3, [r7, #28]
 8014ee6:	e005      	b.n	8014ef4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8014ee8:	4b2d      	ldr	r3, [pc, #180]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	091b      	lsrs	r3, r3, #4
 8014eee:	f003 030f 	and.w	r3, r3, #15
 8014ef2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8014ef4:	4a2b      	ldr	r2, [pc, #172]	; (8014fa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014efc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d10d      	bne.n	8014f20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014f08:	e00a      	b.n	8014f20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	2b04      	cmp	r3, #4
 8014f0e:	d102      	bne.n	8014f16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014f10:	4b25      	ldr	r3, [pc, #148]	; (8014fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8014f12:	61bb      	str	r3, [r7, #24]
 8014f14:	e004      	b.n	8014f20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	2b08      	cmp	r3, #8
 8014f1a:	d101      	bne.n	8014f20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014f1c:	4b22      	ldr	r3, [pc, #136]	; (8014fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8014f1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	2b0c      	cmp	r3, #12
 8014f24:	d134      	bne.n	8014f90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8014f26:	4b1e      	ldr	r3, [pc, #120]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	f003 0303 	and.w	r3, r3, #3
 8014f2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	2b02      	cmp	r3, #2
 8014f34:	d003      	beq.n	8014f3e <HAL_RCC_GetSysClockFreq+0xa6>
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	2b03      	cmp	r3, #3
 8014f3a:	d003      	beq.n	8014f44 <HAL_RCC_GetSysClockFreq+0xac>
 8014f3c:	e005      	b.n	8014f4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8014f3e:	4b1a      	ldr	r3, [pc, #104]	; (8014fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8014f40:	617b      	str	r3, [r7, #20]
      break;
 8014f42:	e005      	b.n	8014f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8014f44:	4b18      	ldr	r3, [pc, #96]	; (8014fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8014f46:	617b      	str	r3, [r7, #20]
      break;
 8014f48:	e002      	b.n	8014f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	617b      	str	r3, [r7, #20]
      break;
 8014f4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014f50:	4b13      	ldr	r3, [pc, #76]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	091b      	lsrs	r3, r3, #4
 8014f56:	f003 0307 	and.w	r3, r3, #7
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8014f5e:	4b10      	ldr	r3, [pc, #64]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	0a1b      	lsrs	r3, r3, #8
 8014f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f68:	697a      	ldr	r2, [r7, #20]
 8014f6a:	fb03 f202 	mul.w	r2, r3, r2
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014f76:	4b0a      	ldr	r3, [pc, #40]	; (8014fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	0e5b      	lsrs	r3, r3, #25
 8014f7c:	f003 0303 	and.w	r3, r3, #3
 8014f80:	3301      	adds	r3, #1
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8014f86:	697a      	ldr	r2, [r7, #20]
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8014f90:	69bb      	ldr	r3, [r7, #24]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3724      	adds	r7, #36	; 0x24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	40021000 	.word	0x40021000
 8014fa4:	08018c60 	.word	0x08018c60
 8014fa8:	00f42400 	.word	0x00f42400

08014fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014fac:	b480      	push	{r7}
 8014fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014fb0:	4b03      	ldr	r3, [pc, #12]	; (8014fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	20000004 	.word	0x20000004

08014fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8014fc8:	f7ff fff0 	bl	8014fac <HAL_RCC_GetHCLKFreq>
 8014fcc:	4602      	mov	r2, r0
 8014fce:	4b06      	ldr	r3, [pc, #24]	; (8014fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	0a1b      	lsrs	r3, r3, #8
 8014fd4:	f003 0307 	and.w	r3, r3, #7
 8014fd8:	4904      	ldr	r1, [pc, #16]	; (8014fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8014fda:	5ccb      	ldrb	r3, [r1, r3]
 8014fdc:	f003 031f 	and.w	r3, r3, #31
 8014fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	40021000 	.word	0x40021000
 8014fec:	08018c58 	.word	0x08018c58

08014ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8014ff4:	f7ff ffda 	bl	8014fac <HAL_RCC_GetHCLKFreq>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	4b06      	ldr	r3, [pc, #24]	; (8015014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014ffc:	689b      	ldr	r3, [r3, #8]
 8014ffe:	0adb      	lsrs	r3, r3, #11
 8015000:	f003 0307 	and.w	r3, r3, #7
 8015004:	4904      	ldr	r1, [pc, #16]	; (8015018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015006:	5ccb      	ldrb	r3, [r1, r3]
 8015008:	f003 031f 	and.w	r3, r3, #31
 801500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015010:	4618      	mov	r0, r3
 8015012:	bd80      	pop	{r7, pc}
 8015014:	40021000 	.word	0x40021000
 8015018:	08018c58 	.word	0x08018c58

0801501c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b086      	sub	sp, #24
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8015024:	2300      	movs	r3, #0
 8015026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8015028:	4b2a      	ldr	r3, [pc, #168]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015030:	2b00      	cmp	r3, #0
 8015032:	d003      	beq.n	801503c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8015034:	f7ff f9b8 	bl	80143a8 <HAL_PWREx_GetVoltageRange>
 8015038:	6178      	str	r0, [r7, #20]
 801503a:	e014      	b.n	8015066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801503c:	4b25      	ldr	r3, [pc, #148]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015040:	4a24      	ldr	r2, [pc, #144]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015046:	6593      	str	r3, [r2, #88]	; 0x58
 8015048:	4b22      	ldr	r3, [pc, #136]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801504c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015050:	60fb      	str	r3, [r7, #12]
 8015052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8015054:	f7ff f9a8 	bl	80143a8 <HAL_PWREx_GetVoltageRange>
 8015058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801505a:	4b1e      	ldr	r3, [pc, #120]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801505e:	4a1d      	ldr	r2, [pc, #116]	; (80150d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015064:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801506c:	d10b      	bne.n	8015086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2b80      	cmp	r3, #128	; 0x80
 8015072:	d919      	bls.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2ba0      	cmp	r3, #160	; 0xa0
 8015078:	d902      	bls.n	8015080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801507a:	2302      	movs	r3, #2
 801507c:	613b      	str	r3, [r7, #16]
 801507e:	e013      	b.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8015080:	2301      	movs	r3, #1
 8015082:	613b      	str	r3, [r7, #16]
 8015084:	e010      	b.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b80      	cmp	r3, #128	; 0x80
 801508a:	d902      	bls.n	8015092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801508c:	2303      	movs	r3, #3
 801508e:	613b      	str	r3, [r7, #16]
 8015090:	e00a      	b.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2b80      	cmp	r3, #128	; 0x80
 8015096:	d102      	bne.n	801509e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8015098:	2302      	movs	r3, #2
 801509a:	613b      	str	r3, [r7, #16]
 801509c:	e004      	b.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2b70      	cmp	r3, #112	; 0x70
 80150a2:	d101      	bne.n	80150a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80150a4:	2301      	movs	r3, #1
 80150a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80150a8:	4b0b      	ldr	r3, [pc, #44]	; (80150d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	f023 0207 	bic.w	r2, r3, #7
 80150b0:	4909      	ldr	r1, [pc, #36]	; (80150d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	4313      	orrs	r3, r2
 80150b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80150b8:	4b07      	ldr	r3, [pc, #28]	; (80150d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f003 0307 	and.w	r3, r3, #7
 80150c0:	693a      	ldr	r2, [r7, #16]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d001      	beq.n	80150ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80150c6:	2301      	movs	r3, #1
 80150c8:	e000      	b.n	80150cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80150ca:	2300      	movs	r3, #0
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3718      	adds	r7, #24
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	40021000 	.word	0x40021000
 80150d8:	40022000 	.word	0x40022000

080150dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b086      	sub	sp, #24
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80150e4:	2300      	movs	r3, #0
 80150e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80150e8:	2300      	movs	r3, #0
 80150ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d031      	beq.n	801515c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8015100:	d01a      	beq.n	8015138 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8015102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8015106:	d814      	bhi.n	8015132 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8015108:	2b00      	cmp	r3, #0
 801510a:	d009      	beq.n	8015120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801510c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015110:	d10f      	bne.n	8015132 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8015112:	4b5d      	ldr	r3, [pc, #372]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	4a5c      	ldr	r2, [pc, #368]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801511c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801511e:	e00c      	b.n	801513a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	3304      	adds	r3, #4
 8015124:	2100      	movs	r1, #0
 8015126:	4618      	mov	r0, r3
 8015128:	f000 fa22 	bl	8015570 <RCCEx_PLLSAI1_Config>
 801512c:	4603      	mov	r3, r0
 801512e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015130:	e003      	b.n	801513a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015132:	2301      	movs	r3, #1
 8015134:	74fb      	strb	r3, [r7, #19]
      break;
 8015136:	e000      	b.n	801513a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8015138:	bf00      	nop
    }

    if(ret == HAL_OK)
 801513a:	7cfb      	ldrb	r3, [r7, #19]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10b      	bne.n	8015158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015140:	4b51      	ldr	r3, [pc, #324]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801514e:	494e      	ldr	r1, [pc, #312]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015150:	4313      	orrs	r3, r2
 8015152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8015156:	e001      	b.n	801515c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015158:	7cfb      	ldrb	r3, [r7, #19]
 801515a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015164:	2b00      	cmp	r3, #0
 8015166:	f000 809e 	beq.w	80152a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801516a:	2300      	movs	r3, #0
 801516c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801516e:	4b46      	ldr	r3, [pc, #280]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015176:	2b00      	cmp	r3, #0
 8015178:	d101      	bne.n	801517e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801517a:	2301      	movs	r3, #1
 801517c:	e000      	b.n	8015180 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801517e:	2300      	movs	r3, #0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d00d      	beq.n	80151a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015184:	4b40      	ldr	r3, [pc, #256]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015188:	4a3f      	ldr	r2, [pc, #252]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801518e:	6593      	str	r3, [r2, #88]	; 0x58
 8015190:	4b3d      	ldr	r3, [pc, #244]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015198:	60bb      	str	r3, [r7, #8]
 801519a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801519c:	2301      	movs	r3, #1
 801519e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80151a0:	4b3a      	ldr	r3, [pc, #232]	; (801528c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4a39      	ldr	r2, [pc, #228]	; (801528c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80151a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80151ac:	f7fd fc3a 	bl	8012a24 <HAL_GetTick>
 80151b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80151b2:	e009      	b.n	80151c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80151b4:	f7fd fc36 	bl	8012a24 <HAL_GetTick>
 80151b8:	4602      	mov	r2, r0
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	2b02      	cmp	r3, #2
 80151c0:	d902      	bls.n	80151c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80151c2:	2303      	movs	r3, #3
 80151c4:	74fb      	strb	r3, [r7, #19]
        break;
 80151c6:	e005      	b.n	80151d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80151c8:	4b30      	ldr	r3, [pc, #192]	; (801528c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d0ef      	beq.n	80151b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80151d4:	7cfb      	ldrb	r3, [r7, #19]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d15a      	bne.n	8015290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80151da:	4b2b      	ldr	r3, [pc, #172]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80151dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80151e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d01e      	beq.n	801522a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151f0:	697a      	ldr	r2, [r7, #20]
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d019      	beq.n	801522a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80151f6:	4b24      	ldr	r3, [pc, #144]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80151f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015200:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015202:	4b21      	ldr	r3, [pc, #132]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015208:	4a1f      	ldr	r2, [pc, #124]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801520a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801520e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015212:	4b1d      	ldr	r3, [pc, #116]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015218:	4a1b      	ldr	r2, [pc, #108]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801521e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015222:	4a19      	ldr	r2, [pc, #100]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	f003 0301 	and.w	r3, r3, #1
 8015230:	2b00      	cmp	r3, #0
 8015232:	d016      	beq.n	8015262 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015234:	f7fd fbf6 	bl	8012a24 <HAL_GetTick>
 8015238:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801523a:	e00b      	b.n	8015254 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801523c:	f7fd fbf2 	bl	8012a24 <HAL_GetTick>
 8015240:	4602      	mov	r2, r0
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	1ad3      	subs	r3, r2, r3
 8015246:	f241 3288 	movw	r2, #5000	; 0x1388
 801524a:	4293      	cmp	r3, r2
 801524c:	d902      	bls.n	8015254 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801524e:	2303      	movs	r3, #3
 8015250:	74fb      	strb	r3, [r7, #19]
            break;
 8015252:	e006      	b.n	8015262 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015254:	4b0c      	ldr	r3, [pc, #48]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801525a:	f003 0302 	and.w	r3, r3, #2
 801525e:	2b00      	cmp	r3, #0
 8015260:	d0ec      	beq.n	801523c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8015262:	7cfb      	ldrb	r3, [r7, #19]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d10b      	bne.n	8015280 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015268:	4b07      	ldr	r3, [pc, #28]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801526e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015276:	4904      	ldr	r1, [pc, #16]	; (8015288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8015278:	4313      	orrs	r3, r2
 801527a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801527e:	e009      	b.n	8015294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015280:	7cfb      	ldrb	r3, [r7, #19]
 8015282:	74bb      	strb	r3, [r7, #18]
 8015284:	e006      	b.n	8015294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8015286:	bf00      	nop
 8015288:	40021000 	.word	0x40021000
 801528c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015290:	7cfb      	ldrb	r3, [r7, #19]
 8015292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015294:	7c7b      	ldrb	r3, [r7, #17]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d105      	bne.n	80152a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801529a:	4b8d      	ldr	r3, [pc, #564]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801529e:	4a8c      	ldr	r2, [pc, #560]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80152a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f003 0301 	and.w	r3, r3, #1
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00a      	beq.n	80152c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80152b2:	4b87      	ldr	r3, [pc, #540]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152b8:	f023 0203 	bic.w	r2, r3, #3
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6a1b      	ldr	r3, [r3, #32]
 80152c0:	4983      	ldr	r1, [pc, #524]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152c2:	4313      	orrs	r3, r2
 80152c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f003 0302 	and.w	r3, r3, #2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d00a      	beq.n	80152ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80152d4:	4b7e      	ldr	r3, [pc, #504]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152da:	f023 020c 	bic.w	r2, r3, #12
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e2:	497b      	ldr	r1, [pc, #492]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152e4:	4313      	orrs	r3, r2
 80152e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f003 0304 	and.w	r3, r3, #4
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00a      	beq.n	801530c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80152f6:	4b76      	ldr	r3, [pc, #472]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80152f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015304:	4972      	ldr	r1, [pc, #456]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015306:	4313      	orrs	r3, r2
 8015308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f003 0320 	and.w	r3, r3, #32
 8015314:	2b00      	cmp	r3, #0
 8015316:	d00a      	beq.n	801532e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015318:	4b6d      	ldr	r3, [pc, #436]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801531e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015326:	496a      	ldr	r1, [pc, #424]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015328:	4313      	orrs	r3, r2
 801532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015336:	2b00      	cmp	r3, #0
 8015338:	d00a      	beq.n	8015350 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801533a:	4b65      	ldr	r3, [pc, #404]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015348:	4961      	ldr	r1, [pc, #388]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801534a:	4313      	orrs	r3, r2
 801534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015358:	2b00      	cmp	r3, #0
 801535a:	d00a      	beq.n	8015372 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801535c:	4b5c      	ldr	r3, [pc, #368]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801536a:	4959      	ldr	r1, [pc, #356]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801536c:	4313      	orrs	r3, r2
 801536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801537a:	2b00      	cmp	r3, #0
 801537c:	d00a      	beq.n	8015394 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801537e:	4b54      	ldr	r3, [pc, #336]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015384:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801538c:	4950      	ldr	r1, [pc, #320]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801538e:	4313      	orrs	r3, r2
 8015390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801539c:	2b00      	cmp	r3, #0
 801539e:	d00a      	beq.n	80153b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80153a0:	4b4b      	ldr	r3, [pc, #300]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153ae:	4948      	ldr	r1, [pc, #288]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153b0:	4313      	orrs	r3, r2
 80153b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00a      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80153c2:	4b43      	ldr	r3, [pc, #268]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153d0:	493f      	ldr	r1, [pc, #252]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153d2:	4313      	orrs	r3, r2
 80153d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d028      	beq.n	8015436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80153e4:	4b3a      	ldr	r3, [pc, #232]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153f2:	4937      	ldr	r1, [pc, #220]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80153f4:	4313      	orrs	r3, r2
 80153f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015402:	d106      	bne.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015404:	4b32      	ldr	r3, [pc, #200]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015406:	68db      	ldr	r3, [r3, #12]
 8015408:	4a31      	ldr	r2, [pc, #196]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 801540a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801540e:	60d3      	str	r3, [r2, #12]
 8015410:	e011      	b.n	8015436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015416:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801541a:	d10c      	bne.n	8015436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	3304      	adds	r3, #4
 8015420:	2101      	movs	r1, #1
 8015422:	4618      	mov	r0, r3
 8015424:	f000 f8a4 	bl	8015570 <RCCEx_PLLSAI1_Config>
 8015428:	4603      	mov	r3, r0
 801542a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801542c:	7cfb      	ldrb	r3, [r7, #19]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d001      	beq.n	8015436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8015432:	7cfb      	ldrb	r3, [r7, #19]
 8015434:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801543e:	2b00      	cmp	r3, #0
 8015440:	d028      	beq.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8015442:	4b23      	ldr	r3, [pc, #140]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015448:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015450:	491f      	ldr	r1, [pc, #124]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015452:	4313      	orrs	r3, r2
 8015454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801545c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015460:	d106      	bne.n	8015470 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015462:	4b1b      	ldr	r3, [pc, #108]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	4a1a      	ldr	r2, [pc, #104]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8015468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801546c:	60d3      	str	r3, [r2, #12]
 801546e:	e011      	b.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015478:	d10c      	bne.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	3304      	adds	r3, #4
 801547e:	2101      	movs	r1, #1
 8015480:	4618      	mov	r0, r3
 8015482:	f000 f875 	bl	8015570 <RCCEx_PLLSAI1_Config>
 8015486:	4603      	mov	r3, r0
 8015488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801548a:	7cfb      	ldrb	r3, [r7, #19]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d001      	beq.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8015490:	7cfb      	ldrb	r3, [r7, #19]
 8015492:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801549c:	2b00      	cmp	r3, #0
 801549e:	d02b      	beq.n	80154f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80154a0:	4b0b      	ldr	r3, [pc, #44]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80154a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80154a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154ae:	4908      	ldr	r1, [pc, #32]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80154b0:	4313      	orrs	r3, r2
 80154b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80154be:	d109      	bne.n	80154d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80154c0:	4b03      	ldr	r3, [pc, #12]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	4a02      	ldr	r2, [pc, #8]	; (80154d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80154c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80154ca:	60d3      	str	r3, [r2, #12]
 80154cc:	e014      	b.n	80154f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80154ce:	bf00      	nop
 80154d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80154dc:	d10c      	bne.n	80154f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	3304      	adds	r3, #4
 80154e2:	2101      	movs	r1, #1
 80154e4:	4618      	mov	r0, r3
 80154e6:	f000 f843 	bl	8015570 <RCCEx_PLLSAI1_Config>
 80154ea:	4603      	mov	r3, r0
 80154ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80154ee:	7cfb      	ldrb	r3, [r7, #19]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d001      	beq.n	80154f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80154f4:	7cfb      	ldrb	r3, [r7, #19]
 80154f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015500:	2b00      	cmp	r3, #0
 8015502:	d01c      	beq.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015504:	4b19      	ldr	r3, [pc, #100]	; (801556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8015506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801550a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015512:	4916      	ldr	r1, [pc, #88]	; (801556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8015514:	4313      	orrs	r3, r2
 8015516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801551e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015522:	d10c      	bne.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	3304      	adds	r3, #4
 8015528:	2102      	movs	r1, #2
 801552a:	4618      	mov	r0, r3
 801552c:	f000 f820 	bl	8015570 <RCCEx_PLLSAI1_Config>
 8015530:	4603      	mov	r3, r0
 8015532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015534:	7cfb      	ldrb	r3, [r7, #19]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 801553a:	7cfb      	ldrb	r3, [r7, #19]
 801553c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015546:	2b00      	cmp	r3, #0
 8015548:	d00a      	beq.n	8015560 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801554a:	4b08      	ldr	r3, [pc, #32]	; (801556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015550:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015558:	4904      	ldr	r1, [pc, #16]	; (801556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801555a:	4313      	orrs	r3, r2
 801555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8015560:	7cbb      	ldrb	r3, [r7, #18]
}
 8015562:	4618      	mov	r0, r3
 8015564:	3718      	adds	r7, #24
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	40021000 	.word	0x40021000

08015570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801557a:	2300      	movs	r3, #0
 801557c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801557e:	4b74      	ldr	r3, [pc, #464]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015580:	68db      	ldr	r3, [r3, #12]
 8015582:	f003 0303 	and.w	r3, r3, #3
 8015586:	2b00      	cmp	r3, #0
 8015588:	d018      	beq.n	80155bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801558a:	4b71      	ldr	r3, [pc, #452]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	f003 0203 	and.w	r2, r3, #3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	429a      	cmp	r2, r3
 8015598:	d10d      	bne.n	80155b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
       ||
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d009      	beq.n	80155b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80155a2:	4b6b      	ldr	r3, [pc, #428]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	091b      	lsrs	r3, r3, #4
 80155a8:	f003 0307 	and.w	r3, r3, #7
 80155ac:	1c5a      	adds	r2, r3, #1
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
       ||
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d047      	beq.n	8015646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80155b6:	2301      	movs	r3, #1
 80155b8:	73fb      	strb	r3, [r7, #15]
 80155ba:	e044      	b.n	8015646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	2b03      	cmp	r3, #3
 80155c2:	d018      	beq.n	80155f6 <RCCEx_PLLSAI1_Config+0x86>
 80155c4:	2b03      	cmp	r3, #3
 80155c6:	d825      	bhi.n	8015614 <RCCEx_PLLSAI1_Config+0xa4>
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d002      	beq.n	80155d2 <RCCEx_PLLSAI1_Config+0x62>
 80155cc:	2b02      	cmp	r3, #2
 80155ce:	d009      	beq.n	80155e4 <RCCEx_PLLSAI1_Config+0x74>
 80155d0:	e020      	b.n	8015614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80155d2:	4b5f      	ldr	r3, [pc, #380]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f003 0302 	and.w	r3, r3, #2
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d11d      	bne.n	801561a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80155de:	2301      	movs	r3, #1
 80155e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80155e2:	e01a      	b.n	801561a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80155e4:	4b5a      	ldr	r3, [pc, #360]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d116      	bne.n	801561e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80155f0:	2301      	movs	r3, #1
 80155f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80155f4:	e013      	b.n	801561e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80155f6:	4b56      	ldr	r3, [pc, #344]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d10f      	bne.n	8015622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8015602:	4b53      	ldr	r3, [pc, #332]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801560a:	2b00      	cmp	r3, #0
 801560c:	d109      	bne.n	8015622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801560e:	2301      	movs	r3, #1
 8015610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015612:	e006      	b.n	8015622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8015614:	2301      	movs	r3, #1
 8015616:	73fb      	strb	r3, [r7, #15]
      break;
 8015618:	e004      	b.n	8015624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801561a:	bf00      	nop
 801561c:	e002      	b.n	8015624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801561e:	bf00      	nop
 8015620:	e000      	b.n	8015624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8015622:	bf00      	nop
    }

    if(status == HAL_OK)
 8015624:	7bfb      	ldrb	r3, [r7, #15]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d10d      	bne.n	8015646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801562a:	4b49      	ldr	r3, [pc, #292]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 801562c:	68db      	ldr	r3, [r3, #12]
 801562e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6819      	ldr	r1, [r3, #0]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	3b01      	subs	r3, #1
 801563c:	011b      	lsls	r3, r3, #4
 801563e:	430b      	orrs	r3, r1
 8015640:	4943      	ldr	r1, [pc, #268]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015642:	4313      	orrs	r3, r2
 8015644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8015646:	7bfb      	ldrb	r3, [r7, #15]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d17c      	bne.n	8015746 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801564c:	4b40      	ldr	r3, [pc, #256]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	4a3f      	ldr	r2, [pc, #252]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015658:	f7fd f9e4 	bl	8012a24 <HAL_GetTick>
 801565c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801565e:	e009      	b.n	8015674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015660:	f7fd f9e0 	bl	8012a24 <HAL_GetTick>
 8015664:	4602      	mov	r2, r0
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	2b02      	cmp	r3, #2
 801566c:	d902      	bls.n	8015674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801566e:	2303      	movs	r3, #3
 8015670:	73fb      	strb	r3, [r7, #15]
        break;
 8015672:	e005      	b.n	8015680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8015674:	4b36      	ldr	r3, [pc, #216]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801567c:	2b00      	cmp	r3, #0
 801567e:	d1ef      	bne.n	8015660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8015680:	7bfb      	ldrb	r3, [r7, #15]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d15f      	bne.n	8015746 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d110      	bne.n	80156ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801568c:	4b30      	ldr	r3, [pc, #192]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 801568e:	691b      	ldr	r3, [r3, #16]
 8015690:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8015694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	6892      	ldr	r2, [r2, #8]
 801569c:	0211      	lsls	r1, r2, #8
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	68d2      	ldr	r2, [r2, #12]
 80156a2:	06d2      	lsls	r2, r2, #27
 80156a4:	430a      	orrs	r2, r1
 80156a6:	492a      	ldr	r1, [pc, #168]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80156a8:	4313      	orrs	r3, r2
 80156aa:	610b      	str	r3, [r1, #16]
 80156ac:	e027      	b.n	80156fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d112      	bne.n	80156da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80156b4:	4b26      	ldr	r3, [pc, #152]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80156b6:	691b      	ldr	r3, [r3, #16]
 80156b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80156bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	6892      	ldr	r2, [r2, #8]
 80156c4:	0211      	lsls	r1, r2, #8
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	6912      	ldr	r2, [r2, #16]
 80156ca:	0852      	lsrs	r2, r2, #1
 80156cc:	3a01      	subs	r2, #1
 80156ce:	0552      	lsls	r2, r2, #21
 80156d0:	430a      	orrs	r2, r1
 80156d2:	491f      	ldr	r1, [pc, #124]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80156d4:	4313      	orrs	r3, r2
 80156d6:	610b      	str	r3, [r1, #16]
 80156d8:	e011      	b.n	80156fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80156da:	4b1d      	ldr	r3, [pc, #116]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80156dc:	691b      	ldr	r3, [r3, #16]
 80156de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80156e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	6892      	ldr	r2, [r2, #8]
 80156ea:	0211      	lsls	r1, r2, #8
 80156ec:	687a      	ldr	r2, [r7, #4]
 80156ee:	6952      	ldr	r2, [r2, #20]
 80156f0:	0852      	lsrs	r2, r2, #1
 80156f2:	3a01      	subs	r2, #1
 80156f4:	0652      	lsls	r2, r2, #25
 80156f6:	430a      	orrs	r2, r1
 80156f8:	4915      	ldr	r1, [pc, #84]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80156fa:	4313      	orrs	r3, r2
 80156fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80156fe:	4b14      	ldr	r3, [pc, #80]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	4a13      	ldr	r2, [pc, #76]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801570a:	f7fd f98b 	bl	8012a24 <HAL_GetTick>
 801570e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015710:	e009      	b.n	8015726 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015712:	f7fd f987 	bl	8012a24 <HAL_GetTick>
 8015716:	4602      	mov	r2, r0
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	2b02      	cmp	r3, #2
 801571e:	d902      	bls.n	8015726 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8015720:	2303      	movs	r3, #3
 8015722:	73fb      	strb	r3, [r7, #15]
          break;
 8015724:	e005      	b.n	8015732 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015726:	4b0a      	ldr	r3, [pc, #40]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801572e:	2b00      	cmp	r3, #0
 8015730:	d0ef      	beq.n	8015712 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8015732:	7bfb      	ldrb	r3, [r7, #15]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d106      	bne.n	8015746 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 801573a:	691a      	ldr	r2, [r3, #16]
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	699b      	ldr	r3, [r3, #24]
 8015740:	4903      	ldr	r1, [pc, #12]	; (8015750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8015742:	4313      	orrs	r3, r2
 8015744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8015746:	7bfb      	ldrb	r3, [r7, #15]
}
 8015748:	4618      	mov	r0, r3
 801574a:	3710      	adds	r7, #16
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	40021000 	.word	0x40021000

08015754 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801575c:	2301      	movs	r3, #1
 801575e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d079      	beq.n	801585a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d106      	bne.n	8015780 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2200      	movs	r2, #0
 8015776:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7fc fe26 	bl	80123cc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2202      	movs	r2, #2
 8015784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	f003 0310 	and.w	r3, r3, #16
 8015792:	2b10      	cmp	r3, #16
 8015794:	d058      	beq.n	8015848 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	22ca      	movs	r2, #202	; 0xca
 801579c:	625a      	str	r2, [r3, #36]	; 0x24
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2253      	movs	r2, #83	; 0x53
 80157a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fc90 	bl	80160cc <RTC_EnterInitMode>
 80157ac:	4603      	mov	r3, r0
 80157ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80157b0:	7bfb      	ldrb	r3, [r7, #15]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d127      	bne.n	8015806 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	6812      	ldr	r2, [r2, #0]
 80157c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80157c8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	6899      	ldr	r1, [r3, #8]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	685a      	ldr	r2, [r3, #4]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	691b      	ldr	r3, [r3, #16]
 80157d8:	431a      	orrs	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	699b      	ldr	r3, [r3, #24]
 80157de:	431a      	orrs	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	430a      	orrs	r2, r1
 80157e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	68d2      	ldr	r2, [r2, #12]
 80157f0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	6919      	ldr	r1, [r3, #16]
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	689b      	ldr	r3, [r3, #8]
 80157fc:	041a      	lsls	r2, r3, #16
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	430a      	orrs	r2, r1
 8015804:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f000 fc94 	bl	8016134 <RTC_ExitInitMode>
 801580c:	4603      	mov	r3, r0
 801580e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015810:	7bfb      	ldrb	r3, [r7, #15]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d113      	bne.n	801583e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f022 0203 	bic.w	r2, r2, #3
 8015824:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	69da      	ldr	r2, [r3, #28]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	695b      	ldr	r3, [r3, #20]
 8015834:	431a      	orrs	r2, r3
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	430a      	orrs	r2, r1
 801583c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	22ff      	movs	r2, #255	; 0xff
 8015844:	625a      	str	r2, [r3, #36]	; 0x24
 8015846:	e001      	b.n	801584c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8015848:	2300      	movs	r3, #0
 801584a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801584c:	7bfb      	ldrb	r3, [r7, #15]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d103      	bne.n	801585a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2201      	movs	r2, #1
 8015856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 801585a:	7bfb      	ldrb	r3, [r7, #15]
}
 801585c:	4618      	mov	r0, r3
 801585e:	3710      	adds	r7, #16
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015864:	b590      	push	{r4, r7, lr}
 8015866:	b087      	sub	sp, #28
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015876:	2b01      	cmp	r3, #1
 8015878:	d101      	bne.n	801587e <HAL_RTC_SetTime+0x1a>
 801587a:	2302      	movs	r3, #2
 801587c:	e08b      	b.n	8015996 <HAL_RTC_SetTime+0x132>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2201      	movs	r2, #1
 8015882:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2202      	movs	r2, #2
 801588a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	22ca      	movs	r2, #202	; 0xca
 8015894:	625a      	str	r2, [r3, #36]	; 0x24
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2253      	movs	r2, #83	; 0x53
 801589c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801589e:	68f8      	ldr	r0, [r7, #12]
 80158a0:	f000 fc14 	bl	80160cc <RTC_EnterInitMode>
 80158a4:	4603      	mov	r3, r0
 80158a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80158a8:	7cfb      	ldrb	r3, [r7, #19]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d163      	bne.n	8015976 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d126      	bne.n	8015902 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d102      	bne.n	80158c8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	2200      	movs	r2, #0
 80158c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 fc6f 	bl	80161b0 <RTC_ByteToBcd2>
 80158d2:	4603      	mov	r3, r0
 80158d4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	785b      	ldrb	r3, [r3, #1]
 80158da:	4618      	mov	r0, r3
 80158dc:	f000 fc68 	bl	80161b0 <RTC_ByteToBcd2>
 80158e0:	4603      	mov	r3, r0
 80158e2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80158e4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80158e6:	68bb      	ldr	r3, [r7, #8]
 80158e8:	789b      	ldrb	r3, [r3, #2]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f000 fc60 	bl	80161b0 <RTC_ByteToBcd2>
 80158f0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80158f2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	78db      	ldrb	r3, [r3, #3]
 80158fa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80158fc:	4313      	orrs	r3, r2
 80158fe:	617b      	str	r3, [r7, #20]
 8015900:	e018      	b.n	8015934 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	689b      	ldr	r3, [r3, #8]
 8015908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801590c:	2b00      	cmp	r3, #0
 801590e:	d102      	bne.n	8015916 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	2200      	movs	r2, #0
 8015914:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	785b      	ldrb	r3, [r3, #1]
 8015920:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015922:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015928:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	78db      	ldrb	r3, [r3, #3]
 801592e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015930:	4313      	orrs	r3, r2
 8015932:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801593e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8015942:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	689a      	ldr	r2, [r3, #8]
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015952:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	6899      	ldr	r1, [r3, #8]
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	68da      	ldr	r2, [r3, #12]
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	691b      	ldr	r3, [r3, #16]
 8015962:	431a      	orrs	r2, r3
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	430a      	orrs	r2, r1
 801596a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f000 fbe1 	bl	8016134 <RTC_ExitInitMode>
 8015972:	4603      	mov	r3, r0
 8015974:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	22ff      	movs	r2, #255	; 0xff
 801597c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801597e:	7cfb      	ldrb	r3, [r7, #19]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d103      	bne.n	801598c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2201      	movs	r2, #1
 8015988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2200      	movs	r2, #0
 8015990:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8015994:	7cfb      	ldrb	r3, [r7, #19]
}
 8015996:	4618      	mov	r0, r3
 8015998:	371c      	adds	r7, #28
 801599a:	46bd      	mov	sp, r7
 801599c:	bd90      	pop	{r4, r7, pc}

0801599e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b086      	sub	sp, #24
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	60b9      	str	r1, [r7, #8]
 80159a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	691b      	ldr	r3, [r3, #16]
 80159ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80159cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80159d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	0c1b      	lsrs	r3, r3, #16
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159dc:	b2da      	uxtb	r2, r3
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	0a1b      	lsrs	r3, r3, #8
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159ec:	b2da      	uxtb	r2, r3
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159fa:	b2da      	uxtb	r2, r3
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	0d9b      	lsrs	r3, r3, #22
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	f003 0301 	and.w	r3, r3, #1
 8015a0a:	b2da      	uxtb	r2, r3
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d11a      	bne.n	8015a4c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f000 fbe8 	bl	80161f0 <RTC_Bcd2ToByte>
 8015a20:	4603      	mov	r3, r0
 8015a22:	461a      	mov	r2, r3
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	785b      	ldrb	r3, [r3, #1]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f000 fbdf 	bl	80161f0 <RTC_Bcd2ToByte>
 8015a32:	4603      	mov	r3, r0
 8015a34:	461a      	mov	r2, r3
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	789b      	ldrb	r3, [r3, #2]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f000 fbd6 	bl	80161f0 <RTC_Bcd2ToByte>
 8015a44:	4603      	mov	r3, r0
 8015a46:	461a      	mov	r2, r3
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8015a4c:	2300      	movs	r3, #0
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3718      	adds	r7, #24
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}

08015a56 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015a56:	b590      	push	{r4, r7, lr}
 8015a58:	b087      	sub	sp, #28
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	60f8      	str	r0, [r7, #12]
 8015a5e:	60b9      	str	r1, [r7, #8]
 8015a60:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d101      	bne.n	8015a70 <HAL_RTC_SetDate+0x1a>
 8015a6c:	2302      	movs	r3, #2
 8015a6e:	e075      	b.n	8015b5c <HAL_RTC_SetDate+0x106>
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	2201      	movs	r2, #1
 8015a74:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2202      	movs	r2, #2
 8015a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d10e      	bne.n	8015aa4 <HAL_RTC_SetDate+0x4e>
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	785b      	ldrb	r3, [r3, #1]
 8015a8a:	f003 0310 	and.w	r3, r3, #16
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d008      	beq.n	8015aa4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	785b      	ldrb	r3, [r3, #1]
 8015a96:	f023 0310 	bic.w	r3, r3, #16
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	330a      	adds	r3, #10
 8015a9e:	b2da      	uxtb	r2, r3
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d11c      	bne.n	8015ae4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	78db      	ldrb	r3, [r3, #3]
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f000 fb7e 	bl	80161b0 <RTC_ByteToBcd2>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	785b      	ldrb	r3, [r3, #1]
 8015abc:	4618      	mov	r0, r3
 8015abe:	f000 fb77 	bl	80161b0 <RTC_ByteToBcd2>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015ac6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	789b      	ldrb	r3, [r3, #2]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f000 fb6f 	bl	80161b0 <RTC_ByteToBcd2>
 8015ad2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015ad4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015ade:	4313      	orrs	r3, r2
 8015ae0:	617b      	str	r3, [r7, #20]
 8015ae2:	e00e      	b.n	8015b02 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	78db      	ldrb	r3, [r3, #3]
 8015ae8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	785b      	ldrb	r3, [r3, #1]
 8015aee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015af0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8015af2:	68ba      	ldr	r2, [r7, #8]
 8015af4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8015af6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015afe:	4313      	orrs	r3, r2
 8015b00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	22ca      	movs	r2, #202	; 0xca
 8015b08:	625a      	str	r2, [r3, #36]	; 0x24
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2253      	movs	r2, #83	; 0x53
 8015b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015b12:	68f8      	ldr	r0, [r7, #12]
 8015b14:	f000 fada 	bl	80160cc <RTC_EnterInitMode>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8015b1c:	7cfb      	ldrb	r3, [r7, #19]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d10c      	bne.n	8015b3c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015b2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015b30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f000 fafe 	bl	8016134 <RTC_ExitInitMode>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	22ff      	movs	r2, #255	; 0xff
 8015b42:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8015b44:	7cfb      	ldrb	r3, [r7, #19]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d103      	bne.n	8015b52 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2200      	movs	r2, #0
 8015b56:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8015b5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	371c      	adds	r7, #28
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd90      	pop	{r4, r7, pc}

08015b64 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b086      	sub	sp, #24
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	60f8      	str	r0, [r7, #12]
 8015b6c:	60b9      	str	r1, [r7, #8]
 8015b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015b7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015b7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	0c1b      	lsrs	r3, r3, #16
 8015b84:	b2da      	uxtb	r2, r3
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	0a1b      	lsrs	r3, r3, #8
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	f003 031f 	and.w	r3, r3, #31
 8015b94:	b2da      	uxtb	r2, r3
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ba2:	b2da      	uxtb	r2, r3
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	0b5b      	lsrs	r3, r3, #13
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	f003 0307 	and.w	r3, r3, #7
 8015bb2:	b2da      	uxtb	r2, r3
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d11a      	bne.n	8015bf4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	78db      	ldrb	r3, [r3, #3]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f000 fb14 	bl	80161f0 <RTC_Bcd2ToByte>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	461a      	mov	r2, r3
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	785b      	ldrb	r3, [r3, #1]
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f000 fb0b 	bl	80161f0 <RTC_Bcd2ToByte>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	461a      	mov	r2, r3
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	789b      	ldrb	r3, [r3, #2]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 fb02 	bl	80161f0 <RTC_Bcd2ToByte>
 8015bec:	4603      	mov	r3, r0
 8015bee:	461a      	mov	r2, r3
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3718      	adds	r7, #24
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
	...

08015c00 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8015c00:	b590      	push	{r4, r7, lr}
 8015c02:	b089      	sub	sp, #36	; 0x24
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	60f8      	str	r0, [r7, #12]
 8015c08:	60b9      	str	r1, [r7, #8]
 8015c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d101      	bne.n	8015c1a <HAL_RTC_SetAlarm_IT+0x1a>
 8015c16:	2302      	movs	r3, #2
 8015c18:	e127      	b.n	8015e6a <HAL_RTC_SetAlarm_IT+0x26a>
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2202      	movs	r2, #2
 8015c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d137      	bne.n	8015ca0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	689b      	ldr	r3, [r3, #8]
 8015c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d102      	bne.n	8015c44 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	2200      	movs	r2, #0
 8015c42:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	781b      	ldrb	r3, [r3, #0]
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f000 fab1 	bl	80161b0 <RTC_ByteToBcd2>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	785b      	ldrb	r3, [r3, #1]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f000 faaa 	bl	80161b0 <RTC_ByteToBcd2>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015c60:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	789b      	ldrb	r3, [r3, #2]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f000 faa2 	bl	80161b0 <RTC_ByteToBcd2>
 8015c6c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015c6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	78db      	ldrb	r3, [r3, #3]
 8015c76:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8015c78:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015c82:	4618      	mov	r0, r3
 8015c84:	f000 fa94 	bl	80161b0 <RTC_ByteToBcd2>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015c8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8015c94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	61fb      	str	r3, [r7, #28]
 8015c9e:	e023      	b.n	8015ce8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	689b      	ldr	r3, [r3, #8]
 8015ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d102      	bne.n	8015cb4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	785b      	ldrb	r3, [r3, #1]
 8015cbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015cc0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015cc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	78db      	ldrb	r3, [r3, #3]
 8015ccc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8015cce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015cd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015cd8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8015cde:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015ce4:	4313      	orrs	r3, r2
 8015ce6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	685a      	ldr	r2, [r3, #4]
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	69db      	ldr	r3, [r3, #28]
 8015cf0:	4313      	orrs	r3, r2
 8015cf2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	22ca      	movs	r2, #202	; 0xca
 8015cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2253      	movs	r2, #83	; 0x53
 8015d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d0c:	d14a      	bne.n	8015da4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	689a      	ldr	r2, [r3, #8]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015d1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	b2da      	uxtb	r2, r3
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8015d2e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8015d30:	f7fc fe78 	bl	8012a24 <HAL_GetTick>
 8015d34:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8015d36:	e015      	b.n	8015d64 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015d38:	f7fc fe74 	bl	8012a24 <HAL_GetTick>
 8015d3c:	4602      	mov	r2, r0
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015d46:	d90d      	bls.n	8015d64 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	22ff      	movs	r2, #255	; 0xff
 8015d4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2203      	movs	r2, #3
 8015d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8015d60:	2303      	movs	r3, #3
 8015d62:	e082      	b.n	8015e6a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	68db      	ldr	r3, [r3, #12]
 8015d6a:	f003 0301 	and.w	r3, r3, #1
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d0e2      	beq.n	8015d38 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	69fa      	ldr	r2, [r7, #28]
 8015d78:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	69ba      	ldr	r2, [r7, #24]
 8015d80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	689a      	ldr	r2, [r3, #8]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015d90:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	689a      	ldr	r2, [r3, #8]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015da0:	609a      	str	r2, [r3, #8]
 8015da2:	e049      	b.n	8015e38 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	689a      	ldr	r2, [r3, #8]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8015db2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	b2da      	uxtb	r2, r3
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8015dc4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8015dc6:	f7fc fe2d 	bl	8012a24 <HAL_GetTick>
 8015dca:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8015dcc:	e015      	b.n	8015dfa <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015dce:	f7fc fe29 	bl	8012a24 <HAL_GetTick>
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015ddc:	d90d      	bls.n	8015dfa <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	22ff      	movs	r2, #255	; 0xff
 8015de4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2203      	movs	r2, #3
 8015dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2200      	movs	r2, #0
 8015df2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8015df6:	2303      	movs	r3, #3
 8015df8:	e037      	b.n	8015e6a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	f003 0302 	and.w	r3, r3, #2
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d0e2      	beq.n	8015dce <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	69fa      	ldr	r2, [r7, #28]
 8015e0e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	69ba      	ldr	r2, [r7, #24]
 8015e16:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	689a      	ldr	r2, [r3, #8]
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015e26:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	689a      	ldr	r2, [r3, #8]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015e36:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8015e38:	4b0e      	ldr	r3, [pc, #56]	; (8015e74 <HAL_RTC_SetAlarm_IT+0x274>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	4a0d      	ldr	r2, [pc, #52]	; (8015e74 <HAL_RTC_SetAlarm_IT+0x274>)
 8015e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015e42:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8015e44:	4b0b      	ldr	r3, [pc, #44]	; (8015e74 <HAL_RTC_SetAlarm_IT+0x274>)
 8015e46:	689b      	ldr	r3, [r3, #8]
 8015e48:	4a0a      	ldr	r2, [pc, #40]	; (8015e74 <HAL_RTC_SetAlarm_IT+0x274>)
 8015e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015e4e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	22ff      	movs	r2, #255	; 0xff
 8015e56:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	2201      	movs	r2, #1
 8015e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2200      	movs	r2, #0
 8015e64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8015e68:	2300      	movs	r3, #0
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3724      	adds	r7, #36	; 0x24
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd90      	pop	{r4, r7, pc}
 8015e72:	bf00      	nop
 8015e74:	40010400 	.word	0x40010400

08015e78 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b086      	sub	sp, #24
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e8c:	d143      	bne.n	8015f16 <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015e94:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	69db      	ldr	r3, [r3, #28]
 8015e9c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ea4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015ea8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	0c1b      	lsrs	r3, r3, #16
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015eb4:	b2da      	uxtb	r2, r3
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	0a1b      	lsrs	r3, r3, #8
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ec4:	b2da      	uxtb	r2, r3
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ed2:	b2da      	uxtb	r2, r3
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	0d9b      	lsrs	r3, r3, #22
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	f003 0301 	and.w	r3, r3, #1
 8015ee2:	b2da      	uxtb	r2, r3
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	693a      	ldr	r2, [r7, #16]
 8015eec:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	0e1b      	lsrs	r3, r3, #24
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ef8:	b2da      	uxtb	r2, r3
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	615a      	str	r2, [r3, #20]
 8015f14:	e042      	b.n	8015f9c <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f1c:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	6a1b      	ldr	r3, [r3, #32]
 8015f24:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015f30:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	0c1b      	lsrs	r3, r3, #16
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f3c:	b2da      	uxtb	r2, r3
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	0a1b      	lsrs	r3, r3, #8
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f4c:	b2da      	uxtb	r2, r3
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f5a:	b2da      	uxtb	r2, r3
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	0d9b      	lsrs	r3, r3, #22
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	f003 0301 	and.w	r3, r3, #1
 8015f6a:	b2da      	uxtb	r2, r3
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	693a      	ldr	r2, [r7, #16]
 8015f74:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	0e1b      	lsrs	r3, r3, #24
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f80:	b2da      	uxtb	r2, r3
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d125      	bne.n	8015fee <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 f922 	bl	80161f0 <RTC_Bcd2ToByte>
 8015fac:	4603      	mov	r3, r0
 8015fae:	461a      	mov	r2, r3
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	785b      	ldrb	r3, [r3, #1]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f000 f919 	bl	80161f0 <RTC_Bcd2ToByte>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	789b      	ldrb	r3, [r3, #2]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f000 f910 	bl	80161f0 <RTC_Bcd2ToByte>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f000 f906 	bl	80161f0 <RTC_Bcd2ToByte>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8015fee:	2300      	movs	r3, #0
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3718      	adds	r7, #24
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8016000:	4b1f      	ldr	r3, [pc, #124]	; (8016080 <HAL_RTC_AlarmIRQHandler+0x88>)
 8016002:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016006:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	689b      	ldr	r3, [r3, #8]
 801600e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016012:	2b00      	cmp	r3, #0
 8016014:	d012      	beq.n	801603c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016020:	2b00      	cmp	r3, #0
 8016022:	d00b      	beq.n	801603c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	68db      	ldr	r3, [r3, #12]
 801602a:	b2da      	uxtb	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8016034:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f7f4 fe30 	bl	800ac9c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016046:	2b00      	cmp	r3, #0
 8016048:	d012      	beq.n	8016070 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	68db      	ldr	r3, [r3, #12]
 8016050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016054:	2b00      	cmp	r3, #0
 8016056:	d00b      	beq.n	8016070 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	b2da      	uxtb	r2, r3
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	f462 7220 	orn	r2, r2, #640	; 0x280
 8016068:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7f4 fe26 	bl	800acbc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2201      	movs	r2, #1
 8016074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016078:	bf00      	nop
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	40010400 	.word	0x40010400

08016084 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	4a0d      	ldr	r2, [pc, #52]	; (80160c8 <HAL_RTC_WaitForSynchro+0x44>)
 8016092:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8016094:	f7fc fcc6 	bl	8012a24 <HAL_GetTick>
 8016098:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801609a:	e009      	b.n	80160b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801609c:	f7fc fcc2 	bl	8012a24 <HAL_GetTick>
 80160a0:	4602      	mov	r2, r0
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	1ad3      	subs	r3, r2, r3
 80160a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80160aa:	d901      	bls.n	80160b0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80160ac:	2303      	movs	r3, #3
 80160ae:	e007      	b.n	80160c0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	68db      	ldr	r3, [r3, #12]
 80160b6:	f003 0320 	and.w	r3, r3, #32
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d0ee      	beq.n	801609c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80160be:	2300      	movs	r3, #0
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3710      	adds	r7, #16
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}
 80160c8:	0003ff5f 	.word	0x0003ff5f

080160cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d120      	bne.n	8016128 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f04f 32ff 	mov.w	r2, #4294967295
 80160ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80160f0:	f7fc fc98 	bl	8012a24 <HAL_GetTick>
 80160f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80160f6:	e00d      	b.n	8016114 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80160f8:	f7fc fc94 	bl	8012a24 <HAL_GetTick>
 80160fc:	4602      	mov	r2, r0
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016106:	d905      	bls.n	8016114 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8016108:	2303      	movs	r3, #3
 801610a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2203      	movs	r2, #3
 8016110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801611e:	2b00      	cmp	r3, #0
 8016120:	d102      	bne.n	8016128 <RTC_EnterInitMode+0x5c>
 8016122:	7bfb      	ldrb	r3, [r7, #15]
 8016124:	2b03      	cmp	r3, #3
 8016126:	d1e7      	bne.n	80160f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8016128:	7bfb      	ldrb	r3, [r7, #15]
}
 801612a:	4618      	mov	r0, r3
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
	...

08016134 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b084      	sub	sp, #16
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801613c:	2300      	movs	r3, #0
 801613e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8016140:	4b1a      	ldr	r3, [pc, #104]	; (80161ac <RTC_ExitInitMode+0x78>)
 8016142:	68db      	ldr	r3, [r3, #12]
 8016144:	4a19      	ldr	r2, [pc, #100]	; (80161ac <RTC_ExitInitMode+0x78>)
 8016146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801614a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801614c:	4b17      	ldr	r3, [pc, #92]	; (80161ac <RTC_ExitInitMode+0x78>)
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	f003 0320 	and.w	r3, r3, #32
 8016154:	2b00      	cmp	r3, #0
 8016156:	d10c      	bne.n	8016172 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f7ff ff93 	bl	8016084 <HAL_RTC_WaitForSynchro>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d01e      	beq.n	80161a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2203      	movs	r2, #3
 8016168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801616c:	2303      	movs	r3, #3
 801616e:	73fb      	strb	r3, [r7, #15]
 8016170:	e017      	b.n	80161a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8016172:	4b0e      	ldr	r3, [pc, #56]	; (80161ac <RTC_ExitInitMode+0x78>)
 8016174:	689b      	ldr	r3, [r3, #8]
 8016176:	4a0d      	ldr	r2, [pc, #52]	; (80161ac <RTC_ExitInitMode+0x78>)
 8016178:	f023 0320 	bic.w	r3, r3, #32
 801617c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7ff ff80 	bl	8016084 <HAL_RTC_WaitForSynchro>
 8016184:	4603      	mov	r3, r0
 8016186:	2b00      	cmp	r3, #0
 8016188:	d005      	beq.n	8016196 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2203      	movs	r2, #3
 801618e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8016192:	2303      	movs	r3, #3
 8016194:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8016196:	4b05      	ldr	r3, [pc, #20]	; (80161ac <RTC_ExitInitMode+0x78>)
 8016198:	689b      	ldr	r3, [r3, #8]
 801619a:	4a04      	ldr	r2, [pc, #16]	; (80161ac <RTC_ExitInitMode+0x78>)
 801619c:	f043 0320 	orr.w	r3, r3, #32
 80161a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80161a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3710      	adds	r7, #16
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	40002800 	.word	0x40002800

080161b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80161b0:	b480      	push	{r7}
 80161b2:	b085      	sub	sp, #20
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	4603      	mov	r3, r0
 80161b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80161ba:	2300      	movs	r3, #0
 80161bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80161be:	79fb      	ldrb	r3, [r7, #7]
 80161c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80161c2:	e005      	b.n	80161d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	3301      	adds	r3, #1
 80161c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80161ca:	7afb      	ldrb	r3, [r7, #11]
 80161cc:	3b0a      	subs	r3, #10
 80161ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80161d0:	7afb      	ldrb	r3, [r7, #11]
 80161d2:	2b09      	cmp	r3, #9
 80161d4:	d8f6      	bhi.n	80161c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	011b      	lsls	r3, r3, #4
 80161dc:	b2da      	uxtb	r2, r3
 80161de:	7afb      	ldrb	r3, [r7, #11]
 80161e0:	4313      	orrs	r3, r2
 80161e2:	b2db      	uxtb	r3, r3
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3714      	adds	r7, #20
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr

080161f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80161f0:	b480      	push	{r7}
 80161f2:	b085      	sub	sp, #20
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	4603      	mov	r3, r0
 80161f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80161fa:	79fb      	ldrb	r3, [r7, #7]
 80161fc:	091b      	lsrs	r3, r3, #4
 80161fe:	b2db      	uxtb	r3, r3
 8016200:	461a      	mov	r2, r3
 8016202:	0092      	lsls	r2, r2, #2
 8016204:	4413      	add	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	f003 030f 	and.w	r3, r3, #15
 8016210:	b2da      	uxtb	r2, r3
 8016212:	7bfb      	ldrb	r3, [r7, #15]
 8016214:	4413      	add	r3, r2
 8016216:	b2db      	uxtb	r3, r3
}
 8016218:	4618      	mov	r0, r3
 801621a:	3714      	adds	r7, #20
 801621c:	46bd      	mov	sp, r7
 801621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016222:	4770      	bx	lr

08016224 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b086      	sub	sp, #24
 8016228:	af00      	add	r7, sp, #0
 801622a:	60f8      	str	r0, [r7, #12]
 801622c:	60b9      	str	r1, [r7, #8]
 801622e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016236:	2b01      	cmp	r3, #1
 8016238:	d101      	bne.n	801623e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 801623a:	2302      	movs	r3, #2
 801623c:	e07f      	b.n	801633e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2201      	movs	r2, #1
 8016242:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2202      	movs	r2, #2
 801624a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	22ca      	movs	r2, #202	; 0xca
 8016254:	625a      	str	r2, [r3, #36]	; 0x24
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2253      	movs	r2, #83	; 0x53
 801625c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	689a      	ldr	r2, [r3, #8]
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801626c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	b2da      	uxtb	r2, r3
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801627e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801628a:	2b00      	cmp	r3, #0
 801628c:	d120      	bne.n	80162d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 801628e:	f7fc fbc9 	bl	8012a24 <HAL_GetTick>
 8016292:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8016294:	e015      	b.n	80162c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016296:	f7fc fbc5 	bl	8012a24 <HAL_GetTick>
 801629a:	4602      	mov	r2, r0
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	1ad3      	subs	r3, r2, r3
 80162a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80162a4:	d90d      	bls.n	80162c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	22ff      	movs	r2, #255	; 0xff
 80162ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2203      	movs	r2, #3
 80162b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2200      	movs	r2, #0
 80162ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80162be:	2303      	movs	r3, #3
 80162c0:	e03d      	b.n	801633e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	f003 0304 	and.w	r3, r3, #4
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d0e2      	beq.n	8016296 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68ba      	ldr	r2, [r7, #8]
 80162d6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	f023 0107 	bic.w	r1, r3, #7
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	430a      	orrs	r2, r1
 80162ea:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80162ec:	4b16      	ldr	r3, [pc, #88]	; (8016348 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	4a15      	ldr	r2, [pc, #84]	; (8016348 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80162f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80162f6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80162f8:	4b13      	ldr	r3, [pc, #76]	; (8016348 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80162fa:	689b      	ldr	r3, [r3, #8]
 80162fc:	4a12      	ldr	r2, [pc, #72]	; (8016348 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80162fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016302:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	689a      	ldr	r2, [r3, #8]
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016312:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	689a      	ldr	r2, [r3, #8]
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016322:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	22ff      	movs	r2, #255	; 0xff
 801632a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	2201      	movs	r2, #1
 8016330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	2200      	movs	r2, #0
 8016338:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801633c:	2300      	movs	r3, #0
}
 801633e:	4618      	mov	r0, r3
 8016340:	3718      	adds	r7, #24
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	40010400 	.word	0x40010400

0801634c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016354:	4b0f      	ldr	r3, [pc, #60]	; (8016394 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8016356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801635a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00b      	beq.n	8016382 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	b2da      	uxtb	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801637a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7f4 fca7 	bl	800acd0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 801638a:	bf00      	nop
 801638c:	3708      	adds	r7, #8
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	40010400 	.word	0x40010400

08016398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80163a6:	2301      	movs	r3, #1
 80163a8:	e040      	b.n	801642c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d106      	bne.n	80163c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2200      	movs	r2, #0
 80163b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f7fc f9b8 	bl	8012730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2224      	movs	r2, #36	; 0x24
 80163c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	681a      	ldr	r2, [r3, #0]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	f022 0201 	bic.w	r2, r2, #1
 80163d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d002      	beq.n	80163e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 fb0c 	bl	80169fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f000 f8af 	bl	8016548 <UART_SetConfig>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d101      	bne.n	80163f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80163f0:	2301      	movs	r3, #1
 80163f2:	e01b      	b.n	801642c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	685a      	ldr	r2, [r3, #4]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	689a      	ldr	r2, [r3, #8]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	f042 0201 	orr.w	r2, r2, #1
 8016422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f000 fb8b 	bl	8016b40 <UART_CheckIdleState>
 801642a:	4603      	mov	r3, r0
}
 801642c:	4618      	mov	r0, r3
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08a      	sub	sp, #40	; 0x28
 8016438:	af02      	add	r7, sp, #8
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	603b      	str	r3, [r7, #0]
 8016440:	4613      	mov	r3, r2
 8016442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016448:	2b20      	cmp	r3, #32
 801644a:	d178      	bne.n	801653e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d002      	beq.n	8016458 <HAL_UART_Transmit+0x24>
 8016452:	88fb      	ldrh	r3, [r7, #6]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d101      	bne.n	801645c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8016458:	2301      	movs	r3, #1
 801645a:	e071      	b.n	8016540 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2200      	movs	r2, #0
 8016460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2221      	movs	r2, #33	; 0x21
 8016468:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801646a:	f7fc fadb 	bl	8012a24 <HAL_GetTick>
 801646e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	88fa      	ldrh	r2, [r7, #6]
 8016474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	88fa      	ldrh	r2, [r7, #6]
 801647c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016488:	d108      	bne.n	801649c <HAL_UART_Transmit+0x68>
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	691b      	ldr	r3, [r3, #16]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d104      	bne.n	801649c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8016492:	2300      	movs	r3, #0
 8016494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	61bb      	str	r3, [r7, #24]
 801649a:	e003      	b.n	80164a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80164a0:	2300      	movs	r3, #0
 80164a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80164a4:	e030      	b.n	8016508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	2200      	movs	r2, #0
 80164ae:	2180      	movs	r1, #128	; 0x80
 80164b0:	68f8      	ldr	r0, [r7, #12]
 80164b2:	f000 fbed 	bl	8016c90 <UART_WaitOnFlagUntilTimeout>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d004      	beq.n	80164c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2220      	movs	r2, #32
 80164c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80164c2:	2303      	movs	r3, #3
 80164c4:	e03c      	b.n	8016540 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10b      	bne.n	80164e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80164cc:	69bb      	ldr	r3, [r7, #24]
 80164ce:	881a      	ldrh	r2, [r3, #0]
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80164d8:	b292      	uxth	r2, r2
 80164da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	3302      	adds	r3, #2
 80164e0:	61bb      	str	r3, [r7, #24]
 80164e2:	e008      	b.n	80164f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	781a      	ldrb	r2, [r3, #0]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	b292      	uxth	r2, r2
 80164ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	3301      	adds	r3, #1
 80164f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	3b01      	subs	r3, #1
 8016500:	b29a      	uxth	r2, r3
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801650e:	b29b      	uxth	r3, r3
 8016510:	2b00      	cmp	r3, #0
 8016512:	d1c8      	bne.n	80164a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	9300      	str	r3, [sp, #0]
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	2200      	movs	r2, #0
 801651c:	2140      	movs	r1, #64	; 0x40
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f000 fbb6 	bl	8016c90 <UART_WaitOnFlagUntilTimeout>
 8016524:	4603      	mov	r3, r0
 8016526:	2b00      	cmp	r3, #0
 8016528:	d004      	beq.n	8016534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	2220      	movs	r2, #32
 801652e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8016530:	2303      	movs	r3, #3
 8016532:	e005      	b.n	8016540 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2220      	movs	r2, #32
 8016538:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801653a:	2300      	movs	r3, #0
 801653c:	e000      	b.n	8016540 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801653e:	2302      	movs	r3, #2
  }
}
 8016540:	4618      	mov	r0, r3
 8016542:	3720      	adds	r7, #32
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801654c:	b08a      	sub	sp, #40	; 0x28
 801654e:	af00      	add	r7, sp, #0
 8016550:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016552:	2300      	movs	r3, #0
 8016554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	689a      	ldr	r2, [r3, #8]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	691b      	ldr	r3, [r3, #16]
 8016560:	431a      	orrs	r2, r3
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	695b      	ldr	r3, [r3, #20]
 8016566:	431a      	orrs	r2, r3
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	69db      	ldr	r3, [r3, #28]
 801656c:	4313      	orrs	r3, r2
 801656e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	4b9e      	ldr	r3, [pc, #632]	; (80167f0 <UART_SetConfig+0x2a8>)
 8016578:	4013      	ands	r3, r2
 801657a:	68fa      	ldr	r2, [r7, #12]
 801657c:	6812      	ldr	r2, [r2, #0]
 801657e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016580:	430b      	orrs	r3, r1
 8016582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	68da      	ldr	r2, [r3, #12]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	430a      	orrs	r2, r1
 8016598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	699b      	ldr	r3, [r3, #24]
 801659e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4a93      	ldr	r2, [pc, #588]	; (80167f4 <UART_SetConfig+0x2ac>)
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d004      	beq.n	80165b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	6a1b      	ldr	r3, [r3, #32]
 80165ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165b0:	4313      	orrs	r3, r2
 80165b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	689b      	ldr	r3, [r3, #8]
 80165ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165c4:	430a      	orrs	r2, r1
 80165c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	4a8a      	ldr	r2, [pc, #552]	; (80167f8 <UART_SetConfig+0x2b0>)
 80165ce:	4293      	cmp	r3, r2
 80165d0:	d126      	bne.n	8016620 <UART_SetConfig+0xd8>
 80165d2:	4b8a      	ldr	r3, [pc, #552]	; (80167fc <UART_SetConfig+0x2b4>)
 80165d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80165d8:	f003 0303 	and.w	r3, r3, #3
 80165dc:	2b03      	cmp	r3, #3
 80165de:	d81b      	bhi.n	8016618 <UART_SetConfig+0xd0>
 80165e0:	a201      	add	r2, pc, #4	; (adr r2, 80165e8 <UART_SetConfig+0xa0>)
 80165e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165e6:	bf00      	nop
 80165e8:	080165f9 	.word	0x080165f9
 80165ec:	08016609 	.word	0x08016609
 80165f0:	08016601 	.word	0x08016601
 80165f4:	08016611 	.word	0x08016611
 80165f8:	2301      	movs	r3, #1
 80165fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80165fe:	e0ab      	b.n	8016758 <UART_SetConfig+0x210>
 8016600:	2302      	movs	r3, #2
 8016602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016606:	e0a7      	b.n	8016758 <UART_SetConfig+0x210>
 8016608:	2304      	movs	r3, #4
 801660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801660e:	e0a3      	b.n	8016758 <UART_SetConfig+0x210>
 8016610:	2308      	movs	r3, #8
 8016612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016616:	e09f      	b.n	8016758 <UART_SetConfig+0x210>
 8016618:	2310      	movs	r3, #16
 801661a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801661e:	e09b      	b.n	8016758 <UART_SetConfig+0x210>
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4a76      	ldr	r2, [pc, #472]	; (8016800 <UART_SetConfig+0x2b8>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d138      	bne.n	801669c <UART_SetConfig+0x154>
 801662a:	4b74      	ldr	r3, [pc, #464]	; (80167fc <UART_SetConfig+0x2b4>)
 801662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016630:	f003 030c 	and.w	r3, r3, #12
 8016634:	2b0c      	cmp	r3, #12
 8016636:	d82d      	bhi.n	8016694 <UART_SetConfig+0x14c>
 8016638:	a201      	add	r2, pc, #4	; (adr r2, 8016640 <UART_SetConfig+0xf8>)
 801663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801663e:	bf00      	nop
 8016640:	08016675 	.word	0x08016675
 8016644:	08016695 	.word	0x08016695
 8016648:	08016695 	.word	0x08016695
 801664c:	08016695 	.word	0x08016695
 8016650:	08016685 	.word	0x08016685
 8016654:	08016695 	.word	0x08016695
 8016658:	08016695 	.word	0x08016695
 801665c:	08016695 	.word	0x08016695
 8016660:	0801667d 	.word	0x0801667d
 8016664:	08016695 	.word	0x08016695
 8016668:	08016695 	.word	0x08016695
 801666c:	08016695 	.word	0x08016695
 8016670:	0801668d 	.word	0x0801668d
 8016674:	2300      	movs	r3, #0
 8016676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801667a:	e06d      	b.n	8016758 <UART_SetConfig+0x210>
 801667c:	2302      	movs	r3, #2
 801667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016682:	e069      	b.n	8016758 <UART_SetConfig+0x210>
 8016684:	2304      	movs	r3, #4
 8016686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801668a:	e065      	b.n	8016758 <UART_SetConfig+0x210>
 801668c:	2308      	movs	r3, #8
 801668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016692:	e061      	b.n	8016758 <UART_SetConfig+0x210>
 8016694:	2310      	movs	r3, #16
 8016696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801669a:	e05d      	b.n	8016758 <UART_SetConfig+0x210>
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	4a58      	ldr	r2, [pc, #352]	; (8016804 <UART_SetConfig+0x2bc>)
 80166a2:	4293      	cmp	r3, r2
 80166a4:	d125      	bne.n	80166f2 <UART_SetConfig+0x1aa>
 80166a6:	4b55      	ldr	r3, [pc, #340]	; (80167fc <UART_SetConfig+0x2b4>)
 80166a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80166ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80166b0:	2b30      	cmp	r3, #48	; 0x30
 80166b2:	d016      	beq.n	80166e2 <UART_SetConfig+0x19a>
 80166b4:	2b30      	cmp	r3, #48	; 0x30
 80166b6:	d818      	bhi.n	80166ea <UART_SetConfig+0x1a2>
 80166b8:	2b20      	cmp	r3, #32
 80166ba:	d00a      	beq.n	80166d2 <UART_SetConfig+0x18a>
 80166bc:	2b20      	cmp	r3, #32
 80166be:	d814      	bhi.n	80166ea <UART_SetConfig+0x1a2>
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d002      	beq.n	80166ca <UART_SetConfig+0x182>
 80166c4:	2b10      	cmp	r3, #16
 80166c6:	d008      	beq.n	80166da <UART_SetConfig+0x192>
 80166c8:	e00f      	b.n	80166ea <UART_SetConfig+0x1a2>
 80166ca:	2300      	movs	r3, #0
 80166cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80166d0:	e042      	b.n	8016758 <UART_SetConfig+0x210>
 80166d2:	2302      	movs	r3, #2
 80166d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80166d8:	e03e      	b.n	8016758 <UART_SetConfig+0x210>
 80166da:	2304      	movs	r3, #4
 80166dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80166e0:	e03a      	b.n	8016758 <UART_SetConfig+0x210>
 80166e2:	2308      	movs	r3, #8
 80166e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80166e8:	e036      	b.n	8016758 <UART_SetConfig+0x210>
 80166ea:	2310      	movs	r3, #16
 80166ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80166f0:	e032      	b.n	8016758 <UART_SetConfig+0x210>
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4a3f      	ldr	r2, [pc, #252]	; (80167f4 <UART_SetConfig+0x2ac>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d12a      	bne.n	8016752 <UART_SetConfig+0x20a>
 80166fc:	4b3f      	ldr	r3, [pc, #252]	; (80167fc <UART_SetConfig+0x2b4>)
 80166fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016702:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801670a:	d01a      	beq.n	8016742 <UART_SetConfig+0x1fa>
 801670c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016710:	d81b      	bhi.n	801674a <UART_SetConfig+0x202>
 8016712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016716:	d00c      	beq.n	8016732 <UART_SetConfig+0x1ea>
 8016718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801671c:	d815      	bhi.n	801674a <UART_SetConfig+0x202>
 801671e:	2b00      	cmp	r3, #0
 8016720:	d003      	beq.n	801672a <UART_SetConfig+0x1e2>
 8016722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016726:	d008      	beq.n	801673a <UART_SetConfig+0x1f2>
 8016728:	e00f      	b.n	801674a <UART_SetConfig+0x202>
 801672a:	2300      	movs	r3, #0
 801672c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016730:	e012      	b.n	8016758 <UART_SetConfig+0x210>
 8016732:	2302      	movs	r3, #2
 8016734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016738:	e00e      	b.n	8016758 <UART_SetConfig+0x210>
 801673a:	2304      	movs	r3, #4
 801673c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016740:	e00a      	b.n	8016758 <UART_SetConfig+0x210>
 8016742:	2308      	movs	r3, #8
 8016744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016748:	e006      	b.n	8016758 <UART_SetConfig+0x210>
 801674a:	2310      	movs	r3, #16
 801674c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016750:	e002      	b.n	8016758 <UART_SetConfig+0x210>
 8016752:	2310      	movs	r3, #16
 8016754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4a25      	ldr	r2, [pc, #148]	; (80167f4 <UART_SetConfig+0x2ac>)
 801675e:	4293      	cmp	r3, r2
 8016760:	f040 808a 	bne.w	8016878 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016768:	2b08      	cmp	r3, #8
 801676a:	d824      	bhi.n	80167b6 <UART_SetConfig+0x26e>
 801676c:	a201      	add	r2, pc, #4	; (adr r2, 8016774 <UART_SetConfig+0x22c>)
 801676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016772:	bf00      	nop
 8016774:	08016799 	.word	0x08016799
 8016778:	080167b7 	.word	0x080167b7
 801677c:	080167a1 	.word	0x080167a1
 8016780:	080167b7 	.word	0x080167b7
 8016784:	080167a7 	.word	0x080167a7
 8016788:	080167b7 	.word	0x080167b7
 801678c:	080167b7 	.word	0x080167b7
 8016790:	080167b7 	.word	0x080167b7
 8016794:	080167af 	.word	0x080167af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016798:	f7fe fc14 	bl	8014fc4 <HAL_RCC_GetPCLK1Freq>
 801679c:	61f8      	str	r0, [r7, #28]
        break;
 801679e:	e010      	b.n	80167c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80167a0:	4b19      	ldr	r3, [pc, #100]	; (8016808 <UART_SetConfig+0x2c0>)
 80167a2:	61fb      	str	r3, [r7, #28]
        break;
 80167a4:	e00d      	b.n	80167c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80167a6:	f7fe fb77 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 80167aa:	61f8      	str	r0, [r7, #28]
        break;
 80167ac:	e009      	b.n	80167c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80167ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80167b2:	61fb      	str	r3, [r7, #28]
        break;
 80167b4:	e005      	b.n	80167c2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80167b6:	2300      	movs	r3, #0
 80167b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80167ba:	2301      	movs	r3, #1
 80167bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80167c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	f000 8109 	beq.w	80169dc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	685a      	ldr	r2, [r3, #4]
 80167ce:	4613      	mov	r3, r2
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	4413      	add	r3, r2
 80167d4:	69fa      	ldr	r2, [r7, #28]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d305      	bcc.n	80167e6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80167e0:	69fa      	ldr	r2, [r7, #28]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d912      	bls.n	801680c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80167e6:	2301      	movs	r3, #1
 80167e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80167ec:	e0f6      	b.n	80169dc <UART_SetConfig+0x494>
 80167ee:	bf00      	nop
 80167f0:	efff69f3 	.word	0xefff69f3
 80167f4:	40008000 	.word	0x40008000
 80167f8:	40013800 	.word	0x40013800
 80167fc:	40021000 	.word	0x40021000
 8016800:	40004400 	.word	0x40004400
 8016804:	40004800 	.word	0x40004800
 8016808:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	2200      	movs	r2, #0
 8016810:	461c      	mov	r4, r3
 8016812:	4615      	mov	r5, r2
 8016814:	f04f 0200 	mov.w	r2, #0
 8016818:	f04f 0300 	mov.w	r3, #0
 801681c:	022b      	lsls	r3, r5, #8
 801681e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8016822:	0222      	lsls	r2, r4, #8
 8016824:	68f9      	ldr	r1, [r7, #12]
 8016826:	6849      	ldr	r1, [r1, #4]
 8016828:	0849      	lsrs	r1, r1, #1
 801682a:	2000      	movs	r0, #0
 801682c:	4688      	mov	r8, r1
 801682e:	4681      	mov	r9, r0
 8016830:	eb12 0a08 	adds.w	sl, r2, r8
 8016834:	eb43 0b09 	adc.w	fp, r3, r9
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	2200      	movs	r2, #0
 801683e:	603b      	str	r3, [r7, #0]
 8016840:	607a      	str	r2, [r7, #4]
 8016842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016846:	4650      	mov	r0, sl
 8016848:	4659      	mov	r1, fp
 801684a:	f7ea f9b7 	bl	8000bbc <__aeabi_uldivmod>
 801684e:	4602      	mov	r2, r0
 8016850:	460b      	mov	r3, r1
 8016852:	4613      	mov	r3, r2
 8016854:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016856:	69bb      	ldr	r3, [r7, #24]
 8016858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801685c:	d308      	bcc.n	8016870 <UART_SetConfig+0x328>
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016864:	d204      	bcs.n	8016870 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	69ba      	ldr	r2, [r7, #24]
 801686c:	60da      	str	r2, [r3, #12]
 801686e:	e0b5      	b.n	80169dc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8016870:	2301      	movs	r3, #1
 8016872:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016876:	e0b1      	b.n	80169dc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	69db      	ldr	r3, [r3, #28]
 801687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016880:	d15d      	bne.n	801693e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8016882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016886:	2b08      	cmp	r3, #8
 8016888:	d827      	bhi.n	80168da <UART_SetConfig+0x392>
 801688a:	a201      	add	r2, pc, #4	; (adr r2, 8016890 <UART_SetConfig+0x348>)
 801688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016890:	080168b5 	.word	0x080168b5
 8016894:	080168bd 	.word	0x080168bd
 8016898:	080168c5 	.word	0x080168c5
 801689c:	080168db 	.word	0x080168db
 80168a0:	080168cb 	.word	0x080168cb
 80168a4:	080168db 	.word	0x080168db
 80168a8:	080168db 	.word	0x080168db
 80168ac:	080168db 	.word	0x080168db
 80168b0:	080168d3 	.word	0x080168d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80168b4:	f7fe fb86 	bl	8014fc4 <HAL_RCC_GetPCLK1Freq>
 80168b8:	61f8      	str	r0, [r7, #28]
        break;
 80168ba:	e014      	b.n	80168e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80168bc:	f7fe fb98 	bl	8014ff0 <HAL_RCC_GetPCLK2Freq>
 80168c0:	61f8      	str	r0, [r7, #28]
        break;
 80168c2:	e010      	b.n	80168e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80168c4:	4b4c      	ldr	r3, [pc, #304]	; (80169f8 <UART_SetConfig+0x4b0>)
 80168c6:	61fb      	str	r3, [r7, #28]
        break;
 80168c8:	e00d      	b.n	80168e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80168ca:	f7fe fae5 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 80168ce:	61f8      	str	r0, [r7, #28]
        break;
 80168d0:	e009      	b.n	80168e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80168d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80168d6:	61fb      	str	r3, [r7, #28]
        break;
 80168d8:	e005      	b.n	80168e6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80168da:	2300      	movs	r3, #0
 80168dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80168de:	2301      	movs	r3, #1
 80168e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80168e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80168e6:	69fb      	ldr	r3, [r7, #28]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d077      	beq.n	80169dc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	005a      	lsls	r2, r3, #1
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	085b      	lsrs	r3, r3, #1
 80168f6:	441a      	add	r2, r3
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8016900:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016902:	69bb      	ldr	r3, [r7, #24]
 8016904:	2b0f      	cmp	r3, #15
 8016906:	d916      	bls.n	8016936 <UART_SetConfig+0x3ee>
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801690e:	d212      	bcs.n	8016936 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016910:	69bb      	ldr	r3, [r7, #24]
 8016912:	b29b      	uxth	r3, r3
 8016914:	f023 030f 	bic.w	r3, r3, #15
 8016918:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	085b      	lsrs	r3, r3, #1
 801691e:	b29b      	uxth	r3, r3
 8016920:	f003 0307 	and.w	r3, r3, #7
 8016924:	b29a      	uxth	r2, r3
 8016926:	8afb      	ldrh	r3, [r7, #22]
 8016928:	4313      	orrs	r3, r2
 801692a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	8afa      	ldrh	r2, [r7, #22]
 8016932:	60da      	str	r2, [r3, #12]
 8016934:	e052      	b.n	80169dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8016936:	2301      	movs	r3, #1
 8016938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801693c:	e04e      	b.n	80169dc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801693e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016942:	2b08      	cmp	r3, #8
 8016944:	d827      	bhi.n	8016996 <UART_SetConfig+0x44e>
 8016946:	a201      	add	r2, pc, #4	; (adr r2, 801694c <UART_SetConfig+0x404>)
 8016948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694c:	08016971 	.word	0x08016971
 8016950:	08016979 	.word	0x08016979
 8016954:	08016981 	.word	0x08016981
 8016958:	08016997 	.word	0x08016997
 801695c:	08016987 	.word	0x08016987
 8016960:	08016997 	.word	0x08016997
 8016964:	08016997 	.word	0x08016997
 8016968:	08016997 	.word	0x08016997
 801696c:	0801698f 	.word	0x0801698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016970:	f7fe fb28 	bl	8014fc4 <HAL_RCC_GetPCLK1Freq>
 8016974:	61f8      	str	r0, [r7, #28]
        break;
 8016976:	e014      	b.n	80169a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016978:	f7fe fb3a 	bl	8014ff0 <HAL_RCC_GetPCLK2Freq>
 801697c:	61f8      	str	r0, [r7, #28]
        break;
 801697e:	e010      	b.n	80169a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016980:	4b1d      	ldr	r3, [pc, #116]	; (80169f8 <UART_SetConfig+0x4b0>)
 8016982:	61fb      	str	r3, [r7, #28]
        break;
 8016984:	e00d      	b.n	80169a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016986:	f7fe fa87 	bl	8014e98 <HAL_RCC_GetSysClockFreq>
 801698a:	61f8      	str	r0, [r7, #28]
        break;
 801698c:	e009      	b.n	80169a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016992:	61fb      	str	r3, [r7, #28]
        break;
 8016994:	e005      	b.n	80169a2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8016996:	2300      	movs	r3, #0
 8016998:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801699a:	2301      	movs	r3, #1
 801699c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80169a0:	bf00      	nop
    }

    if (pclk != 0U)
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d019      	beq.n	80169dc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	085a      	lsrs	r2, r3, #1
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	441a      	add	r2, r3
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	685b      	ldr	r3, [r3, #4]
 80169b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80169ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80169bc:	69bb      	ldr	r3, [r7, #24]
 80169be:	2b0f      	cmp	r3, #15
 80169c0:	d909      	bls.n	80169d6 <UART_SetConfig+0x48e>
 80169c2:	69bb      	ldr	r3, [r7, #24]
 80169c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169c8:	d205      	bcs.n	80169d6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80169ca:	69bb      	ldr	r3, [r7, #24]
 80169cc:	b29a      	uxth	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	60da      	str	r2, [r3, #12]
 80169d4:	e002      	b.n	80169dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80169d6:	2301      	movs	r3, #1
 80169d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	2200      	movs	r2, #0
 80169e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	2200      	movs	r2, #0
 80169e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80169e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3728      	adds	r7, #40	; 0x28
 80169f0:	46bd      	mov	sp, r7
 80169f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80169f6:	bf00      	nop
 80169f8:	00f42400 	.word	0x00f42400

080169fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a08:	f003 0308 	and.w	r3, r3, #8
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	685b      	ldr	r3, [r3, #4]
 8016a16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	430a      	orrs	r2, r1
 8016a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d00a      	beq.n	8016a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	685b      	ldr	r3, [r3, #4]
 8016a38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	430a      	orrs	r2, r1
 8016a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a4c:	f003 0302 	and.w	r3, r3, #2
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d00a      	beq.n	8016a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	430a      	orrs	r2, r1
 8016a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a6e:	f003 0304 	and.w	r3, r3, #4
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00a      	beq.n	8016a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	430a      	orrs	r2, r1
 8016a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a90:	f003 0310 	and.w	r3, r3, #16
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00a      	beq.n	8016aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	689b      	ldr	r3, [r3, #8]
 8016a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	430a      	orrs	r2, r1
 8016aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab2:	f003 0320 	and.w	r3, r3, #32
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00a      	beq.n	8016ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	689b      	ldr	r3, [r3, #8]
 8016ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	430a      	orrs	r2, r1
 8016ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d01a      	beq.n	8016b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	430a      	orrs	r2, r1
 8016af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016afa:	d10a      	bne.n	8016b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	685b      	ldr	r3, [r3, #4]
 8016b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	430a      	orrs	r2, r1
 8016b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d00a      	beq.n	8016b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	430a      	orrs	r2, r1
 8016b32:	605a      	str	r2, [r3, #4]
  }
}
 8016b34:	bf00      	nop
 8016b36:	370c      	adds	r7, #12
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3e:	4770      	bx	lr

08016b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b098      	sub	sp, #96	; 0x60
 8016b44:	af02      	add	r7, sp, #8
 8016b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016b50:	f7fb ff68 	bl	8012a24 <HAL_GetTick>
 8016b54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f003 0308 	and.w	r3, r3, #8
 8016b60:	2b08      	cmp	r3, #8
 8016b62:	d12e      	bne.n	8016bc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016b68:	9300      	str	r3, [sp, #0]
 8016b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f000 f88c 	bl	8016c90 <UART_WaitOnFlagUntilTimeout>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d021      	beq.n	8016bc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b86:	e853 3f00 	ldrex	r3, [r3]
 8016b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b92:	653b      	str	r3, [r7, #80]	; 0x50
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	461a      	mov	r2, r3
 8016b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8016b9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ba4:	e841 2300 	strex	r3, r2, [r1]
 8016ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d1e6      	bne.n	8016b7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2220      	movs	r2, #32
 8016bb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016bbe:	2303      	movs	r3, #3
 8016bc0:	e062      	b.n	8016c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f003 0304 	and.w	r3, r3, #4
 8016bcc:	2b04      	cmp	r3, #4
 8016bce:	d149      	bne.n	8016c64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016bd4:	9300      	str	r3, [sp, #0]
 8016bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bd8:	2200      	movs	r2, #0
 8016bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 f856 	bl	8016c90 <UART_WaitOnFlagUntilTimeout>
 8016be4:	4603      	mov	r3, r0
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d03c      	beq.n	8016c64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf2:	e853 3f00 	ldrex	r3, [r3]
 8016bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8016bf8:	6a3b      	ldr	r3, [r7, #32]
 8016bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	461a      	mov	r2, r3
 8016c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c08:	633b      	str	r3, [r7, #48]	; 0x30
 8016c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c10:	e841 2300 	strex	r3, r2, [r1]
 8016c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1e6      	bne.n	8016bea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	3308      	adds	r3, #8
 8016c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	e853 3f00 	ldrex	r3, [r3]
 8016c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	f023 0301 	bic.w	r3, r3, #1
 8016c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	3308      	adds	r3, #8
 8016c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c3c:	61fa      	str	r2, [r7, #28]
 8016c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c40:	69b9      	ldr	r1, [r7, #24]
 8016c42:	69fa      	ldr	r2, [r7, #28]
 8016c44:	e841 2300 	strex	r3, r2, [r1]
 8016c48:	617b      	str	r3, [r7, #20]
   return(result);
 8016c4a:	697b      	ldr	r3, [r7, #20]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d1e5      	bne.n	8016c1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2220      	movs	r2, #32
 8016c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016c60:	2303      	movs	r3, #3
 8016c62:	e011      	b.n	8016c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2220      	movs	r2, #32
 8016c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2220      	movs	r2, #32
 8016c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2200      	movs	r2, #0
 8016c76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8016c86:	2300      	movs	r3, #0
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3758      	adds	r7, #88	; 0x58
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b084      	sub	sp, #16
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	60f8      	str	r0, [r7, #12]
 8016c98:	60b9      	str	r1, [r7, #8]
 8016c9a:	603b      	str	r3, [r7, #0]
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016ca0:	e049      	b.n	8016d36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016ca2:	69bb      	ldr	r3, [r7, #24]
 8016ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ca8:	d045      	beq.n	8016d36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016caa:	f7fb febb 	bl	8012a24 <HAL_GetTick>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	1ad3      	subs	r3, r2, r3
 8016cb4:	69ba      	ldr	r2, [r7, #24]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d302      	bcc.n	8016cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8016cba:	69bb      	ldr	r3, [r7, #24]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d101      	bne.n	8016cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016cc0:	2303      	movs	r3, #3
 8016cc2:	e048      	b.n	8016d56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	f003 0304 	and.w	r3, r3, #4
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d031      	beq.n	8016d36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	69db      	ldr	r3, [r3, #28]
 8016cd8:	f003 0308 	and.w	r3, r3, #8
 8016cdc:	2b08      	cmp	r3, #8
 8016cde:	d110      	bne.n	8016d02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2208      	movs	r2, #8
 8016ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f000 f838 	bl	8016d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2208      	movs	r2, #8
 8016cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8016cfe:	2301      	movs	r3, #1
 8016d00:	e029      	b.n	8016d56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	69db      	ldr	r3, [r3, #28]
 8016d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016d10:	d111      	bne.n	8016d36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f000 f81e 	bl	8016d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	2220      	movs	r2, #32
 8016d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8016d32:	2303      	movs	r3, #3
 8016d34:	e00f      	b.n	8016d56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	69da      	ldr	r2, [r3, #28]
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	4013      	ands	r3, r2
 8016d40:	68ba      	ldr	r2, [r7, #8]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	bf0c      	ite	eq
 8016d46:	2301      	moveq	r3, #1
 8016d48:	2300      	movne	r3, #0
 8016d4a:	b2db      	uxtb	r3, r3
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	79fb      	ldrb	r3, [r7, #7]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d0a6      	beq.n	8016ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016d54:	2300      	movs	r3, #0
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}

08016d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016d5e:	b480      	push	{r7}
 8016d60:	b095      	sub	sp, #84	; 0x54
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d6e:	e853 3f00 	ldrex	r3, [r3]
 8016d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	461a      	mov	r2, r3
 8016d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d84:	643b      	str	r3, [r7, #64]	; 0x40
 8016d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016d8c:	e841 2300 	strex	r3, r2, [r1]
 8016d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d1e6      	bne.n	8016d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	3308      	adds	r3, #8
 8016d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016da0:	6a3b      	ldr	r3, [r7, #32]
 8016da2:	e853 3f00 	ldrex	r3, [r3]
 8016da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	f023 0301 	bic.w	r3, r3, #1
 8016dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	3308      	adds	r3, #8
 8016db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016dc0:	e841 2300 	strex	r3, r2, [r1]
 8016dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d1e5      	bne.n	8016d98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016dd0:	2b01      	cmp	r3, #1
 8016dd2:	d118      	bne.n	8016e06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	e853 3f00 	ldrex	r3, [r3]
 8016de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	f023 0310 	bic.w	r3, r3, #16
 8016de8:	647b      	str	r3, [r7, #68]	; 0x44
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	461a      	mov	r2, r3
 8016df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016df2:	61bb      	str	r3, [r7, #24]
 8016df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016df6:	6979      	ldr	r1, [r7, #20]
 8016df8:	69ba      	ldr	r2, [r7, #24]
 8016dfa:	e841 2300 	strex	r3, r2, [r1]
 8016dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d1e6      	bne.n	8016dd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2220      	movs	r2, #32
 8016e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2200      	movs	r2, #0
 8016e12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2200      	movs	r2, #0
 8016e18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8016e1a:	bf00      	nop
 8016e1c:	3754      	adds	r7, #84	; 0x54
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <_ZdaPv>:
 8016e26:	f000 bd19 	b.w	801785c <_ZdlPv>

08016e2a <__cxa_guard_acquire>:
 8016e2a:	6803      	ldr	r3, [r0, #0]
 8016e2c:	07db      	lsls	r3, r3, #31
 8016e2e:	d406      	bmi.n	8016e3e <__cxa_guard_acquire+0x14>
 8016e30:	7843      	ldrb	r3, [r0, #1]
 8016e32:	b103      	cbz	r3, 8016e36 <__cxa_guard_acquire+0xc>
 8016e34:	deff      	udf	#255	; 0xff
 8016e36:	2301      	movs	r3, #1
 8016e38:	7043      	strb	r3, [r0, #1]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	4770      	bx	lr
 8016e3e:	2000      	movs	r0, #0
 8016e40:	4770      	bx	lr

08016e42 <__cxa_guard_release>:
 8016e42:	2301      	movs	r3, #1
 8016e44:	6003      	str	r3, [r0, #0]
 8016e46:	4770      	bx	lr

08016e48 <_Znaj>:
 8016e48:	f000 bd0a 	b.w	8017860 <_Znwj>

08016e4c <_ZNSaIcEC1Ev>:
 8016e4c:	4770      	bx	lr

08016e4e <_ZNSaIcEC1ERKS_>:
 8016e4e:	4770      	bx	lr

08016e50 <_ZNSaIcED1Ev>:
 8016e50:	4770      	bx	lr

08016e52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8016e52:	b10a      	cbz	r2, 8016e58 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8016e54:	f000 bf4c 	b.w	8017cf0 <memcpy>
 8016e58:	4770      	bx	lr

08016e5a <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	460a      	mov	r2, r1
 8016e5e:	b111      	cbz	r1, 8016e66 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8016e60:	7819      	ldrb	r1, [r3, #0]
 8016e62:	f7e9 b9b5 	b.w	80001d0 <memchr>
 8016e66:	4608      	mov	r0, r1
 8016e68:	4770      	bx	lr
	...

08016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8016e6c:	b508      	push	{r3, lr}
 8016e6e:	680b      	ldr	r3, [r1, #0]
 8016e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e74:	d302      	bcc.n	8016e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8016e76:	480d      	ldr	r0, [pc, #52]	; (8016eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8016e78:	f000 fd09 	bl	801788e <_ZSt20__throw_length_errorPKc>
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	d90b      	bls.n	8016e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016e80:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016e84:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8016e88:	d206      	bcs.n	8016e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016e8a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016e8e:	bf2a      	itet	cs
 8016e90:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8016e94:	6008      	strcc	r0, [r1, #0]
 8016e96:	600b      	strcs	r3, [r1, #0]
 8016e98:	6808      	ldr	r0, [r1, #0]
 8016e9a:	3001      	adds	r0, #1
 8016e9c:	d501      	bpl.n	8016ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8016e9e:	f000 fcf0 	bl	8017882 <_ZSt17__throw_bad_allocv>
 8016ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016ea6:	f000 bcdb 	b.w	8017860 <_Znwj>
 8016eaa:	bf00      	nop
 8016eac:	08018c90 	.word	0x08018c90

08016eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8016eb0:	f850 3b08 	ldr.w	r3, [r0], #8
 8016eb4:	4283      	cmp	r3, r0
 8016eb6:	d002      	beq.n	8016ebe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f000 bccf 	b.w	801785c <_ZdlPv>
 8016ebe:	4770      	bx	lr

08016ec0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8016ec0:	b508      	push	{r3, lr}
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	4608      	mov	r0, r1
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4298      	cmp	r0, r3
 8016eca:	4611      	mov	r1, r2
 8016ecc:	d903      	bls.n	8016ed6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8016ece:	4602      	mov	r2, r0
 8016ed0:	4801      	ldr	r0, [pc, #4]	; (8016ed8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8016ed2:	f000 fcdf 	bl	8017894 <_ZSt24__throw_out_of_range_fmtPKcz>
 8016ed6:	bd08      	pop	{r3, pc}
 8016ed8:	08018ca8 	.word	0x08018ca8

08016edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8016edc:	6840      	ldr	r0, [r0, #4]
 8016ede:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8016ee2:	3901      	subs	r1, #1
 8016ee4:	1a09      	subs	r1, r1, r0
 8016ee6:	4291      	cmp	r1, r2
 8016ee8:	b508      	push	{r3, lr}
 8016eea:	d202      	bcs.n	8016ef2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8016eec:	4618      	mov	r0, r3
 8016eee:	f000 fcce 	bl	801788e <_ZSt20__throw_length_errorPKc>
 8016ef2:	bd08      	pop	{r3, pc}

08016ef4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8016ef4:	6803      	ldr	r3, [r0, #0]
 8016ef6:	428b      	cmp	r3, r1
 8016ef8:	d806      	bhi.n	8016f08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8016efa:	6842      	ldr	r2, [r0, #4]
 8016efc:	4413      	add	r3, r2
 8016efe:	4299      	cmp	r1, r3
 8016f00:	bf94      	ite	ls
 8016f02:	2000      	movls	r0, #0
 8016f04:	2001      	movhi	r0, #1
 8016f06:	4770      	bx	lr
 8016f08:	2001      	movs	r0, #1
 8016f0a:	4770      	bx	lr

08016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8016f0c:	2a01      	cmp	r2, #1
 8016f0e:	b410      	push	{r4}
 8016f10:	d104      	bne.n	8016f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8016f12:	780a      	ldrb	r2, [r1, #0]
 8016f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f18:	7002      	strb	r2, [r0, #0]
 8016f1a:	4770      	bx	lr
 8016f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f20:	f7ff bf97 	b.w	8016e52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8016f24:	2a01      	cmp	r2, #1
 8016f26:	b430      	push	{r4, r5}
 8016f28:	d103      	bne.n	8016f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8016f2a:	780b      	ldrb	r3, [r1, #0]
 8016f2c:	7003      	strb	r3, [r0, #0]
 8016f2e:	bc30      	pop	{r4, r5}
 8016f30:	4770      	bx	lr
 8016f32:	2a00      	cmp	r2, #0
 8016f34:	d0fb      	beq.n	8016f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8016f36:	bc30      	pop	{r4, r5}
 8016f38:	f000 be38 	b.w	8017bac <memmove>

08016f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	2b01      	cmp	r3, #1
 8016f40:	b410      	push	{r4}
 8016f42:	4611      	mov	r1, r2
 8016f44:	4604      	mov	r4, r0
 8016f46:	d103      	bne.n	8016f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8016f48:	7022      	strb	r2, [r4, #0]
 8016f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f4e:	4770      	bx	lr
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d0fa      	beq.n	8016f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8016f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f58:	461a      	mov	r2, r3
 8016f5a:	f000 be41 	b.w	8017be0 <memset>

08016f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8016f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f60:	290f      	cmp	r1, #15
 8016f62:	4604      	mov	r4, r0
 8016f64:	9101      	str	r1, [sp, #4]
 8016f66:	4615      	mov	r5, r2
 8016f68:	d906      	bls.n	8016f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	a901      	add	r1, sp, #4
 8016f6e:	f7ff ff7d 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016f72:	9b01      	ldr	r3, [sp, #4]
 8016f74:	6020      	str	r0, [r4, #0]
 8016f76:	60a3      	str	r3, [r4, #8]
 8016f78:	9901      	ldr	r1, [sp, #4]
 8016f7a:	b119      	cbz	r1, 8016f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8016f7c:	6820      	ldr	r0, [r4, #0]
 8016f7e:	462a      	mov	r2, r5
 8016f80:	f7ff ffdc 	bl	8016f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8016f84:	9b01      	ldr	r3, [sp, #4]
 8016f86:	6822      	ldr	r2, [r4, #0]
 8016f88:	6063      	str	r3, [r4, #4]
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	54d1      	strb	r1, [r2, r3]
 8016f8e:	b003      	add	sp, #12
 8016f90:	bd30      	pop	{r4, r5, pc}

08016f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8016f92:	b508      	push	{r3, lr}
 8016f94:	1a52      	subs	r2, r2, r1
 8016f96:	f7ff ffb9 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016f9a:	bd08      	pop	{r3, pc}

08016f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8016f9c:	b508      	push	{r3, lr}
 8016f9e:	1a52      	subs	r2, r2, r1
 8016fa0:	f7ff ffb4 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016fa4:	bd08      	pop	{r3, pc}

08016fa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8016fa6:	4288      	cmp	r0, r1
 8016fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016faa:	4604      	mov	r4, r0
 8016fac:	460e      	mov	r6, r1
 8016fae:	d01e      	beq.n	8016fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	684d      	ldr	r5, [r1, #4]
 8016fb4:	f853 2b08 	ldr.w	r2, [r3], #8
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	bf14      	ite	ne
 8016fbc:	6882      	ldrne	r2, [r0, #8]
 8016fbe:	220f      	moveq	r2, #15
 8016fc0:	42aa      	cmp	r2, r5
 8016fc2:	d20a      	bcs.n	8016fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8016fc4:	a901      	add	r1, sp, #4
 8016fc6:	9501      	str	r5, [sp, #4]
 8016fc8:	f7ff ff50 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016fcc:	4607      	mov	r7, r0
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f7ff ff6e 	bl	8016eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016fd4:	9b01      	ldr	r3, [sp, #4]
 8016fd6:	6027      	str	r7, [r4, #0]
 8016fd8:	60a3      	str	r3, [r4, #8]
 8016fda:	b125      	cbz	r5, 8016fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8016fdc:	6831      	ldr	r1, [r6, #0]
 8016fde:	6820      	ldr	r0, [r4, #0]
 8016fe0:	462a      	mov	r2, r5
 8016fe2:	f7ff ff93 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	6065      	str	r5, [r4, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	555a      	strb	r2, [r3, r5]
 8016fee:	b003      	add	sp, #12
 8016ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8016ff2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ff6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016ff8:	461f      	mov	r7, r3
 8016ffa:	6843      	ldr	r3, [r0, #4]
 8016ffc:	eb01 0802 	add.w	r8, r1, r2
 8017000:	1ab2      	subs	r2, r6, r2
 8017002:	441a      	add	r2, r3
 8017004:	eba3 0908 	sub.w	r9, r3, r8
 8017008:	4603      	mov	r3, r0
 801700a:	9201      	str	r2, [sp, #4]
 801700c:	f853 2b08 	ldr.w	r2, [r3], #8
 8017010:	429a      	cmp	r2, r3
 8017012:	bf18      	it	ne
 8017014:	6882      	ldrne	r2, [r0, #8]
 8017016:	460d      	mov	r5, r1
 8017018:	bf08      	it	eq
 801701a:	220f      	moveq	r2, #15
 801701c:	a901      	add	r1, sp, #4
 801701e:	4604      	mov	r4, r0
 8017020:	f7ff ff24 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8017024:	4682      	mov	sl, r0
 8017026:	b11d      	cbz	r5, 8017030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8017028:	6821      	ldr	r1, [r4, #0]
 801702a:	462a      	mov	r2, r5
 801702c:	f7ff ff6e 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017030:	b137      	cbz	r7, 8017040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8017032:	b12e      	cbz	r6, 8017040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8017034:	4632      	mov	r2, r6
 8017036:	4639      	mov	r1, r7
 8017038:	eb0a 0005 	add.w	r0, sl, r5
 801703c:	f7ff ff66 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017040:	f1b9 0f00 	cmp.w	r9, #0
 8017044:	d007      	beq.n	8017056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8017046:	6821      	ldr	r1, [r4, #0]
 8017048:	4435      	add	r5, r6
 801704a:	464a      	mov	r2, r9
 801704c:	4441      	add	r1, r8
 801704e:	eb0a 0005 	add.w	r0, sl, r5
 8017052:	f7ff ff5b 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017056:	4620      	mov	r0, r4
 8017058:	f7ff ff2a 	bl	8016eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801705c:	9b01      	ldr	r3, [sp, #4]
 801705e:	f8c4 a000 	str.w	sl, [r4]
 8017062:	60a3      	str	r3, [r4, #8]
 8017064:	b002      	add	sp, #8
 8017066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801706a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 801706a:	b538      	push	{r3, r4, r5, lr}
 801706c:	4604      	mov	r4, r0
 801706e:	4615      	mov	r5, r2
 8017070:	4608      	mov	r0, r1
 8017072:	4411      	add	r1, r2
 8017074:	6862      	ldr	r2, [r4, #4]
 8017076:	1a52      	subs	r2, r2, r1
 8017078:	d005      	beq.n	8017086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 801707a:	b125      	cbz	r5, 8017086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 801707c:	6823      	ldr	r3, [r4, #0]
 801707e:	4419      	add	r1, r3
 8017080:	4418      	add	r0, r3
 8017082:	f7ff ff4f 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	6822      	ldr	r2, [r4, #0]
 801708a:	1b5b      	subs	r3, r3, r5
 801708c:	2100      	movs	r1, #0
 801708e:	6063      	str	r3, [r4, #4]
 8017090:	54d1      	strb	r1, [r2, r3]
 8017092:	bd38      	pop	{r3, r4, r5, pc}

08017094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8017094:	f100 0208 	add.w	r2, r0, #8
 8017098:	6002      	str	r2, [r0, #0]
 801709a:	2200      	movs	r2, #0
 801709c:	6042      	str	r2, [r0, #4]
 801709e:	7202      	strb	r2, [r0, #8]
 80170a0:	4770      	bx	lr

080170a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 80170a2:	f100 0208 	add.w	r2, r0, #8
 80170a6:	6002      	str	r2, [r0, #0]
 80170a8:	2200      	movs	r2, #0
 80170aa:	6042      	str	r2, [r0, #4]
 80170ac:	7202      	strb	r2, [r0, #8]
 80170ae:	4770      	bx	lr

080170b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 80170b0:	b510      	push	{r4, lr}
 80170b2:	f100 0308 	add.w	r3, r0, #8
 80170b6:	4604      	mov	r4, r0
 80170b8:	6003      	str	r3, [r0, #0]
 80170ba:	f7ff ff50 	bl	8016f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80170be:	4620      	mov	r0, r4
 80170c0:	bd10      	pop	{r4, pc}

080170c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80170c2:	b570      	push	{r4, r5, r6, lr}
 80170c4:	4604      	mov	r4, r0
 80170c6:	460e      	mov	r6, r1
 80170c8:	3008      	adds	r0, #8
 80170ca:	6020      	str	r0, [r4, #0]
 80170cc:	f856 3b08 	ldr.w	r3, [r6], #8
 80170d0:	429e      	cmp	r6, r3
 80170d2:	460d      	mov	r5, r1
 80170d4:	d10b      	bne.n	80170ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80170d6:	2210      	movs	r2, #16
 80170d8:	4631      	mov	r1, r6
 80170da:	f7ff feba 	bl	8016e52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80170de:	686b      	ldr	r3, [r5, #4]
 80170e0:	6063      	str	r3, [r4, #4]
 80170e2:	2300      	movs	r3, #0
 80170e4:	602e      	str	r6, [r5, #0]
 80170e6:	606b      	str	r3, [r5, #4]
 80170e8:	722b      	strb	r3, [r5, #8]
 80170ea:	4620      	mov	r0, r4
 80170ec:	bd70      	pop	{r4, r5, r6, pc}
 80170ee:	6023      	str	r3, [r4, #0]
 80170f0:	688b      	ldr	r3, [r1, #8]
 80170f2:	60a3      	str	r3, [r4, #8]
 80170f4:	e7f3      	b.n	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80170f6:	b510      	push	{r4, lr}
 80170f8:	4604      	mov	r4, r0
 80170fa:	f7ff fed9 	bl	8016eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80170fe:	4620      	mov	r0, r4
 8017100:	bd10      	pop	{r4, pc}

08017102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8017102:	b510      	push	{r4, lr}
 8017104:	4604      	mov	r4, r0
 8017106:	f7ff ff4e 	bl	8016fa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801710a:	4620      	mov	r0, r4
 801710c:	bd10      	pop	{r4, pc}

0801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801710e:	b570      	push	{r4, r5, r6, lr}
 8017110:	460c      	mov	r4, r1
 8017112:	f851 3b08 	ldr.w	r3, [r1], #8
 8017116:	4299      	cmp	r1, r3
 8017118:	4605      	mov	r5, r0
 801711a:	6800      	ldr	r0, [r0, #0]
 801711c:	d110      	bne.n	8017140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 801711e:	42a5      	cmp	r5, r4
 8017120:	d008      	beq.n	8017134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8017122:	6862      	ldr	r2, [r4, #4]
 8017124:	b10a      	cbz	r2, 801712a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 8017126:	f7ff fef1 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801712a:	6863      	ldr	r3, [r4, #4]
 801712c:	682a      	ldr	r2, [r5, #0]
 801712e:	606b      	str	r3, [r5, #4]
 8017130:	2100      	movs	r1, #0
 8017132:	54d1      	strb	r1, [r2, r3]
 8017134:	6822      	ldr	r2, [r4, #0]
 8017136:	2300      	movs	r3, #0
 8017138:	6063      	str	r3, [r4, #4]
 801713a:	7013      	strb	r3, [r2, #0]
 801713c:	4628      	mov	r0, r5
 801713e:	bd70      	pop	{r4, r5, r6, pc}
 8017140:	602b      	str	r3, [r5, #0]
 8017142:	f105 0608 	add.w	r6, r5, #8
 8017146:	6863      	ldr	r3, [r4, #4]
 8017148:	606b      	str	r3, [r5, #4]
 801714a:	42b0      	cmp	r0, r6
 801714c:	68a3      	ldr	r3, [r4, #8]
 801714e:	bf18      	it	ne
 8017150:	68aa      	ldrne	r2, [r5, #8]
 8017152:	60ab      	str	r3, [r5, #8]
 8017154:	bf08      	it	eq
 8017156:	2000      	moveq	r0, #0
 8017158:	b110      	cbz	r0, 8017160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 801715a:	6020      	str	r0, [r4, #0]
 801715c:	60a2      	str	r2, [r4, #8]
 801715e:	e7e9      	b.n	8017134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8017160:	6021      	str	r1, [r4, #0]
 8017162:	e7e7      	b.n	8017134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08017164 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8017164:	6800      	ldr	r0, [r0, #0]
 8017166:	4770      	bx	lr

08017168 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8017168:	e9d0 2000 	ldrd	r2, r0, [r0]
 801716c:	4410      	add	r0, r2
 801716e:	4770      	bx	lr

08017170 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8017170:	6840      	ldr	r0, [r0, #4]
 8017172:	4770      	bx	lr

08017174 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8017174:	6840      	ldr	r0, [r0, #4]
 8017176:	4770      	bx	lr

08017178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8017178:	4603      	mov	r3, r0
 801717a:	f853 2b08 	ldr.w	r2, [r3], #8
 801717e:	429a      	cmp	r2, r3
 8017180:	bf14      	ite	ne
 8017182:	6880      	ldrne	r0, [r0, #8]
 8017184:	200f      	moveq	r0, #15
 8017186:	4770      	bx	lr

08017188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8017188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801718a:	4603      	mov	r3, r0
 801718c:	9101      	str	r1, [sp, #4]
 801718e:	f853 2b08 	ldr.w	r2, [r3], #8
 8017192:	429a      	cmp	r2, r3
 8017194:	bf18      	it	ne
 8017196:	6882      	ldrne	r2, [r0, #8]
 8017198:	9b01      	ldr	r3, [sp, #4]
 801719a:	bf08      	it	eq
 801719c:	220f      	moveq	r2, #15
 801719e:	4293      	cmp	r3, r2
 80171a0:	4604      	mov	r4, r0
 80171a2:	d90e      	bls.n	80171c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 80171a4:	a901      	add	r1, sp, #4
 80171a6:	f7ff fe61 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80171aa:	6862      	ldr	r2, [r4, #4]
 80171ac:	6821      	ldr	r1, [r4, #0]
 80171ae:	3201      	adds	r2, #1
 80171b0:	4605      	mov	r5, r0
 80171b2:	f7ff feab 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7ff fe7a 	bl	8016eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80171bc:	9b01      	ldr	r3, [sp, #4]
 80171be:	6025      	str	r5, [r4, #0]
 80171c0:	60a3      	str	r3, [r4, #8]
 80171c2:	b003      	add	sp, #12
 80171c4:	bd30      	pop	{r4, r5, pc}

080171c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80171c6:	6802      	ldr	r2, [r0, #0]
 80171c8:	2300      	movs	r3, #0
 80171ca:	6043      	str	r3, [r0, #4]
 80171cc:	7013      	strb	r3, [r2, #0]
 80171ce:	4770      	bx	lr

080171d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80171d0:	6840      	ldr	r0, [r0, #4]
 80171d2:	fab0 f080 	clz	r0, r0
 80171d6:	0940      	lsrs	r0, r0, #5
 80171d8:	4770      	bx	lr

080171da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	4408      	add	r0, r1
 80171de:	4770      	bx	lr

080171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80171e0:	6800      	ldr	r0, [r0, #0]
 80171e2:	4408      	add	r0, r1
 80171e4:	4770      	bx	lr
	...

080171e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>:
 80171e8:	6842      	ldr	r2, [r0, #4]
 80171ea:	4291      	cmp	r1, r2
 80171ec:	b508      	push	{r3, lr}
 80171ee:	d302      	bcc.n	80171f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0xe>
 80171f0:	4802      	ldr	r0, [pc, #8]	; (80171fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0x14>)
 80171f2:	f000 fb4f 	bl	8017894 <_ZSt24__throw_out_of_range_fmtPKcz>
 80171f6:	6800      	ldr	r0, [r0, #0]
 80171f8:	4408      	add	r0, r1
 80171fa:	bd08      	pop	{r3, pc}
 80171fc:	08018cdf 	.word	0x08018cdf

08017200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 8017200:	6843      	ldr	r3, [r0, #4]
 8017202:	6800      	ldr	r0, [r0, #0]
 8017204:	3b01      	subs	r3, #1
 8017206:	4418      	add	r0, r3
 8017208:	4770      	bx	lr

0801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 801720a:	4603      	mov	r3, r0
 801720c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801720e:	f853 2b08 	ldr.w	r2, [r3], #8
 8017212:	6846      	ldr	r6, [r0, #4]
 8017214:	429a      	cmp	r2, r3
 8017216:	bf18      	it	ne
 8017218:	6883      	ldrne	r3, [r0, #8]
 801721a:	f106 0501 	add.w	r5, r6, #1
 801721e:	bf08      	it	eq
 8017220:	230f      	moveq	r3, #15
 8017222:	429d      	cmp	r5, r3
 8017224:	4604      	mov	r4, r0
 8017226:	460f      	mov	r7, r1
 8017228:	d906      	bls.n	8017238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 801722a:	2301      	movs	r3, #1
 801722c:	9300      	str	r3, [sp, #0]
 801722e:	2300      	movs	r3, #0
 8017230:	461a      	mov	r2, r3
 8017232:	4631      	mov	r1, r6
 8017234:	f7ff fedd 	bl	8016ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	559f      	strb	r7, [r3, r6]
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	6065      	str	r5, [r4, #4]
 8017240:	2200      	movs	r2, #0
 8017242:	555a      	strb	r2, [r3, r5]
 8017244:	b003      	add	sp, #12
 8017246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	f7ff ffdd 	bl	801720a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8017250:	4620      	mov	r0, r4
 8017252:	bd10      	pop	{r4, pc}

08017254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	4616      	mov	r6, r2
 8017258:	4a0c      	ldr	r2, [pc, #48]	; (801728c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 801725a:	4604      	mov	r4, r0
 801725c:	460d      	mov	r5, r1
 801725e:	f7ff fe2f 	bl	8016ec0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8017262:	1c73      	adds	r3, r6, #1
 8017264:	d105      	bne.n	8017272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 8017266:	6823      	ldr	r3, [r4, #0]
 8017268:	6065      	str	r5, [r4, #4]
 801726a:	2200      	movs	r2, #0
 801726c:	555a      	strb	r2, [r3, r5]
 801726e:	4620      	mov	r0, r4
 8017270:	bd70      	pop	{r4, r5, r6, pc}
 8017272:	2e00      	cmp	r6, #0
 8017274:	d0fb      	beq.n	801726e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8017276:	6862      	ldr	r2, [r4, #4]
 8017278:	1b52      	subs	r2, r2, r5
 801727a:	42b2      	cmp	r2, r6
 801727c:	bf28      	it	cs
 801727e:	4632      	movcs	r2, r6
 8017280:	4629      	mov	r1, r5
 8017282:	4620      	mov	r0, r4
 8017284:	f7ff fef1 	bl	801706a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8017288:	e7f1      	b.n	801726e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 801728a:	bf00      	nop
 801728c:	08018d23 	.word	0x08018d23

08017290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 8017290:	b508      	push	{r3, lr}
 8017292:	6841      	ldr	r1, [r0, #4]
 8017294:	2201      	movs	r2, #1
 8017296:	3901      	subs	r1, #1
 8017298:	f7ff fee7 	bl	801706a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 801729c:	bd08      	pop	{r3, pc}
	...

080172a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80172a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80172a4:	4616      	mov	r6, r2
 80172a6:	461d      	mov	r5, r3
 80172a8:	4604      	mov	r4, r0
 80172aa:	4b1c      	ldr	r3, [pc, #112]	; (801731c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 80172ac:	462a      	mov	r2, r5
 80172ae:	460f      	mov	r7, r1
 80172b0:	4631      	mov	r1, r6
 80172b2:	f7ff fe13 	bl	8016edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80172b6:	4623      	mov	r3, r4
 80172b8:	6862      	ldr	r2, [r4, #4]
 80172ba:	f853 0b08 	ldr.w	r0, [r3], #8
 80172be:	4298      	cmp	r0, r3
 80172c0:	bf18      	it	ne
 80172c2:	68a3      	ldrne	r3, [r4, #8]
 80172c4:	eba5 0806 	sub.w	r8, r5, r6
 80172c8:	4490      	add	r8, r2
 80172ca:	bf08      	it	eq
 80172cc:	230f      	moveq	r3, #15
 80172ce:	4543      	cmp	r3, r8
 80172d0:	d31b      	bcc.n	801730a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80172d2:	19f3      	adds	r3, r6, r7
 80172d4:	1ad2      	subs	r2, r2, r3
 80172d6:	d006      	beq.n	80172e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80172d8:	42ae      	cmp	r6, r5
 80172da:	d004      	beq.n	80172e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80172dc:	4438      	add	r0, r7
 80172de:	1981      	adds	r1, r0, r6
 80172e0:	4428      	add	r0, r5
 80172e2:	f7ff fe1f 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80172e6:	b135      	cbz	r5, 80172f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80172e8:	6820      	ldr	r0, [r4, #0]
 80172ea:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80172ee:	4629      	mov	r1, r5
 80172f0:	4438      	add	r0, r7
 80172f2:	f7ff fe23 	bl	8016f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80172fc:	2200      	movs	r2, #0
 80172fe:	4620      	mov	r0, r4
 8017300:	f803 2008 	strb.w	r2, [r3, r8]
 8017304:	b002      	add	sp, #8
 8017306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801730a:	9500      	str	r5, [sp, #0]
 801730c:	2300      	movs	r3, #0
 801730e:	4632      	mov	r2, r6
 8017310:	4639      	mov	r1, r7
 8017312:	4620      	mov	r0, r4
 8017314:	f7ff fe6d 	bl	8016ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8017318:	e7e5      	b.n	80172e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 801731a:	bf00      	nop
 801731c:	08018d37 	.word	0x08018d37

08017320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8017320:	b507      	push	{r0, r1, r2, lr}
 8017322:	9200      	str	r2, [sp, #0]
 8017324:	460b      	mov	r3, r1
 8017326:	2200      	movs	r2, #0
 8017328:	6841      	ldr	r1, [r0, #4]
 801732a:	f7ff ffb9 	bl	80172a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801732e:	b003      	add	sp, #12
 8017330:	f85d fb04 	ldr.w	pc, [sp], #4

08017334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8017334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801733a:	4614      	mov	r4, r2
 801733c:	4680      	mov	r8, r0
 801733e:	462a      	mov	r2, r5
 8017340:	4689      	mov	r9, r1
 8017342:	461f      	mov	r7, r3
 8017344:	4621      	mov	r1, r4
 8017346:	4b39      	ldr	r3, [pc, #228]	; (801742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8017348:	f7ff fdc8 	bl	8016edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801734c:	4642      	mov	r2, r8
 801734e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017352:	f852 6b08 	ldr.w	r6, [r2], #8
 8017356:	4296      	cmp	r6, r2
 8017358:	bf18      	it	ne
 801735a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 801735e:	eba5 0b04 	sub.w	fp, r5, r4
 8017362:	eb03 0a0b 	add.w	sl, r3, fp
 8017366:	bf08      	it	eq
 8017368:	220f      	moveq	r2, #15
 801736a:	4552      	cmp	r2, sl
 801736c:	d351      	bcc.n	8017412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 801736e:	444e      	add	r6, r9
 8017370:	4639      	mov	r1, r7
 8017372:	44a1      	add	r9, r4
 8017374:	4640      	mov	r0, r8
 8017376:	eba3 0909 	sub.w	r9, r3, r9
 801737a:	f7ff fdbb 	bl	8016ef4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801737e:	b180      	cbz	r0, 80173a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8017380:	f1b9 0f00 	cmp.w	r9, #0
 8017384:	d006      	beq.n	8017394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8017386:	42ac      	cmp	r4, r5
 8017388:	d004      	beq.n	8017394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801738a:	464a      	mov	r2, r9
 801738c:	1931      	adds	r1, r6, r4
 801738e:	1970      	adds	r0, r6, r5
 8017390:	f7ff fdc8 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8017394:	b315      	cbz	r5, 80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8017396:	462a      	mov	r2, r5
 8017398:	4639      	mov	r1, r7
 801739a:	4630      	mov	r0, r6
 801739c:	f7ff fdb6 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80173a0:	e01c      	b.n	80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80173a2:	b135      	cbz	r5, 80173b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80173a4:	42ac      	cmp	r4, r5
 80173a6:	d33c      	bcc.n	8017422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80173a8:	462a      	mov	r2, r5
 80173aa:	4639      	mov	r1, r7
 80173ac:	4630      	mov	r0, r6
 80173ae:	f7ff fdb9 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80173b2:	f1b9 0f00 	cmp.w	r9, #0
 80173b6:	d011      	beq.n	80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80173b8:	42ac      	cmp	r4, r5
 80173ba:	d00f      	beq.n	80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80173bc:	464a      	mov	r2, r9
 80173be:	1931      	adds	r1, r6, r4
 80173c0:	1970      	adds	r0, r6, r5
 80173c2:	f7ff fdaf 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80173c6:	42ac      	cmp	r4, r5
 80173c8:	d208      	bcs.n	80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80173ca:	4434      	add	r4, r6
 80173cc:	197b      	adds	r3, r7, r5
 80173ce:	429c      	cmp	r4, r3
 80173d0:	d30f      	bcc.n	80173f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80173d2:	462a      	mov	r2, r5
 80173d4:	4639      	mov	r1, r7
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7ff fda4 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80173dc:	f8d8 3000 	ldr.w	r3, [r8]
 80173e0:	f8c8 a004 	str.w	sl, [r8, #4]
 80173e4:	2200      	movs	r2, #0
 80173e6:	4640      	mov	r0, r8
 80173e8:	f803 200a 	strb.w	r2, [r3, sl]
 80173ec:	b003      	add	sp, #12
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	42bc      	cmp	r4, r7
 80173f4:	d803      	bhi.n	80173fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80173f6:	462a      	mov	r2, r5
 80173f8:	eb07 010b 	add.w	r1, r7, fp
 80173fc:	e7cd      	b.n	801739a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80173fe:	1be4      	subs	r4, r4, r7
 8017400:	4622      	mov	r2, r4
 8017402:	4639      	mov	r1, r7
 8017404:	4630      	mov	r0, r6
 8017406:	f7ff fd8d 	bl	8016f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801740a:	1b2a      	subs	r2, r5, r4
 801740c:	1971      	adds	r1, r6, r5
 801740e:	1930      	adds	r0, r6, r4
 8017410:	e7c4      	b.n	801739c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8017412:	9500      	str	r5, [sp, #0]
 8017414:	463b      	mov	r3, r7
 8017416:	4622      	mov	r2, r4
 8017418:	4649      	mov	r1, r9
 801741a:	4640      	mov	r0, r8
 801741c:	f7ff fde9 	bl	8016ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8017420:	e7dc      	b.n	80173dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8017422:	f1b9 0f00 	cmp.w	r9, #0
 8017426:	d0d0      	beq.n	80173ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8017428:	e7c8      	b.n	80173bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 801742a:	bf00      	nop
 801742c:	08018d6a 	.word	0x08018d6a

08017430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 8017430:	b507      	push	{r0, r1, r2, lr}
 8017432:	9200      	str	r2, [sp, #0]
 8017434:	460b      	mov	r3, r1
 8017436:	6842      	ldr	r2, [r0, #4]
 8017438:	2100      	movs	r1, #0
 801743a:	f7ff ff7b 	bl	8017334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801743e:	b003      	add	sp, #12
 8017440:	f85d fb04 	ldr.w	pc, [sp], #4

08017444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8017444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017446:	4604      	mov	r4, r0
 8017448:	4608      	mov	r0, r1
 801744a:	9103      	str	r1, [sp, #12]
 801744c:	f7e8 ff10 	bl	8000270 <strlen>
 8017450:	9b03      	ldr	r3, [sp, #12]
 8017452:	9000      	str	r0, [sp, #0]
 8017454:	6862      	ldr	r2, [r4, #4]
 8017456:	2100      	movs	r1, #0
 8017458:	4620      	mov	r0, r4
 801745a:	f7ff ff6b 	bl	8017334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801745e:	b004      	add	sp, #16
 8017460:	bd10      	pop	{r4, pc}

08017462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8017462:	b508      	push	{r3, lr}
 8017464:	f7ff ffee 	bl	8017444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8017468:	bd08      	pop	{r3, pc}
	...

0801746c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 801746c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801746e:	4604      	mov	r4, r0
 8017470:	4615      	mov	r5, r2
 8017472:	4a09      	ldr	r2, [pc, #36]	; (8017498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8017474:	9303      	str	r3, [sp, #12]
 8017476:	460e      	mov	r6, r1
 8017478:	f7ff fd22 	bl	8016ec0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801747c:	6862      	ldr	r2, [r4, #4]
 801747e:	9b03      	ldr	r3, [sp, #12]
 8017480:	1b92      	subs	r2, r2, r6
 8017482:	4601      	mov	r1, r0
 8017484:	42aa      	cmp	r2, r5
 8017486:	9808      	ldr	r0, [sp, #32]
 8017488:	9000      	str	r0, [sp, #0]
 801748a:	bf28      	it	cs
 801748c:	462a      	movcs	r2, r5
 801748e:	4620      	mov	r0, r4
 8017490:	f7ff ff50 	bl	8017334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8017494:	b004      	add	sp, #16
 8017496:	bd70      	pop	{r4, r5, r6, pc}
 8017498:	08018d54 	.word	0x08018d54

0801749c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 801749c:	b507      	push	{r0, r1, r2, lr}
 801749e:	6853      	ldr	r3, [r2, #4]
 80174a0:	9300      	str	r3, [sp, #0]
 80174a2:	6813      	ldr	r3, [r2, #0]
 80174a4:	2200      	movs	r2, #0
 80174a6:	f7ff ffe1 	bl	801746c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80174aa:	b003      	add	sp, #12
 80174ac:	f85d fb04 	ldr.w	pc, [sp], #4

080174b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80174b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174b2:	4604      	mov	r4, r0
 80174b4:	4610      	mov	r0, r2
 80174b6:	9103      	str	r1, [sp, #12]
 80174b8:	9202      	str	r2, [sp, #8]
 80174ba:	f7e8 fed9 	bl	8000270 <strlen>
 80174be:	9b02      	ldr	r3, [sp, #8]
 80174c0:	9000      	str	r0, [sp, #0]
 80174c2:	9903      	ldr	r1, [sp, #12]
 80174c4:	2200      	movs	r2, #0
 80174c6:	4620      	mov	r0, r4
 80174c8:	f7ff ffd0 	bl	801746c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80174cc:	b004      	add	sp, #16
 80174ce:	bd10      	pop	{r4, pc}

080174d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKc>:
 80174d0:	b510      	push	{r4, lr}
 80174d2:	b086      	sub	sp, #24
 80174d4:	4604      	mov	r4, r0
 80174d6:	4618      	mov	r0, r3
 80174d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80174dc:	9303      	str	r3, [sp, #12]
 80174de:	f7e8 fec7 	bl	8000270 <strlen>
 80174e2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80174e6:	9000      	str	r0, [sp, #0]
 80174e8:	9905      	ldr	r1, [sp, #20]
 80174ea:	4620      	mov	r0, r4
 80174ec:	f7ff ffbe 	bl	801746c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80174f0:	b006      	add	sp, #24
 80174f2:	bd10      	pop	{r4, pc}

080174f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80174f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174f6:	4604      	mov	r4, r0
 80174f8:	4623      	mov	r3, r4
 80174fa:	6840      	ldr	r0, [r0, #4]
 80174fc:	f853 6b08 	ldr.w	r6, [r3], #8
 8017500:	429e      	cmp	r6, r3
 8017502:	bf18      	it	ne
 8017504:	68a3      	ldrne	r3, [r4, #8]
 8017506:	eb00 0502 	add.w	r5, r0, r2
 801750a:	bf08      	it	eq
 801750c:	230f      	moveq	r3, #15
 801750e:	429d      	cmp	r5, r3
 8017510:	d80a      	bhi.n	8017528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8017512:	b112      	cbz	r2, 801751a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8017514:	4430      	add	r0, r6
 8017516:	f7ff fcf9 	bl	8016f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	6065      	str	r5, [r4, #4]
 801751e:	2200      	movs	r2, #0
 8017520:	4620      	mov	r0, r4
 8017522:	555a      	strb	r2, [r3, r5]
 8017524:	b002      	add	sp, #8
 8017526:	bd70      	pop	{r4, r5, r6, pc}
 8017528:	9200      	str	r2, [sp, #0]
 801752a:	460b      	mov	r3, r1
 801752c:	2200      	movs	r2, #0
 801752e:	4601      	mov	r1, r0
 8017530:	4620      	mov	r0, r4
 8017532:	f7ff fd5e 	bl	8016ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8017536:	e7f0      	b.n	801751a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8017538:	b508      	push	{r3, lr}
 801753a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801753e:	f7ff ffd9 	bl	80174f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8017542:	bd08      	pop	{r3, pc}

08017544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8017544:	b508      	push	{r3, lr}
 8017546:	f7ff fff7 	bl	8017538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 801754a:	bd08      	pop	{r3, pc}

0801754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 801754c:	b570      	push	{r4, r5, r6, lr}
 801754e:	4b06      	ldr	r3, [pc, #24]	; (8017568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8017550:	4604      	mov	r4, r0
 8017552:	460d      	mov	r5, r1
 8017554:	4616      	mov	r6, r2
 8017556:	2100      	movs	r1, #0
 8017558:	f7ff fcc0 	bl	8016edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801755c:	4632      	mov	r2, r6
 801755e:	4629      	mov	r1, r5
 8017560:	4620      	mov	r0, r4
 8017562:	f7ff ffc7 	bl	80174f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8017566:	bd70      	pop	{r4, r5, r6, pc}
 8017568:	08018d83 	.word	0x08018d83

0801756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801756c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801756e:	4604      	mov	r4, r0
 8017570:	4608      	mov	r0, r1
 8017572:	460d      	mov	r5, r1
 8017574:	f7e8 fe7c 	bl	8000270 <strlen>
 8017578:	4b06      	ldr	r3, [pc, #24]	; (8017594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801757a:	9001      	str	r0, [sp, #4]
 801757c:	4602      	mov	r2, r0
 801757e:	2100      	movs	r1, #0
 8017580:	4620      	mov	r0, r4
 8017582:	f7ff fcab 	bl	8016edc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8017586:	9a01      	ldr	r2, [sp, #4]
 8017588:	4629      	mov	r1, r5
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff ffb2 	bl	80174f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8017590:	b003      	add	sp, #12
 8017592:	bd30      	pop	{r4, r5, pc}
 8017594:	08018d83 	.word	0x08018d83

08017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8017598:	b508      	push	{r3, lr}
 801759a:	f7ff ffe7 	bl	801756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 801759e:	bd08      	pop	{r3, pc}

080175a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80175a0:	6800      	ldr	r0, [r0, #0]
 80175a2:	4770      	bx	lr

080175a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 80175a4:	6800      	ldr	r0, [r0, #0]
 80175a6:	4770      	bx	lr

080175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 80175a8:	4770      	bx	lr

080175aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 80175aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80175ae:	460e      	mov	r6, r1
 80175b0:	461d      	mov	r5, r3
 80175b2:	6841      	ldr	r1, [r0, #4]
 80175b4:	b93b      	cbnz	r3, 80175c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1c>
 80175b6:	4291      	cmp	r1, r2
 80175b8:	d201      	bcs.n	80175be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 80175ba:	f04f 32ff 	mov.w	r2, #4294967295
 80175be:	4610      	mov	r0, r2
 80175c0:	b003      	add	sp, #12
 80175c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175c6:	4291      	cmp	r1, r2
 80175c8:	d9f7      	bls.n	80175ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 80175ca:	f8d0 8000 	ldr.w	r8, [r0]
 80175ce:	7833      	ldrb	r3, [r6, #0]
 80175d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80175d4:	eb08 0701 	add.w	r7, r8, r1
 80175d8:	eb08 0002 	add.w	r0, r8, r2
 80175dc:	1a89      	subs	r1, r1, r2
 80175de:	f1c5 0901 	rsb	r9, r5, #1
 80175e2:	42a9      	cmp	r1, r5
 80175e4:	d3e9      	bcc.n	80175ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 80175e6:	f10d 0207 	add.w	r2, sp, #7
 80175ea:	4449      	add	r1, r9
 80175ec:	f7ff fc35 	bl	8016e5a <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80175f0:	4604      	mov	r4, r0
 80175f2:	2800      	cmp	r0, #0
 80175f4:	d0e1      	beq.n	80175ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 80175f6:	462a      	mov	r2, r5
 80175f8:	4631      	mov	r1, r6
 80175fa:	f7e9 fe93 	bl	8001324 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80175fe:	b910      	cbnz	r0, 8017606 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 8017600:	eba4 0208 	sub.w	r2, r4, r8
 8017604:	e7db      	b.n	80175be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 8017606:	1c60      	adds	r0, r4, #1
 8017608:	1a39      	subs	r1, r7, r0
 801760a:	e7ea      	b.n	80175e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x38>

0801760c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 801760c:	b508      	push	{r3, lr}
 801760e:	e9d1 1300 	ldrd	r1, r3, [r1]
 8017612:	f7ff ffca 	bl	80175aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8017616:	bd08      	pop	{r3, pc}

08017618 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 8017618:	b513      	push	{r0, r1, r4, lr}
 801761a:	4604      	mov	r4, r0
 801761c:	4608      	mov	r0, r1
 801761e:	9201      	str	r2, [sp, #4]
 8017620:	9100      	str	r1, [sp, #0]
 8017622:	f7e8 fe25 	bl	8000270 <strlen>
 8017626:	e9dd 1200 	ldrd	r1, r2, [sp]
 801762a:	4603      	mov	r3, r0
 801762c:	4620      	mov	r0, r4
 801762e:	f7ff ffbc 	bl	80175aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8017632:	b002      	add	sp, #8
 8017634:	bd10      	pop	{r4, pc}

08017636 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8017636:	b513      	push	{r0, r1, r4, lr}
 8017638:	f88d 1007 	strb.w	r1, [sp, #7]
 801763c:	6841      	ldr	r1, [r0, #4]
 801763e:	428a      	cmp	r2, r1
 8017640:	4613      	mov	r3, r2
 8017642:	d20a      	bcs.n	801765a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8017644:	6804      	ldr	r4, [r0, #0]
 8017646:	f10d 0207 	add.w	r2, sp, #7
 801764a:	1ac9      	subs	r1, r1, r3
 801764c:	18e0      	adds	r0, r4, r3
 801764e:	f7ff fc04 	bl	8016e5a <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8017652:	b110      	cbz	r0, 801765a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8017654:	1b00      	subs	r0, r0, r4
 8017656:	b002      	add	sp, #8
 8017658:	bd10      	pop	{r4, pc}
 801765a:	f04f 30ff 	mov.w	r0, #4294967295
 801765e:	e7fa      	b.n	8017656 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08017660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcj>:
 8017660:	6843      	ldr	r3, [r0, #4]
 8017662:	b510      	push	{r4, lr}
 8017664:	b163      	cbz	r3, 8017680 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcj+0x20>
 8017666:	3b01      	subs	r3, #1
 8017668:	429a      	cmp	r2, r3
 801766a:	bf28      	it	cs
 801766c:	461a      	movcs	r2, r3
 801766e:	6803      	ldr	r3, [r0, #0]
 8017670:	5c9c      	ldrb	r4, [r3, r2]
 8017672:	428c      	cmp	r4, r1
 8017674:	4613      	mov	r3, r2
 8017676:	f102 32ff 	add.w	r2, r2, #4294967295
 801767a:	d003      	beq.n	8017684 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcj+0x24>
 801767c:	1c53      	adds	r3, r2, #1
 801767e:	d1f6      	bne.n	801766e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcj+0xe>
 8017680:	f04f 33ff 	mov.w	r3, #4294967295
 8017684:	4618      	mov	r0, r3
 8017686:	bd10      	pop	{r4, pc}

08017688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj>:
 8017688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801768a:	6844      	ldr	r4, [r0, #4]
 801768c:	460e      	mov	r6, r1
 801768e:	461d      	mov	r5, r3
 8017690:	b17c      	cbz	r4, 80176b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj+0x2a>
 8017692:	b173      	cbz	r3, 80176b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj+0x2a>
 8017694:	3c01      	subs	r4, #1
 8017696:	4294      	cmp	r4, r2
 8017698:	6807      	ldr	r7, [r0, #0]
 801769a:	bf28      	it	cs
 801769c:	4614      	movcs	r4, r2
 801769e:	193a      	adds	r2, r7, r4
 80176a0:	4629      	mov	r1, r5
 80176a2:	4630      	mov	r0, r6
 80176a4:	f7ff fbd9 	bl	8016e5a <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80176a8:	b908      	cbnz	r0, 80176ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj+0x26>
 80176aa:	3c01      	subs	r4, #1
 80176ac:	d2f7      	bcs.n	801769e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj+0x16>
 80176ae:	4620      	mov	r0, r4
 80176b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176b2:	f04f 34ff 	mov.w	r4, #4294967295
 80176b6:	e7fa      	b.n	80176ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj+0x26>

080176b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofERKS4_j>:
 80176b8:	b508      	push	{r3, lr}
 80176ba:	e9d1 1300 	ldrd	r1, r3, [r1]
 80176be:	f7ff ffe3 	bl	8017688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj>
 80176c2:	bd08      	pop	{r3, pc}

080176c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcj>:
 80176c4:	b513      	push	{r0, r1, r4, lr}
 80176c6:	4604      	mov	r4, r0
 80176c8:	4608      	mov	r0, r1
 80176ca:	9201      	str	r2, [sp, #4]
 80176cc:	9100      	str	r1, [sp, #0]
 80176ce:	f7e8 fdcf 	bl	8000270 <strlen>
 80176d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80176d6:	4603      	mov	r3, r0
 80176d8:	4620      	mov	r0, r4
 80176da:	f7ff ffd5 	bl	8017688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj>
 80176de:	b002      	add	sp, #8
 80176e0:	bd10      	pop	{r4, pc}

080176e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEcj>:
 80176e2:	b508      	push	{r3, lr}
 80176e4:	f7ff ffbc 	bl	8017660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcj>
 80176e8:	bd08      	pop	{r3, pc}

080176ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80176ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176ec:	6846      	ldr	r6, [r0, #4]
 80176ee:	9101      	str	r1, [sp, #4]
 80176f0:	4605      	mov	r5, r0
 80176f2:	4608      	mov	r0, r1
 80176f4:	f7e8 fdbc 	bl	8000270 <strlen>
 80176f8:	4286      	cmp	r6, r0
 80176fa:	4604      	mov	r4, r0
 80176fc:	4632      	mov	r2, r6
 80176fe:	9901      	ldr	r1, [sp, #4]
 8017700:	bf28      	it	cs
 8017702:	4602      	movcs	r2, r0
 8017704:	6828      	ldr	r0, [r5, #0]
 8017706:	f7e9 fe0d 	bl	8001324 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801770a:	b900      	cbnz	r0, 801770e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 801770c:	1b30      	subs	r0, r6, r4
 801770e:	b002      	add	sp, #8
 8017710:	bd70      	pop	{r4, r5, r6, pc}
	...

08017714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8017714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017716:	4604      	mov	r4, r0
 8017718:	4616      	mov	r6, r2
 801771a:	460d      	mov	r5, r1
 801771c:	b919      	cbnz	r1, 8017726 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801771e:	b112      	cbz	r2, 8017726 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8017720:	480d      	ldr	r0, [pc, #52]	; (8017758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8017722:	f000 f8b1 	bl	8017888 <_ZSt19__throw_logic_errorPKc>
 8017726:	1b73      	subs	r3, r6, r5
 8017728:	2b0f      	cmp	r3, #15
 801772a:	9301      	str	r3, [sp, #4]
 801772c:	d907      	bls.n	801773e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801772e:	2200      	movs	r2, #0
 8017730:	a901      	add	r1, sp, #4
 8017732:	4620      	mov	r0, r4
 8017734:	f7ff fb9a 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8017738:	9b01      	ldr	r3, [sp, #4]
 801773a:	6020      	str	r0, [r4, #0]
 801773c:	60a3      	str	r3, [r4, #8]
 801773e:	4632      	mov	r2, r6
 8017740:	4629      	mov	r1, r5
 8017742:	6820      	ldr	r0, [r4, #0]
 8017744:	f7ff fc25 	bl	8016f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8017748:	9b01      	ldr	r3, [sp, #4]
 801774a:	6822      	ldr	r2, [r4, #0]
 801774c:	6063      	str	r3, [r4, #4]
 801774e:	2100      	movs	r1, #0
 8017750:	54d1      	strb	r1, [r2, r3]
 8017752:	b002      	add	sp, #8
 8017754:	bd70      	pop	{r4, r5, r6, pc}
 8017756:	bf00      	nop
 8017758:	08018d98 	.word	0x08018d98

0801775c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801775c:	b538      	push	{r3, r4, r5, lr}
 801775e:	f100 0308 	add.w	r3, r0, #8
 8017762:	6003      	str	r3, [r0, #0]
 8017764:	e9d1 5200 	ldrd	r5, r2, [r1]
 8017768:	4604      	mov	r4, r0
 801776a:	f04f 0300 	mov.w	r3, #0
 801776e:	442a      	add	r2, r5
 8017770:	4629      	mov	r1, r5
 8017772:	f7ff ffcf 	bl	8017714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8017776:	4620      	mov	r0, r4
 8017778:	bd38      	pop	{r3, r4, r5, pc}
	...

0801777c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801777c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801777e:	4604      	mov	r4, r0
 8017780:	4616      	mov	r6, r2
 8017782:	460d      	mov	r5, r1
 8017784:	b919      	cbnz	r1, 801778e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8017786:	b112      	cbz	r2, 801778e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8017788:	480d      	ldr	r0, [pc, #52]	; (80177c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801778a:	f000 f87d 	bl	8017888 <_ZSt19__throw_logic_errorPKc>
 801778e:	1b73      	subs	r3, r6, r5
 8017790:	2b0f      	cmp	r3, #15
 8017792:	9301      	str	r3, [sp, #4]
 8017794:	d907      	bls.n	80177a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8017796:	2200      	movs	r2, #0
 8017798:	a901      	add	r1, sp, #4
 801779a:	4620      	mov	r0, r4
 801779c:	f7ff fb66 	bl	8016e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80177a0:	9b01      	ldr	r3, [sp, #4]
 80177a2:	6020      	str	r0, [r4, #0]
 80177a4:	60a3      	str	r3, [r4, #8]
 80177a6:	4632      	mov	r2, r6
 80177a8:	4629      	mov	r1, r5
 80177aa:	6820      	ldr	r0, [r4, #0]
 80177ac:	f7ff fbf6 	bl	8016f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80177b0:	9b01      	ldr	r3, [sp, #4]
 80177b2:	6822      	ldr	r2, [r4, #0]
 80177b4:	6063      	str	r3, [r4, #4]
 80177b6:	2100      	movs	r1, #0
 80177b8:	54d1      	strb	r1, [r2, r3]
 80177ba:	b002      	add	sp, #8
 80177bc:	bd70      	pop	{r4, r5, r6, pc}
 80177be:	bf00      	nop
 80177c0:	08018d98 	.word	0x08018d98

080177c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	f100 0308 	add.w	r3, r0, #8
 80177ca:	4604      	mov	r4, r0
 80177cc:	6003      	str	r3, [r0, #0]
 80177ce:	460d      	mov	r5, r1
 80177d0:	b159      	cbz	r1, 80177ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80177d2:	4608      	mov	r0, r1
 80177d4:	f7e8 fd4c 	bl	8000270 <strlen>
 80177d8:	182a      	adds	r2, r5, r0
 80177da:	4620      	mov	r0, r4
 80177dc:	f04f 0300 	mov.w	r3, #0
 80177e0:	4629      	mov	r1, r5
 80177e2:	f7ff ffcb 	bl	801777c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80177e6:	4620      	mov	r0, r4
 80177e8:	bd38      	pop	{r3, r4, r5, pc}
 80177ea:	2201      	movs	r2, #1
 80177ec:	e7f5      	b.n	80177da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

080177f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80177f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f4:	460d      	mov	r5, r1
 80177f6:	4617      	mov	r7, r2
 80177f8:	4698      	mov	r8, r3
 80177fa:	f100 0308 	add.w	r3, r0, #8
 80177fe:	4604      	mov	r4, r0
 8017800:	6003      	str	r3, [r0, #0]
 8017802:	4639      	mov	r1, r7
 8017804:	4a0a      	ldr	r2, [pc, #40]	; (8017830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8017806:	4628      	mov	r0, r5
 8017808:	f7ff fb5a 	bl	8016ec0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801780c:	682e      	ldr	r6, [r5, #0]
 801780e:	686a      	ldr	r2, [r5, #4]
 8017810:	1831      	adds	r1, r6, r0
 8017812:	1bd2      	subs	r2, r2, r7
 8017814:	4620      	mov	r0, r4
 8017816:	f04f 0300 	mov.w	r3, #0
 801781a:	4542      	cmp	r2, r8
 801781c:	bf94      	ite	ls
 801781e:	188a      	addls	r2, r1, r2
 8017820:	eb01 0208 	addhi.w	r2, r1, r8
 8017824:	f7ff ffaa 	bl	801777c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8017828:	4620      	mov	r0, r4
 801782a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801782e:	bf00      	nop
 8017830:	08018dc2 	.word	0x08018dc2

08017834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8017834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017836:	460d      	mov	r5, r1
 8017838:	4604      	mov	r4, r0
 801783a:	4611      	mov	r1, r2
 801783c:	4628      	mov	r0, r5
 801783e:	4a06      	ldr	r2, [pc, #24]	; (8017858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	f7ff fb3d 	bl	8016ec0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8017846:	9b01      	ldr	r3, [sp, #4]
 8017848:	4602      	mov	r2, r0
 801784a:	4629      	mov	r1, r5
 801784c:	4620      	mov	r0, r4
 801784e:	f7ff ffcf 	bl	80177f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8017852:	4620      	mov	r0, r4
 8017854:	b003      	add	sp, #12
 8017856:	bd30      	pop	{r4, r5, pc}
 8017858:	08018ddd 	.word	0x08018ddd

0801785c <_ZdlPv>:
 801785c:	f000 b8e2 	b.w	8017a24 <free>

08017860 <_Znwj>:
 8017860:	2801      	cmp	r0, #1
 8017862:	bf38      	it	cc
 8017864:	2001      	movcc	r0, #1
 8017866:	b510      	push	{r4, lr}
 8017868:	4604      	mov	r4, r0
 801786a:	4620      	mov	r0, r4
 801786c:	f000 f8d2 	bl	8017a14 <malloc>
 8017870:	b100      	cbz	r0, 8017874 <_Znwj+0x14>
 8017872:	bd10      	pop	{r4, pc}
 8017874:	f000 f8be 	bl	80179f4 <_ZSt15get_new_handlerv>
 8017878:	b908      	cbnz	r0, 801787e <_Znwj+0x1e>
 801787a:	f000 f8c3 	bl	8017a04 <abort>
 801787e:	4780      	blx	r0
 8017880:	e7f3      	b.n	801786a <_Znwj+0xa>

08017882 <_ZSt17__throw_bad_allocv>:
 8017882:	b508      	push	{r3, lr}
 8017884:	f000 f8be 	bl	8017a04 <abort>

08017888 <_ZSt19__throw_logic_errorPKc>:
 8017888:	b508      	push	{r3, lr}
 801788a:	f000 f8bb 	bl	8017a04 <abort>

0801788e <_ZSt20__throw_length_errorPKc>:
 801788e:	b508      	push	{r3, lr}
 8017890:	f000 f8b8 	bl	8017a04 <abort>

08017894 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8017894:	b40f      	push	{r0, r1, r2, r3}
 8017896:	b580      	push	{r7, lr}
 8017898:	b084      	sub	sp, #16
 801789a:	af00      	add	r7, sp, #0
 801789c:	f107 0418 	add.w	r4, r7, #24
 80178a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80178a4:	607a      	str	r2, [r7, #4]
 80178a6:	4610      	mov	r0, r2
 80178a8:	f7e8 fce2 	bl	8000270 <strlen>
 80178ac:	f200 2307 	addw	r3, r0, #519	; 0x207
 80178b0:	f023 0307 	bic.w	r3, r3, #7
 80178b4:	ebad 0d03 	sub.w	sp, sp, r3
 80178b8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	60fc      	str	r4, [r7, #12]
 80178c0:	4623      	mov	r3, r4
 80178c2:	4668      	mov	r0, sp
 80178c4:	f000 f854 	bl	8017970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80178c8:	f000 f89c 	bl	8017a04 <abort>

080178cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b09c      	sub	sp, #112	; 0x70
 80178d0:	4606      	mov	r6, r0
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	460c      	mov	r4, r1
 80178d6:	1ba4      	subs	r4, r4, r6
 80178d8:	490e      	ldr	r1, [pc, #56]	; (8017914 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80178da:	2269      	movs	r2, #105	; 0x69
 80178dc:	1d38      	adds	r0, r7, #4
 80178de:	f000 fa07 	bl	8017cf0 <memcpy>
 80178e2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80178e6:	f023 0307 	bic.w	r3, r3, #7
 80178ea:	ebad 0d03 	sub.w	sp, sp, r3
 80178ee:	466d      	mov	r5, sp
 80178f0:	2268      	movs	r2, #104	; 0x68
 80178f2:	1d39      	adds	r1, r7, #4
 80178f4:	4628      	mov	r0, r5
 80178f6:	f000 f9fb 	bl	8017cf0 <memcpy>
 80178fa:	4622      	mov	r2, r4
 80178fc:	4631      	mov	r1, r6
 80178fe:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8017902:	442c      	add	r4, r5
 8017904:	f000 f9f4 	bl	8017cf0 <memcpy>
 8017908:	2300      	movs	r3, #0
 801790a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801790e:	4628      	mov	r0, r5
 8017910:	f7ff ffba 	bl	8017888 <_ZSt19__throw_logic_errorPKc>
 8017914:	08018df2 	.word	0x08018df2

08017918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8017918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801791c:	af00      	add	r7, sp, #0
 801791e:	b084      	sub	sp, #16
 8017920:	466d      	mov	r5, sp
 8017922:	f105 040c 	add.w	r4, r5, #12
 8017926:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801796c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801792a:	4623      	mov	r3, r4
 801792c:	f04f 0c0a 	mov.w	ip, #10
 8017930:	fbb2 f6fc 	udiv	r6, r2, ip
 8017934:	fb0c 2e16 	mls	lr, ip, r6, r2
 8017938:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801793c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8017940:	4696      	mov	lr, r2
 8017942:	f1be 0f09 	cmp.w	lr, #9
 8017946:	4632      	mov	r2, r6
 8017948:	d8f2      	bhi.n	8017930 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801794a:	1ae4      	subs	r4, r4, r3
 801794c:	428c      	cmp	r4, r1
 801794e:	d809      	bhi.n	8017964 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8017950:	f1c4 010c 	rsb	r1, r4, #12
 8017954:	4622      	mov	r2, r4
 8017956:	4429      	add	r1, r5
 8017958:	f000 f9ca 	bl	8017cf0 <memcpy>
 801795c:	4620      	mov	r0, r4
 801795e:	46bd      	mov	sp, r7
 8017960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017964:	f04f 34ff 	mov.w	r4, #4294967295
 8017968:	e7f8      	b.n	801795c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801796a:	bf00      	nop
 801796c:	08018e5b 	.word	0x08018e5b

08017970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8017970:	3901      	subs	r1, #1
 8017972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017976:	4607      	mov	r7, r0
 8017978:	4615      	mov	r5, r2
 801797a:	eb00 0801 	add.w	r8, r0, r1
 801797e:	4604      	mov	r4, r0
 8017980:	782a      	ldrb	r2, [r5, #0]
 8017982:	b392      	cbz	r2, 80179ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8017984:	4544      	cmp	r4, r8
 8017986:	d216      	bcs.n	80179b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 8017988:	2a25      	cmp	r2, #37	; 0x25
 801798a:	d107      	bne.n	801799c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801798c:	786a      	ldrb	r2, [r5, #1]
 801798e:	2a73      	cmp	r2, #115	; 0x73
 8017990:	d009      	beq.n	80179a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8017992:	2a7a      	cmp	r2, #122	; 0x7a
 8017994:	d016      	beq.n	80179c4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 8017996:	2a25      	cmp	r2, #37	; 0x25
 8017998:	d100      	bne.n	801799c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801799a:	3501      	adds	r5, #1
 801799c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80179a0:	f804 2b01 	strb.w	r2, [r4], #1
 80179a4:	e7ec      	b.n	8017980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80179a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80179aa:	3a01      	subs	r2, #1
 80179ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80179b0:	b1c9      	cbz	r1, 80179e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80179b2:	4544      	cmp	r4, r8
 80179b4:	d103      	bne.n	80179be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 80179b6:	4621      	mov	r1, r4
 80179b8:	4638      	mov	r0, r7
 80179ba:	f7ff ff87 	bl	80178cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80179be:	f804 1b01 	strb.w	r1, [r4], #1
 80179c2:	e7f3      	b.n	80179ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80179c4:	78aa      	ldrb	r2, [r5, #2]
 80179c6:	2a75      	cmp	r2, #117	; 0x75
 80179c8:	d1e8      	bne.n	801799c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80179ca:	461e      	mov	r6, r3
 80179cc:	eba8 0104 	sub.w	r1, r8, r4
 80179d0:	f856 2b04 	ldr.w	r2, [r6], #4
 80179d4:	4620      	mov	r0, r4
 80179d6:	f7ff ff9f 	bl	8017918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80179da:	2800      	cmp	r0, #0
 80179dc:	ddeb      	ble.n	80179b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80179de:	4404      	add	r4, r0
 80179e0:	3503      	adds	r5, #3
 80179e2:	4633      	mov	r3, r6
 80179e4:	e7cc      	b.n	8017980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80179e6:	3502      	adds	r5, #2
 80179e8:	e7ca      	b.n	8017980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80179ea:	7022      	strb	r2, [r4, #0]
 80179ec:	1be0      	subs	r0, r4, r7
 80179ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080179f4 <_ZSt15get_new_handlerv>:
 80179f4:	4b02      	ldr	r3, [pc, #8]	; (8017a00 <_ZSt15get_new_handlerv+0xc>)
 80179f6:	6818      	ldr	r0, [r3, #0]
 80179f8:	f3bf 8f5b 	dmb	ish
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	20000f28 	.word	0x20000f28

08017a04 <abort>:
 8017a04:	b508      	push	{r3, lr}
 8017a06:	2006      	movs	r0, #6
 8017a08:	f000 f91a 	bl	8017c40 <raise>
 8017a0c:	2001      	movs	r0, #1
 8017a0e:	f7fa fdb1 	bl	8012574 <_exit>
	...

08017a14 <malloc>:
 8017a14:	4b02      	ldr	r3, [pc, #8]	; (8017a20 <malloc+0xc>)
 8017a16:	4601      	mov	r1, r0
 8017a18:	6818      	ldr	r0, [r3, #0]
 8017a1a:	f000 b82b 	b.w	8017a74 <_malloc_r>
 8017a1e:	bf00      	nop
 8017a20:	2000007c 	.word	0x2000007c

08017a24 <free>:
 8017a24:	4b02      	ldr	r3, [pc, #8]	; (8017a30 <free+0xc>)
 8017a26:	4601      	mov	r1, r0
 8017a28:	6818      	ldr	r0, [r3, #0]
 8017a2a:	f000 b96f 	b.w	8017d0c <_free_r>
 8017a2e:	bf00      	nop
 8017a30:	2000007c 	.word	0x2000007c

08017a34 <sbrk_aligned>:
 8017a34:	b570      	push	{r4, r5, r6, lr}
 8017a36:	4e0e      	ldr	r6, [pc, #56]	; (8017a70 <sbrk_aligned+0x3c>)
 8017a38:	460c      	mov	r4, r1
 8017a3a:	6831      	ldr	r1, [r6, #0]
 8017a3c:	4605      	mov	r5, r0
 8017a3e:	b911      	cbnz	r1, 8017a46 <sbrk_aligned+0x12>
 8017a40:	f000 f91a 	bl	8017c78 <_sbrk_r>
 8017a44:	6030      	str	r0, [r6, #0]
 8017a46:	4621      	mov	r1, r4
 8017a48:	4628      	mov	r0, r5
 8017a4a:	f000 f915 	bl	8017c78 <_sbrk_r>
 8017a4e:	1c43      	adds	r3, r0, #1
 8017a50:	d00a      	beq.n	8017a68 <sbrk_aligned+0x34>
 8017a52:	1cc4      	adds	r4, r0, #3
 8017a54:	f024 0403 	bic.w	r4, r4, #3
 8017a58:	42a0      	cmp	r0, r4
 8017a5a:	d007      	beq.n	8017a6c <sbrk_aligned+0x38>
 8017a5c:	1a21      	subs	r1, r4, r0
 8017a5e:	4628      	mov	r0, r5
 8017a60:	f000 f90a 	bl	8017c78 <_sbrk_r>
 8017a64:	3001      	adds	r0, #1
 8017a66:	d101      	bne.n	8017a6c <sbrk_aligned+0x38>
 8017a68:	f04f 34ff 	mov.w	r4, #4294967295
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	bd70      	pop	{r4, r5, r6, pc}
 8017a70:	20000f30 	.word	0x20000f30

08017a74 <_malloc_r>:
 8017a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a78:	1ccd      	adds	r5, r1, #3
 8017a7a:	f025 0503 	bic.w	r5, r5, #3
 8017a7e:	3508      	adds	r5, #8
 8017a80:	2d0c      	cmp	r5, #12
 8017a82:	bf38      	it	cc
 8017a84:	250c      	movcc	r5, #12
 8017a86:	2d00      	cmp	r5, #0
 8017a88:	4607      	mov	r7, r0
 8017a8a:	db01      	blt.n	8017a90 <_malloc_r+0x1c>
 8017a8c:	42a9      	cmp	r1, r5
 8017a8e:	d905      	bls.n	8017a9c <_malloc_r+0x28>
 8017a90:	230c      	movs	r3, #12
 8017a92:	603b      	str	r3, [r7, #0]
 8017a94:	2600      	movs	r6, #0
 8017a96:	4630      	mov	r0, r6
 8017a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017b70 <_malloc_r+0xfc>
 8017aa0:	f000 f868 	bl	8017b74 <__malloc_lock>
 8017aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8017aa8:	461c      	mov	r4, r3
 8017aaa:	bb5c      	cbnz	r4, 8017b04 <_malloc_r+0x90>
 8017aac:	4629      	mov	r1, r5
 8017aae:	4638      	mov	r0, r7
 8017ab0:	f7ff ffc0 	bl	8017a34 <sbrk_aligned>
 8017ab4:	1c43      	adds	r3, r0, #1
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	d155      	bne.n	8017b66 <_malloc_r+0xf2>
 8017aba:	f8d8 4000 	ldr.w	r4, [r8]
 8017abe:	4626      	mov	r6, r4
 8017ac0:	2e00      	cmp	r6, #0
 8017ac2:	d145      	bne.n	8017b50 <_malloc_r+0xdc>
 8017ac4:	2c00      	cmp	r4, #0
 8017ac6:	d048      	beq.n	8017b5a <_malloc_r+0xe6>
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	4631      	mov	r1, r6
 8017acc:	4638      	mov	r0, r7
 8017ace:	eb04 0903 	add.w	r9, r4, r3
 8017ad2:	f000 f8d1 	bl	8017c78 <_sbrk_r>
 8017ad6:	4581      	cmp	r9, r0
 8017ad8:	d13f      	bne.n	8017b5a <_malloc_r+0xe6>
 8017ada:	6821      	ldr	r1, [r4, #0]
 8017adc:	1a6d      	subs	r5, r5, r1
 8017ade:	4629      	mov	r1, r5
 8017ae0:	4638      	mov	r0, r7
 8017ae2:	f7ff ffa7 	bl	8017a34 <sbrk_aligned>
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	d037      	beq.n	8017b5a <_malloc_r+0xe6>
 8017aea:	6823      	ldr	r3, [r4, #0]
 8017aec:	442b      	add	r3, r5
 8017aee:	6023      	str	r3, [r4, #0]
 8017af0:	f8d8 3000 	ldr.w	r3, [r8]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d038      	beq.n	8017b6a <_malloc_r+0xf6>
 8017af8:	685a      	ldr	r2, [r3, #4]
 8017afa:	42a2      	cmp	r2, r4
 8017afc:	d12b      	bne.n	8017b56 <_malloc_r+0xe2>
 8017afe:	2200      	movs	r2, #0
 8017b00:	605a      	str	r2, [r3, #4]
 8017b02:	e00f      	b.n	8017b24 <_malloc_r+0xb0>
 8017b04:	6822      	ldr	r2, [r4, #0]
 8017b06:	1b52      	subs	r2, r2, r5
 8017b08:	d41f      	bmi.n	8017b4a <_malloc_r+0xd6>
 8017b0a:	2a0b      	cmp	r2, #11
 8017b0c:	d917      	bls.n	8017b3e <_malloc_r+0xca>
 8017b0e:	1961      	adds	r1, r4, r5
 8017b10:	42a3      	cmp	r3, r4
 8017b12:	6025      	str	r5, [r4, #0]
 8017b14:	bf18      	it	ne
 8017b16:	6059      	strne	r1, [r3, #4]
 8017b18:	6863      	ldr	r3, [r4, #4]
 8017b1a:	bf08      	it	eq
 8017b1c:	f8c8 1000 	streq.w	r1, [r8]
 8017b20:	5162      	str	r2, [r4, r5]
 8017b22:	604b      	str	r3, [r1, #4]
 8017b24:	4638      	mov	r0, r7
 8017b26:	f104 060b 	add.w	r6, r4, #11
 8017b2a:	f000 f829 	bl	8017b80 <__malloc_unlock>
 8017b2e:	f026 0607 	bic.w	r6, r6, #7
 8017b32:	1d23      	adds	r3, r4, #4
 8017b34:	1af2      	subs	r2, r6, r3
 8017b36:	d0ae      	beq.n	8017a96 <_malloc_r+0x22>
 8017b38:	1b9b      	subs	r3, r3, r6
 8017b3a:	50a3      	str	r3, [r4, r2]
 8017b3c:	e7ab      	b.n	8017a96 <_malloc_r+0x22>
 8017b3e:	42a3      	cmp	r3, r4
 8017b40:	6862      	ldr	r2, [r4, #4]
 8017b42:	d1dd      	bne.n	8017b00 <_malloc_r+0x8c>
 8017b44:	f8c8 2000 	str.w	r2, [r8]
 8017b48:	e7ec      	b.n	8017b24 <_malloc_r+0xb0>
 8017b4a:	4623      	mov	r3, r4
 8017b4c:	6864      	ldr	r4, [r4, #4]
 8017b4e:	e7ac      	b.n	8017aaa <_malloc_r+0x36>
 8017b50:	4634      	mov	r4, r6
 8017b52:	6876      	ldr	r6, [r6, #4]
 8017b54:	e7b4      	b.n	8017ac0 <_malloc_r+0x4c>
 8017b56:	4613      	mov	r3, r2
 8017b58:	e7cc      	b.n	8017af4 <_malloc_r+0x80>
 8017b5a:	230c      	movs	r3, #12
 8017b5c:	603b      	str	r3, [r7, #0]
 8017b5e:	4638      	mov	r0, r7
 8017b60:	f000 f80e 	bl	8017b80 <__malloc_unlock>
 8017b64:	e797      	b.n	8017a96 <_malloc_r+0x22>
 8017b66:	6025      	str	r5, [r4, #0]
 8017b68:	e7dc      	b.n	8017b24 <_malloc_r+0xb0>
 8017b6a:	605b      	str	r3, [r3, #4]
 8017b6c:	deff      	udf	#255	; 0xff
 8017b6e:	bf00      	nop
 8017b70:	20000f2c 	.word	0x20000f2c

08017b74 <__malloc_lock>:
 8017b74:	4801      	ldr	r0, [pc, #4]	; (8017b7c <__malloc_lock+0x8>)
 8017b76:	f000 b8b9 	b.w	8017cec <__retarget_lock_acquire_recursive>
 8017b7a:	bf00      	nop
 8017b7c:	20001070 	.word	0x20001070

08017b80 <__malloc_unlock>:
 8017b80:	4801      	ldr	r0, [pc, #4]	; (8017b88 <__malloc_unlock+0x8>)
 8017b82:	f000 b8b4 	b.w	8017cee <__retarget_lock_release_recursive>
 8017b86:	bf00      	nop
 8017b88:	20001070 	.word	0x20001070

08017b8c <memcmp>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	3901      	subs	r1, #1
 8017b90:	4402      	add	r2, r0
 8017b92:	4290      	cmp	r0, r2
 8017b94:	d101      	bne.n	8017b9a <memcmp+0xe>
 8017b96:	2000      	movs	r0, #0
 8017b98:	e005      	b.n	8017ba6 <memcmp+0x1a>
 8017b9a:	7803      	ldrb	r3, [r0, #0]
 8017b9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ba0:	42a3      	cmp	r3, r4
 8017ba2:	d001      	beq.n	8017ba8 <memcmp+0x1c>
 8017ba4:	1b18      	subs	r0, r3, r4
 8017ba6:	bd10      	pop	{r4, pc}
 8017ba8:	3001      	adds	r0, #1
 8017baa:	e7f2      	b.n	8017b92 <memcmp+0x6>

08017bac <memmove>:
 8017bac:	4288      	cmp	r0, r1
 8017bae:	b510      	push	{r4, lr}
 8017bb0:	eb01 0402 	add.w	r4, r1, r2
 8017bb4:	d902      	bls.n	8017bbc <memmove+0x10>
 8017bb6:	4284      	cmp	r4, r0
 8017bb8:	4623      	mov	r3, r4
 8017bba:	d807      	bhi.n	8017bcc <memmove+0x20>
 8017bbc:	1e43      	subs	r3, r0, #1
 8017bbe:	42a1      	cmp	r1, r4
 8017bc0:	d008      	beq.n	8017bd4 <memmove+0x28>
 8017bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bca:	e7f8      	b.n	8017bbe <memmove+0x12>
 8017bcc:	4402      	add	r2, r0
 8017bce:	4601      	mov	r1, r0
 8017bd0:	428a      	cmp	r2, r1
 8017bd2:	d100      	bne.n	8017bd6 <memmove+0x2a>
 8017bd4:	bd10      	pop	{r4, pc}
 8017bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bde:	e7f7      	b.n	8017bd0 <memmove+0x24>

08017be0 <memset>:
 8017be0:	4402      	add	r2, r0
 8017be2:	4603      	mov	r3, r0
 8017be4:	4293      	cmp	r3, r2
 8017be6:	d100      	bne.n	8017bea <memset+0xa>
 8017be8:	4770      	bx	lr
 8017bea:	f803 1b01 	strb.w	r1, [r3], #1
 8017bee:	e7f9      	b.n	8017be4 <memset+0x4>

08017bf0 <_raise_r>:
 8017bf0:	291f      	cmp	r1, #31
 8017bf2:	b538      	push	{r3, r4, r5, lr}
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	460d      	mov	r5, r1
 8017bf8:	d904      	bls.n	8017c04 <_raise_r+0x14>
 8017bfa:	2316      	movs	r3, #22
 8017bfc:	6003      	str	r3, [r0, #0]
 8017bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8017c02:	bd38      	pop	{r3, r4, r5, pc}
 8017c04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017c06:	b112      	cbz	r2, 8017c0e <_raise_r+0x1e>
 8017c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c0c:	b94b      	cbnz	r3, 8017c22 <_raise_r+0x32>
 8017c0e:	4620      	mov	r0, r4
 8017c10:	f000 f830 	bl	8017c74 <_getpid_r>
 8017c14:	462a      	mov	r2, r5
 8017c16:	4601      	mov	r1, r0
 8017c18:	4620      	mov	r0, r4
 8017c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c1e:	f000 b817 	b.w	8017c50 <_kill_r>
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d00a      	beq.n	8017c3c <_raise_r+0x4c>
 8017c26:	1c59      	adds	r1, r3, #1
 8017c28:	d103      	bne.n	8017c32 <_raise_r+0x42>
 8017c2a:	2316      	movs	r3, #22
 8017c2c:	6003      	str	r3, [r0, #0]
 8017c2e:	2001      	movs	r0, #1
 8017c30:	e7e7      	b.n	8017c02 <_raise_r+0x12>
 8017c32:	2400      	movs	r4, #0
 8017c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017c38:	4628      	mov	r0, r5
 8017c3a:	4798      	blx	r3
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	e7e0      	b.n	8017c02 <_raise_r+0x12>

08017c40 <raise>:
 8017c40:	4b02      	ldr	r3, [pc, #8]	; (8017c4c <raise+0xc>)
 8017c42:	4601      	mov	r1, r0
 8017c44:	6818      	ldr	r0, [r3, #0]
 8017c46:	f7ff bfd3 	b.w	8017bf0 <_raise_r>
 8017c4a:	bf00      	nop
 8017c4c:	2000007c 	.word	0x2000007c

08017c50 <_kill_r>:
 8017c50:	b538      	push	{r3, r4, r5, lr}
 8017c52:	4d07      	ldr	r5, [pc, #28]	; (8017c70 <_kill_r+0x20>)
 8017c54:	2300      	movs	r3, #0
 8017c56:	4604      	mov	r4, r0
 8017c58:	4608      	mov	r0, r1
 8017c5a:	4611      	mov	r1, r2
 8017c5c:	602b      	str	r3, [r5, #0]
 8017c5e:	f7fa fc79 	bl	8012554 <_kill>
 8017c62:	1c43      	adds	r3, r0, #1
 8017c64:	d102      	bne.n	8017c6c <_kill_r+0x1c>
 8017c66:	682b      	ldr	r3, [r5, #0]
 8017c68:	b103      	cbz	r3, 8017c6c <_kill_r+0x1c>
 8017c6a:	6023      	str	r3, [r4, #0]
 8017c6c:	bd38      	pop	{r3, r4, r5, pc}
 8017c6e:	bf00      	nop
 8017c70:	2000106c 	.word	0x2000106c

08017c74 <_getpid_r>:
 8017c74:	f7fa bc66 	b.w	8012544 <_getpid>

08017c78 <_sbrk_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	4d06      	ldr	r5, [pc, #24]	; (8017c94 <_sbrk_r+0x1c>)
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	4604      	mov	r4, r0
 8017c80:	4608      	mov	r0, r1
 8017c82:	602b      	str	r3, [r5, #0]
 8017c84:	f7fa fc80 	bl	8012588 <_sbrk>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	d102      	bne.n	8017c92 <_sbrk_r+0x1a>
 8017c8c:	682b      	ldr	r3, [r5, #0]
 8017c8e:	b103      	cbz	r3, 8017c92 <_sbrk_r+0x1a>
 8017c90:	6023      	str	r3, [r4, #0]
 8017c92:	bd38      	pop	{r3, r4, r5, pc}
 8017c94:	2000106c 	.word	0x2000106c

08017c98 <__errno>:
 8017c98:	4b01      	ldr	r3, [pc, #4]	; (8017ca0 <__errno+0x8>)
 8017c9a:	6818      	ldr	r0, [r3, #0]
 8017c9c:	4770      	bx	lr
 8017c9e:	bf00      	nop
 8017ca0:	2000007c 	.word	0x2000007c

08017ca4 <__libc_init_array>:
 8017ca4:	b570      	push	{r4, r5, r6, lr}
 8017ca6:	4d0d      	ldr	r5, [pc, #52]	; (8017cdc <__libc_init_array+0x38>)
 8017ca8:	4c0d      	ldr	r4, [pc, #52]	; (8017ce0 <__libc_init_array+0x3c>)
 8017caa:	1b64      	subs	r4, r4, r5
 8017cac:	10a4      	asrs	r4, r4, #2
 8017cae:	2600      	movs	r6, #0
 8017cb0:	42a6      	cmp	r6, r4
 8017cb2:	d109      	bne.n	8017cc8 <__libc_init_array+0x24>
 8017cb4:	4d0b      	ldr	r5, [pc, #44]	; (8017ce4 <__libc_init_array+0x40>)
 8017cb6:	4c0c      	ldr	r4, [pc, #48]	; (8017ce8 <__libc_init_array+0x44>)
 8017cb8:	f000 f874 	bl	8017da4 <_init>
 8017cbc:	1b64      	subs	r4, r4, r5
 8017cbe:	10a4      	asrs	r4, r4, #2
 8017cc0:	2600      	movs	r6, #0
 8017cc2:	42a6      	cmp	r6, r4
 8017cc4:	d105      	bne.n	8017cd2 <__libc_init_array+0x2e>
 8017cc6:	bd70      	pop	{r4, r5, r6, pc}
 8017cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ccc:	4798      	blx	r3
 8017cce:	3601      	adds	r6, #1
 8017cd0:	e7ee      	b.n	8017cb0 <__libc_init_array+0xc>
 8017cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cd6:	4798      	blx	r3
 8017cd8:	3601      	adds	r6, #1
 8017cda:	e7f2      	b.n	8017cc2 <__libc_init_array+0x1e>
 8017cdc:	08018e70 	.word	0x08018e70
 8017ce0:	08018e70 	.word	0x08018e70
 8017ce4:	08018e70 	.word	0x08018e70
 8017ce8:	08018e78 	.word	0x08018e78

08017cec <__retarget_lock_acquire_recursive>:
 8017cec:	4770      	bx	lr

08017cee <__retarget_lock_release_recursive>:
 8017cee:	4770      	bx	lr

08017cf0 <memcpy>:
 8017cf0:	440a      	add	r2, r1
 8017cf2:	4291      	cmp	r1, r2
 8017cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8017cf8:	d100      	bne.n	8017cfc <memcpy+0xc>
 8017cfa:	4770      	bx	lr
 8017cfc:	b510      	push	{r4, lr}
 8017cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d06:	4291      	cmp	r1, r2
 8017d08:	d1f9      	bne.n	8017cfe <memcpy+0xe>
 8017d0a:	bd10      	pop	{r4, pc}

08017d0c <_free_r>:
 8017d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d0e:	2900      	cmp	r1, #0
 8017d10:	d044      	beq.n	8017d9c <_free_r+0x90>
 8017d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d16:	9001      	str	r0, [sp, #4]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8017d1e:	bfb8      	it	lt
 8017d20:	18e4      	addlt	r4, r4, r3
 8017d22:	f7ff ff27 	bl	8017b74 <__malloc_lock>
 8017d26:	4a1e      	ldr	r2, [pc, #120]	; (8017da0 <_free_r+0x94>)
 8017d28:	9801      	ldr	r0, [sp, #4]
 8017d2a:	6813      	ldr	r3, [r2, #0]
 8017d2c:	b933      	cbnz	r3, 8017d3c <_free_r+0x30>
 8017d2e:	6063      	str	r3, [r4, #4]
 8017d30:	6014      	str	r4, [r2, #0]
 8017d32:	b003      	add	sp, #12
 8017d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d38:	f7ff bf22 	b.w	8017b80 <__malloc_unlock>
 8017d3c:	42a3      	cmp	r3, r4
 8017d3e:	d908      	bls.n	8017d52 <_free_r+0x46>
 8017d40:	6825      	ldr	r5, [r4, #0]
 8017d42:	1961      	adds	r1, r4, r5
 8017d44:	428b      	cmp	r3, r1
 8017d46:	bf01      	itttt	eq
 8017d48:	6819      	ldreq	r1, [r3, #0]
 8017d4a:	685b      	ldreq	r3, [r3, #4]
 8017d4c:	1949      	addeq	r1, r1, r5
 8017d4e:	6021      	streq	r1, [r4, #0]
 8017d50:	e7ed      	b.n	8017d2e <_free_r+0x22>
 8017d52:	461a      	mov	r2, r3
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	b10b      	cbz	r3, 8017d5c <_free_r+0x50>
 8017d58:	42a3      	cmp	r3, r4
 8017d5a:	d9fa      	bls.n	8017d52 <_free_r+0x46>
 8017d5c:	6811      	ldr	r1, [r2, #0]
 8017d5e:	1855      	adds	r5, r2, r1
 8017d60:	42a5      	cmp	r5, r4
 8017d62:	d10b      	bne.n	8017d7c <_free_r+0x70>
 8017d64:	6824      	ldr	r4, [r4, #0]
 8017d66:	4421      	add	r1, r4
 8017d68:	1854      	adds	r4, r2, r1
 8017d6a:	42a3      	cmp	r3, r4
 8017d6c:	6011      	str	r1, [r2, #0]
 8017d6e:	d1e0      	bne.n	8017d32 <_free_r+0x26>
 8017d70:	681c      	ldr	r4, [r3, #0]
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	6053      	str	r3, [r2, #4]
 8017d76:	440c      	add	r4, r1
 8017d78:	6014      	str	r4, [r2, #0]
 8017d7a:	e7da      	b.n	8017d32 <_free_r+0x26>
 8017d7c:	d902      	bls.n	8017d84 <_free_r+0x78>
 8017d7e:	230c      	movs	r3, #12
 8017d80:	6003      	str	r3, [r0, #0]
 8017d82:	e7d6      	b.n	8017d32 <_free_r+0x26>
 8017d84:	6825      	ldr	r5, [r4, #0]
 8017d86:	1961      	adds	r1, r4, r5
 8017d88:	428b      	cmp	r3, r1
 8017d8a:	bf04      	itt	eq
 8017d8c:	6819      	ldreq	r1, [r3, #0]
 8017d8e:	685b      	ldreq	r3, [r3, #4]
 8017d90:	6063      	str	r3, [r4, #4]
 8017d92:	bf04      	itt	eq
 8017d94:	1949      	addeq	r1, r1, r5
 8017d96:	6021      	streq	r1, [r4, #0]
 8017d98:	6054      	str	r4, [r2, #4]
 8017d9a:	e7ca      	b.n	8017d32 <_free_r+0x26>
 8017d9c:	b003      	add	sp, #12
 8017d9e:	bd30      	pop	{r4, r5, pc}
 8017da0:	20000f2c 	.word	0x20000f2c

08017da4 <_init>:
 8017da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da6:	bf00      	nop
 8017da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017daa:	bc08      	pop	{r3}
 8017dac:	469e      	mov	lr, r3
 8017dae:	4770      	bx	lr

08017db0 <_fini>:
 8017db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017db2:	bf00      	nop
 8017db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017db6:	bc08      	pop	{r3}
 8017db8:	469e      	mov	lr, r3
 8017dba:	4770      	bx	lr
